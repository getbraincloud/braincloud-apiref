"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[90610],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},71559:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={},i="Server to Server (S2S)",s={unversionedId:"api/s2s/index",id:"api/s2s/index",title:"Server to Server (S2S)",description:"Overview",source:"@site/docs/api/4_s2s/index.md",sourceDirName:"api/4_s2s",slug:"/api/s2s/",permalink:"/braincloud-apiref/api/s2s/",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/4_s2s/index.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672193337,formattedLastUpdatedAt:"Dec 28, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Writing Scripts",permalink:"/braincloud-apiref/api/cc/writingscript"},next:{title:"Cloud Code Bridge",permalink:"/braincloud-apiref/api/s2s/abridge/"}},l={},p=[{value:"Overview",id:"overview",level:2},{value:"API Specification",id:"api-specification",level:3},{value:"Advanced Protocol",id:"advanced-protocol",level:3}],c=(d="DocCardList",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var d;const u={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"server-to-server-s2s"},"Server to Server (S2S)"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("h3",{id:"api-specification"},"API Specification"),(0,a.kt)("p",null,"brainCloud includes a Server to Server (S2S) interface for access from client-operated servers."),(0,a.kt)("p",null,"Uses for this sort of interface include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Secure submission of score data from dedicated multiplayer servers (i.e. prevents cheating)"),(0,a.kt)("li",{parentName:"ul"},"Creation of custom administrative tools"),(0,a.kt)("li",{parentName:"ul"},"Etc.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Standard Protocol - example request:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json-doc"},'{\n    "appId": "10000",\n    "serverName": "serverX",\n    "serverSecret": "5381505b-72ea-430d-82fe-d91b873ac7a2",\n    "service": "globalEntity",\n    "operation": "GET_SYSTEM_ENTITY_LIST_COUNT",\n    "data": {\n        "where": { "entityType": "bot" }\n    }\n}\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Standard Protocol - example response:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json-doc"},'{\n    "entityListCount": 2\n}\n')),(0,a.kt)("p",null,"Security for the interface is implemented via a separate S2S secret and the ability to configure valid source IP addresses. It allows for multiple server configurations to be configured per app."),(0,a.kt)("p",null,"The interface is implemented as a REST servlet that accepts JSON string POSTs and returns JSON responses. It is similar to the regular client REST interface in that the target API is based on selecting a ",(0,a.kt)("em",{parentName:"p"},"service")," and ",(0,a.kt)("em",{parentName:"p"},"operation"),". "),(0,a.kt)("p",null,'The name of the S2S servlet is "s2sdispatcher" so the URL required for the REST call is ',(0,a.kt)("inlineCode",{parentName:"p"},"https://api.braincloudservers.com/s2sdispatcher"),"."),(0,a.kt)("p",null,"Unlike client-callable cloud scripts, S2S scripts are run in the context of an app rather than a particular user profile \u2013 thus no user authentication is required (and hence the need + recommendation for the additional ip-based security)."),(0,a.kt)("p",null,"The schema for the JSON request is as follows:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"appId")," \u2013 brainCloud assigned id when game/app is created."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"serverName")," \u2013 Name of the server configured in the brainCloud portal."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"serverSecret")," \u2013 Secret assigned to that particular server configuration."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"service"),' \u2013 Identifies the service category of the REST call. (Currently only "script" is implemented.)'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"operation"),' \u2013 Identifies the operation within the service to executed. (Currently only "RUN" is implemented.)'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"data")," \u2013 Service/Operation dependent data parameters.")),(0,a.kt)("p",null,"The JSON response returns the result of the service/operation call."),(0,a.kt)("div",null),(0,a.kt)("h3",{id:"advanced-protocol"},"Advanced Protocol"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Advanced Protocol - Authentication request")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json-doc"},'{\n    "packetId": 0,\n    "messages": [\n        {\n            "service": "authenticationV2",\n            "operation": "AUTHENTICATE",\n            "data": {\n                "appId": "10000",\n                "serverName": "serverX",\n                "serverSecret": "5381505b-72ea-430d-82fe-d91b873ac7a2"\n            }\n        }\n    ]\n}\n')),(0,a.kt)("p",null,"In addition to the above mentioned standard simple REST protocol, brainCloud also implements a more complex packet/session based protocol. This protocol is similar to the one used on the normal client interface. It also includes the ability to bundle multiple messages into one REST request."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("strong",null,"Why use the advanced S2S protocol?")," ",(0,a.kt)("p",null),"Because it is faster *and* less expensive! Every standard S2S call requires our servers to first *authenticate* your request (using the appId, serverId and secret), and then process the request. This takes time - and we charge you an extra API count for it. With the advanced protocol, the authentication only happens once - so you save an API count for each request that follows! And get faster response times to boot!"),(0,a.kt)("p",null,"Notice the addition of the ",(0,a.kt)("inlineCode",{parentName:"p"},"packetId")," sequence number and array/bundle of messages. The typical response to the above packet:"),(0,a.kt)("div",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json-doc"},'{\n    "packetId": 0,\n    "messageResponses": [\n        {\n            "status": 200,\n            "data": {\n                "sessionId": "vrunikbkgmu3m9gkeqt78vvkb2"\n            }\n        }\n    ]\n}\n')),(0,a.kt)("p",null,"Notice the ",(0,a.kt)("inlineCode",{parentName:"p"},"packetId")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"sessionId")," in the response."),(0,a.kt)("div",null),"Subsequently you could send:",(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Follow-up request, with pre-authenticated session included:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json-doc"},'{\n    "packetId": 1,\n    "sessionId": "vrunikbkgmu3m9gkeqt78vvkb2",\n    "messages": [\n        {\n            "service": "script",\n            "operation": "RUN",\n            "data": {\n                "scriptName": "Add2Numbers",\n                "scriptData": {\n                    "x": 5,\n                    "y": 5\n                }\n            }\n        }\n    ]\n}\n')),(0,a.kt)("p",null,"Notice the incremented ",(0,a.kt)("inlineCode",{parentName:"p"},"packetId")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"sessionId"),' returned in the previous request.  In this simple case we are only sending one request (i.e. a "messages" array of 1). You can append more requests to this array to perform more than one request. The typical response would be:'),(0,a.kt)("div",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json-doc"},'{\n    "packetId": 1,\n    "messageResponses": [\n        {\n            "status": 200,\n            "data": {\n                "response": 10\n            }\n        }\n    ]\n}\n')),(0,a.kt)("p",null,'The "messageResponses" array is a list of responses corresponding to the "messages" array sent in the request.'),(0,a.kt)("p",null,'In the event that you do not receive a response to this request you can simply resend it, without incrementing the "packetId". If brainCloud had successfully received this request, executed it, and failed to return a response due to a network failure it will simply return the cached response from the original request to the resend. The ',(0,a.kt)("inlineCode",{parentName:"p"},"packetId")," field is critical to this cached response capability. brainCloud will only cache the last response."),(0,a.kt)(c,{mdxType:"DocCardList"}))}m.isMDXComponent=!0}}]);