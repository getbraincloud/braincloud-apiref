"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[97616],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(n),f=a,m=u["".concat(s,".").concat(f)]||u[f]||c[f]||l;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},86261:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var r=n(87462),a=(n(67294),n(3905));const l={title:"JS File Upload",date:"2016-04-14"},i=void 0,o={unversionedId:"learn/sdk-tutorials/javascript-tutorials/js-file-upload/index",id:"learn/sdk-tutorials/javascript-tutorials/js-file-upload/index",title:"JS File Upload",description:"Overview",source:"@site/docs/learn/6_sdk-tutorials/javascript-tutorials/js-file-upload/index.md",sourceDirName:"learn/6_sdk-tutorials/javascript-tutorials/js-file-upload",slug:"/learn/sdk-tutorials/javascript-tutorials/js-file-upload/",permalink:"/braincloud-apiref/learn/sdk-tutorials/javascript-tutorials/js-file-upload/",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/learn/6_sdk-tutorials/javascript-tutorials/js-file-upload/index.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672679892,formattedLastUpdatedAt:"Jan 2, 2023",frontMatter:{title:"JS File Upload",date:"2016-04-14"},sidebar:"learnSidebar",previous:{title:"Acey Deucey Example Game",permalink:"/braincloud-apiref/learn/sdk-tutorials/javascript-tutorials/javascript-example-game/"},next:{title:"Objective-C Tutorials",permalink:"/braincloud-apiref/learn/sdk-tutorials/objective-c-tutorials/"}},s={},d=[{value:"Overview",id:"overview",level:2},{value:"Create the Form",id:"create-the-form",level:2},{value:"Upload the File",id:"upload-the-file",level:2},{value:"Register Event Listeners",id:"register-event-listeners",level:2}],p={toc:d};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"The Javascript File Upload API works a bit differently than other clients. When working within Javascript, you have access to built-in classes\xa0to handle uploading a file as well as determining the status of that upload - specifically the XMLHttpRequest object. As a result, we've geared the brainCloud upload implementation to make use of these built-in classes and methods."),(0,a.kt)("h2",{id:"create-the-form"},"Create the Form"),(0,a.kt)("p",null,"The first thing you'll want to set up is a form for selecting a file. Note that in this form we also include a few divs so that we can display information about the file selected as well as the progress of the upload."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<form id="form1" enctype="multipart/form-data" method="post" action="Upload.aspx">\n  <div class="row">\n    <label for="fileToUpload">Select a File to Upload</label><br />\n    <input type="file" name="fileToUpload" id="fileToUpload" onchange="fileSelected();" />\n  </div>\n  <div id="fileName" />\n  <div id="fileSize" />\n  <div id="fileType" />\n  <div class="row">\n    <input type="button" onclick="uploadFile()" value="Upload" />\n  </div>\n  <div id="progress" />\n  <div id="log" />\n</form>\n')),(0,a.kt)("h2",{id:"upload-the-file"},"Upload the File"),(0,a.kt)("p",null,"Here are the functions defined to select a file and upload it. Note that fileSelected simply populates the divs defined in the form with information about the selected file. The uploadFile method creates the XMLHttpRequest object and, registers callback methods for various events. It then calls the ",(0,a.kt)("a",{parentName:"p",href:"/api/capi/file/prepareuserupload/"},"brainCloudClient.file.prepareFileUpload()")," method with various details\xa0about the file being uploaded. The callback of this method will then (on success) start the upload of the file to the brainCloud server using the ",(0,a.kt)("a",{parentName:"p",href:"/api/capi/file/uploadfile,javascript"},"brainCloudClient.file.uploadFile()")," method. and starts the upload of the file with brainCloud."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function fileSelected() {\n  var file = document.getElementById('fileToUpload').files[0];\n  if (file) {\n    var fileSize = 0;\n    if (file.size > 1024 * 1024)\n      fileSize = (Math.round(file.size * 100 / (1024 * 1024)) / 100).toString() + 'MB';\n    else\n      fileSize = (Math.round(file.size * 100 / 1024) / 100).toString() + 'KB';\n\n    document.getElementById('fileName').innerHTML = 'Name: ' + file.name;\n    document.getElementById('fileSize').innerHTML = 'Size: ' + fileSize;\n    document.getElementById('fileType').innerHTML = 'Type: ' + file.type;\n  }\n}\n        \nfunction uploadFile() {\n  var xhr = new XMLHttpRequest();\n  var file = document.getElementById('fileToUpload').files[0];\n  var fileSize = file.size;\n        \n  // register event listeners\n  xhr.upload.addEventListener(\"progress\", uploadProgress, false);\n  xhr.addEventListener(\"load\", uploadComplete, false);\n  xhr.addEventListener(\"error\", uploadFailed, false);\n  xhr.addEventListener(\"abort\", uploadCanceled, false);\n\n  brainCloudClient.file.prepareFileUpload(\n    \"path\", \"filename\", true, true, fileSize, \n    function(result) {\n      if (result.status == 200) {\n        var uploadId = result.data.fileDetails.uploadId;\n        brainCloudClient.file.uploadFile(xhr, file, uploadId);\n      }\n    }\n  );\n}\n")),(0,a.kt)("h2",{id:"register-event-listeners"},"Register Event Listeners"),(0,a.kt)("p",null,"Here are the registered event listeners. Of interest, uploadProgress is called periodically by the XMLHttpRequest object to indicate the progress of the file upload. You can attach your progress bar to this event listener."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'function updateProgress(progress) {\n  progress = progress >= 0 ? (progress <= 100 ? progress : 100) : 0;\n  document.getElementById(\'progress\').innerHTML = "Progress: " + progress + "%";\n}\n    \nfunction uploadProgress(oEvent) {\n  if (oEvent.lengthComputable) {\n    var percentComplete = oEvent.loaded / oEvent.total;\n    updateProgress(percentComplete * 100.0);\n  }\n  else {\n    // Unable to compute progress information since the total size is unknown\n  }\n}\n    \nfunction uploadComplete(evt) {\n  console.log("Upload complete: " + evt);\n  if (this.status == 200) {\n    var response = JSON.parse(this.responseText);\n    console.log(JSON.stringify(response, null, 2));\n  }\n}\n    \nfunction uploadFailed(evt) {\n  console.log("Upload failed: " + evt);\n}\n    \nfunction uploadCanceled(evt) {\n  console.log("Upload canceled: " + evt);\n}\n')))}u.isMDXComponent=!0}}]);