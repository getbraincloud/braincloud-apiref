"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[5867],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>m});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),c=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(i.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),y=a,m=u["".concat(i,".").concat(y)]||u[y]||d[y]||o;return t?n.createElement(m,s(s({ref:r},p),{},{components:t})):n.createElement(m,s({ref:r},p))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=y;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l[u]="string"==typeof e?e:a,s[1]=l;for(var c=2;c<o;c++)s[c]=t[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},93031:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>s,default:()=>v,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=t(87462),a=(t(67294),t(3905));const o={},s="GetSalesInventoryByCategory",l={unversionedId:"api/capi/appstore/getsalesinventorybycategory",id:"api/capi/appstore/getsalesinventorybycategory",title:"GetSalesInventoryByCategory",description:"Overview",source:"@site/docs/api/2_capi/appstore/getsalesinventorybycategory.md",sourceDirName:"api/2_capi/appstore",slug:"/api/capi/appstore/getsalesinventorybycategory",permalink:"/braincloud-apiref/api/capi/appstore/getsalesinventorybycategory",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/appstore/getsalesinventorybycategory.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671809255,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"GetSalesInventory",permalink:"/braincloud-apiref/api/capi/appstore/getsalesinventory"},next:{title:"RefreshPromotions",permalink:"/braincloud-apiref/api/capi/appstore/refreshpromotions"}},i={},c=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],p=e=>function(r){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",r)},u=p("PartialServop"),d=p("BrowserWindow"),y=p("Tabs"),m=p("TabItem"),g={toc:c};function v(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},g,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getsalesinventorybycategory"},"GetSalesInventoryByCategory"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Method gets the active sales inventory for the passed-in currency type, platform, and category."),(0,a.kt)("p",null,"Valid platforms are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"itunes"),(0,a.kt)("li",{parentName:"ul"},"facebook"),(0,a.kt)("li",{parentName:"ul"},"appworld"),(0,a.kt)("li",{parentName:"ul"},"steam"),(0,a.kt)("li",{parentName:"ul"},"windows"),(0,a.kt)("li",{parentName:"ul"},"windowsPhone"),(0,a.kt)("li",{parentName:"ul"},"googlePlay"),(0,a.kt)("li",{parentName:"ul"},"amazon")),(0,a.kt)(u,{service_name:"appStore",operation_name:"GET_INVENTORY",mdxType:"PartialServop"}),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)(d,{mdxType:"BrowserWindow"},(0,a.kt)(y,{mdxType:"Tabs"},(0,a.kt)(m,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'string storeId = "itunes";\nstring userCurrency = "{\\"userCurrency\\":\\"USD\\"}";\nstring category = "subscriptions";\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.AppStoreService.GetSalesInventoryByCategory(storeId, userCurrency, category, successCallback, failureCallback);\n'))),(0,a.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *storeId = "itunes";\nconst char *userCurrency = "{\\"userCurrency\\":\\"USD\\"}";\nconst char *category = "subscriptions";\n_bc->getAppStoreService()->getSalesInventoryByCategory(storeId, userCurrency, category, this);\n'))),(0,a.kt)(m,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *storeId = @"itunes";\nNSString *userCurrency = @"{\\"userCurrency\\":\\"USD\\"}";\nNSString *category = @"subscriptions";\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc appStoreService] getSalesInventoryByCategory:storeId\n               userCurrency:userCurrency\n                   category:category\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,a.kt)(m,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'String storeId = "itunes";\nString userCurrency = "{\\"userCurrency\\":\\"USD\\"}";\nString category = "subscriptions";\nthis; // implements IServerCallback\n\n_bc.getAppStoreService().getSalesInventoryByCategory(storeId, userCurrency, category, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,a.kt)(m,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'var storeId = "itunes";\nvar userCurrency = {\n    "userCurrency": "USD"\n};\nvar category = "subscriptions";\n\n_bc.appStore.getSalesInventoryByCategory(storeId, userCurrency, category, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,a.kt)(m,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cfscript"},'var storeId = "itunes";\nvar userCurrency = {\n    "userCurrency": "USD"\n};\nvar category = "subscriptions";\nvar appStoreProxy = bridge.getAppStoreServiceProxy();\n\nvar postResult = appStoreProxy.getSalesInventoryByCategory(storeId, userCurrency, category);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,a.kt)(m,{value:"r",label:"Raw",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "appStore",\n    "operation": "GET_INVENTORY",\n    "data": {\n        "storeId": "itunes",\n        "category": "subscriptions",\n        "priceInfoCriteria": {\n            "userCurrency": "USD"\n        }\n    }\n}\n'))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"JSON Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": 200,\n    "data": {\n        "productInventory": [\n            {\n                "currency": {\n                    "bar": 50\n                },\n                "description": "Bundle of 50 Bars.",\n                "fbUrl": "https://dev.braincloudservers.com/fbproductservice?gameId=eggies&itemId=barBundle2Imp",\n                "gameId": "eggies",\n                "imageUrl": "http://eggies6waves.braincloudservers.com/s3/eggies-prod/store/bars.png",\n                "itemId": "barBundle2Imp",\n                "priceData": {\n                    "ids": [\n                        {\n                            "appId": "ipad",\n                            "itunesId": "com.playbrains.eggiesdevhd2.barBundle2Imp"\n                        },\n                        {\n                            "appId": "iphone",\n                            "itunesId": "com.playbrains.eggiesdev2.barBundle2Imp"\n                        }\n                    ]\n                },\n                "title": "Bars"\n            }\n        ],\n        "serverTime": 1395952561266\n    }\n}\n'))),(0,a.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"platform"),(0,a.kt)("td",{parentName:"tr",align:null},"The store platform.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"category"),(0,a.kt)("td",{parentName:"tr",align:null},"The product category.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"userCurrency"),(0,a.kt)("td",{parentName:"tr",align:null},"The currency to retrieve the sales inventory for. This is only used for Steam and Facebook stores.")))))}v.isMDXComponent=!0}}]);