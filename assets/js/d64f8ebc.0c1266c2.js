"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[33814],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||i;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},25355:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={title:"Getting Started With C++",date:"2015-11-05"},l=void 0,o={unversionedId:"learn/sdk-tutorials/unreal-tutorials/getting-started-with-cpp/index",id:"learn/sdk-tutorials/unreal-tutorials/getting-started-with-cpp/index",title:"Getting Started With C++",description:"Just as with Blueprints the entire BrainCloud API is available through C++ in Unreal. \xa0In this tutorial we will go over how to Initialize brainCloud, how to Authenticate, and how to use the callback system.",source:"@site/docs/learn/6_sdk-tutorials/unreal-tutorials/getting-started-with-cpp/index.md",sourceDirName:"learn/6_sdk-tutorials/unreal-tutorials/getting-started-with-cpp",slug:"/learn/sdk-tutorials/unreal-tutorials/getting-started-with-cpp/",permalink:"/braincloud-apiref/learn/sdk-tutorials/unreal-tutorials/getting-started-with-cpp/",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/learn/6_sdk-tutorials/unreal-tutorials/getting-started-with-cpp/index.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672679892,formattedLastUpdatedAt:"Jan 2, 2023",frontMatter:{title:"Getting Started With C++",date:"2015-11-05"},sidebar:"learnSidebar",previous:{title:"Getting Started With Blueprints",permalink:"/braincloud-apiref/learn/sdk-tutorials/unreal-tutorials/getting-started-with-blueprints/"},next:{title:"Getting Started With the Online Subsystem",permalink:"/braincloud-apiref/learn/sdk-tutorials/unreal-tutorials/getting-started-with-the-online-subsystem/"}},s={},c=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Creating a Test Actor",id:"creating-a-test-actor",level:3},{value:"Including the BCClientPlugin Module",id:"including-the-bcclientplugin-module",level:3},{value:"Initialization",id:"initialization",level:3},{value:"Updating the BrainCloud Client",id:"updating-the-braincloud-client",level:3},{value:"Setting Up Callbacks",id:"setting-up-callbacks",level:3},{value:"Authentication",id:"authentication",level:3},{value:"Parsing JSON",id:"parsing-json",level:3},{value:"Full Source Code",id:"full-source-code",level:3}],u={toc:c};function d(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Just as with Blueprints the entire BrainCloud API is available through C++ in Unreal. \xa0In this tutorial we will go over how to Initialize brainCloud, how to Authenticate, and how to use the callback system."),(0,a.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Created a brainCloud Portal account"),(0,a.kt)("li",{parentName:"ul"},"Created a game in the brainCloud Portal. If you need help with this step refer to the ",(0,a.kt)("a",{parentName:"li",href:"/learn/sdk-tutorials/unity-tutorials/unity-getting-started/"},"Unity Tutorial #1 video"),"."),(0,a.kt)("li",{parentName:"ul"},"An Unreal project with the brainCloud plugin installed as described ",(0,a.kt)("a",{parentName:"li",href:"/learn/sdk-tutorials/unreal-tutorials/setting-up-the-braincloud-plugin/"},"here")),(0,a.kt)("li",{parentName:"ul"},"Basic experience with Unreal C++, see the ",(0,a.kt)("a",{parentName:"li",href:"https://docs.unrealengine.com/latest/INT/Programming/Introduction/index.html"},"Unreal documentation")," for help")),(0,a.kt)("h3",{id:"creating-a-test-actor"},"Creating a Test Actor"),(0,a.kt)("p",null,"For this tutorial we will need\xa0to create an actor where we will write our code to interact with brainCloud. To create a new actor open the editor and go to File>New C++ Class. \xa0Select Actor as the parent class, click\xa0Next, and name it whatever you like."),(0,a.kt)("p",null,(0,a.kt)("a",{target:"_blank",href:n(66155).Z},(0,a.kt)("img",{alt:"unreal_cpp_actor",src:n(13092).Z,width:"965",height:"589"}))),(0,a.kt)("p",null,"One your actor is created switch over to your programming IDE and continue the tutorial from there."),(0,a.kt)("h3",{id:"including-the-bcclientplugin-module"},"Including the BCClientPlugin Module"),(0,a.kt)("p",null,"The BCClientPluginModule must be added to your Project's Build.cs file for the Unreal Build Tool to successfully compile your project with brainCloud. \xa0Find the\xa0Build.cs file under Source > MyProject > MyProject.Build.cs"),(0,a.kt)("p",null,"Inside the Build.cs find the line ",(0,a.kt)("strong",{parentName:"p"},"PublicDependencyModuleNames"),"\xa0and add the string ",(0,a.kt)("strong",{parentName:"p"},'"BCClientPlugin"'),"\xa0to it. It should now look something like this:"),(0,a.kt)("p",null,'PublicDependencyModuleNames.AddRange(new string[] { "Core", "CoreUObject", "Engine", "InputCore", "BCClientPlugin" });'),(0,a.kt)("h3",{id:"initialization"},"Initialization"),(0,a.kt)("p",null,"Before you can do anything with brainCloud the BrainCloudClient must be initialized. \xa0This is accomplished by providing your App's details to the Client via the Initialize function."),(0,a.kt)("p",null,"Open your newly created Actor's code (cpp) file and include\xa0the\xa0\"BrainCloudClient.h\" header file. \xa0This will give you access to all of brainCloud's services and functions."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'#include "BrainCloudClient.h"\n')),(0,a.kt)("p",null,"Now in your actor's\xa0",(0,a.kt)("strong",{parentName:"p"},"BeginPlay()")," function we can perform the initialization using the ",(0,a.kt)("a",{parentName:"p",href:"/api/capi/client/initialize"},"BrainCloudClient->Initialize")," function. \xa0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// Called when the game starts or when spawned\nvoid ABrainCloudTestActor::BeginPlay()\n{\n    Super::BeginPlay();\n    _bc.initialize(\n        "https://sharedprod.braincloudservers.com/dispatcherv2", \n        "91c3a097-4697-4787-ba1c-fakeSecret", \n        "123456", \n        "1.0.0");\n}\n')),(0,a.kt)("h3",{id:"updating-the-braincloud-client"},"Updating the BrainCloud Client"),(0,a.kt)("p",null,"The BrainCloudClient relies on its Run Callbacks function being called every frame from the main thread, without this your callback functions will never be called! \xa0There are many places\xa0you could call this function, but to keep things simple in\xa0this tutorial we will place it in our actor's\xa0",(0,a.kt)("strong",{parentName:"p"},"Tick()")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Called every frame\nvoid ABrainCloudTestActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n    _bc.runCallbacks();\n}\n")),(0,a.kt)("h3",{id:"setting-up-callbacks"},"Setting Up Callbacks"),(0,a.kt)("p",null,"Before we make any API calls we want our actor to be able to receive callbacks from brainCloud when our API calls succeed or fail. \xa0To do this we need our actor to inherit from the\xa0",(0,a.kt)("strong",{parentName:"p"},"IServerCallback")," class. This interface defines the ",(0,a.kt)("strong",{parentName:"p"},"serverCallback")," and ",(0,a.kt)("strong",{parentName:"p"},"serverError")," functions, and allows us to pass a reference to our actor as a\xa0",(0,a.kt)("strong",{parentName:"p"},"callback object")," to brainCloud."),(0,a.kt)("p",null,"Go to your actor's header file and include the\xa0",(0,a.kt)("strong",{parentName:"p"},"IServerCallback.h")," header file. Next, inherit from IServerCallback and declare the virtual methods required by the interface. \xa0Your header should look similar to this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'#pragma once\n\n#include "GameFramework/Actor.h"\n#include "IServerCallback.h"\n#include "BrainCloudTestActor.generated.h"\n\nUCLASS()\nclass MYPROJECT_API ABrainCloudTestActor : public AActor, public IServerCallback\n{\n    GENERATED_BODY()\n    \npublic: \n    // Sets default values for this actor\'s properties\n    ABrainCloudTestActor();\n\n    // Called when the game starts or when spawned\n    virtual void BeginPlay() override;\n    \n    // Called every frame\n    virtual void Tick( float DeltaSeconds ) override;\n\n    // IServerCallback interface\n    void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, const FString& jsonData);\n    void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int32 statusCode, int32 reasonCode, const FString& jsonError);\n    // End of IServerCallback interface\n};\n')),(0,a.kt)("p",null,"The next step is to go back to your cpp file and define the serverCallback and\xa0serverError methods like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"void ABrainCloudTestActor::serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, const FString& jsonData)\n{\n\n}\n\nvoid ABrainCloudTestActor::serverError(ServiceName serviceName, ServiceOperation serviceOperation, int32 statusCode, int32 reasonCode, const FString& jsonError)\n{\n\n}\n")),(0,a.kt)("p",null,"And add the required header files for\xa0",(0,a.kt)("strong",{parentName:"p"},"ServiceName")," and ",(0,a.kt)("strong",{parentName:"p"},"ServiceOperation")," which we will use later."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'#include "ServiceName.h"\n#include "ServiceOperation.h"\n')),(0,a.kt)("h3",{id:"authentication"},"Authentication"),(0,a.kt)("p",null,"BrainCloud provides many different methods of authentication, but for this tutorial we will use ",(0,a.kt)("a",{parentName:"p",href:"/api/capi/authentication/authenticateuniversal"},"AuthenticateUniversal"),". \xa0Now that our actor can receive callbacks we can proceed to call the AuthenticateUniversal method after we initialize in ",(0,a.kt)("strong",{parentName:"p"},"BeginPlay()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'_bc.getAuthenticationService()->authenticateUniversal("UnrealUser", "password1234", true, this);\n')),(0,a.kt)("p",null,"Referring to the ",(0,a.kt)("a",{parentName:"p",href:"/api/capi/authentication/authenticateuniversal"},"documentation"),", the last parameter of the AuthenticateUniversal function is a pointer to an IServerCallback. \xa0Since our actor has inherited from IServerCallback we can pass in the\xa0",(0,a.kt)("strong",{parentName:"p"},"this")," pointer\xa0and have our actor's\xa0serverCallback and serverError functions get called when the server responds to our request."),(0,a.kt)("p",null,"Let's add a log message to our\xa0serverCallback method so we know things are working."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'void ABrainCloudTestActor::serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, const FString& jsonData)\n{\n    UE_LOG(LogTemp, Display, TEXT("Authenticated!"));\n}\n')),(0,a.kt)("p",null,'At this point, you should be able to run the Editor, drag your Actor into the Level, press Play, and see "LogTemp:Display: Authenticated!" in the Output Log window.'),(0,a.kt)("h3",{id:"parsing-json"},"Parsing JSON"),(0,a.kt)("p",null,"All brainCloud callbacks include a JSON data string as a parameter where the return data for the call is represented. \xa0Being able to parse this string is essential to using brainCloud, so this section of the tutorial goes over how to use the built-in Unreal JSON classes with the brainCloud JSON data."),(0,a.kt)("p",null,"The first thing we need to do is add the Unreal Json module to our project's Build.cs file so we can use the JSON functionality. \xa0The Build.cs file should be under Source > MyProject > MyProject.Build.cs"),(0,a.kt)("p",null,"Inside the Build.cs find the line\xa0",(0,a.kt)("strong",{parentName:"p"},"PrivateDependencyModuleNames")," and add the string\xa0",(0,a.kt)("strong",{parentName:"p"},'"Json"')," to it. It should look something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'PrivateDependencyModuleNames.AddRange(new string[] { "Json" });\n')),(0,a.kt)("p",null,"Back in our Actor's cpp file, lets modify the serverCallback to send another call after AuthenticateUniversal returns, and then to handle the return of this additional call as well."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'void ABrainCloudTestActor::serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, const FString& jsonData)\n{\n    if (serviceName == ServiceName::AuthenticateV2) //authenticate return handling\n    {\n        UE_LOG(LogTemp, Display, TEXT("Authenticated!"));\n\n        //send our next request\n        _bc.getTimeService()->readServerTime(this);\n    }\n    else if (serviceName == ServiceName::Time) //time return handling\n    {\n        UE_LOG(LogTemp, Display, TEXT("Reading the time..."));\n    }\n}\n')),(0,a.kt)("p",null,"Because we're passing in a pointer to our Actor for our next call as well we need to check which call is invoking our\xa0serverCallback function. \xa0We can do this by comparing the\xa0",(0,a.kt)("strong",{parentName:"p"},"ServiceName")," and acting accordingly."),(0,a.kt)("p",null,"We've also added our next API call ",(0,a.kt)("a",{parentName:"p",href:"/api/capi/time/readservertime"},"ReadServerTime"),'\xa0which as the documentation says "returns the server time in UTC. This is in UNIX millis time format." Now lets process the return JSON string to get the time and print it to the log.'),(0,a.kt)("p",null,"First thing we need to do is create a new\xa0",(0,a.kt)("strong",{parentName:"p"},"TJsonReader"),"\xa0to read our JSON string, and a\xa0",(0,a.kt)("strong",{parentName:"p"},"FJsonObject")," to hold our deserialized data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"TSharedRef<TJsonReader<>> reader = TJsonReaderFactory<>::Create(*jsonData);\nTSharedPtr<FJsonObject> jsonReadObject;\n")),(0,a.kt)("p",null,"Now we actually deserialize the string using the\xa0",(0,a.kt)("strong",{parentName:"p"},"FJsonSerializer::Deserialize")," method and passing in our JsonReader and JsonObject."),(0,a.kt)("p",null,"bool result = FJsonSerializer::Deserialize(reader, jsonReadObject);"),(0,a.kt)("p",null,"We check the result bool returned by the Deserialize to make sure it was successful before digging into our jsonReadObject for the data we need."),(0,a.kt)("p",null,"Referring to the JSON return structure in the ",(0,a.kt)("a",{parentName:"p",href:"/api/capi/time/readservertime"},"documentation")," we can see that the server time is represented by the key \u201c",(0,a.kt)("strong",{parentName:"p"},"server_time"),"\u201d which is contained in the object \u201c",(0,a.kt)("strong",{parentName:"p"},"data"),"\u201d. So to get to it we take the jsonReadObject\xa0and use the functions GetObjectField and then GetNumberField, passing in \u201cdata\u201d and \u201cserver_time\u201d as our Field Names."),(0,a.kt)("p",null,"Finally we print the extracted time to the log."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'if (result == true) //if deserializing was successful\n{\n    TSharedPtr<FJsonObject> data = jsonReadObject->GetObjectField(TEXT("data"));\n    int64 serverTime = data->GetNumberField(TEXT("server_time"));\n    UE_LOG(LogTemp, Display, TEXT("The time is %d"), serverTime);\n}\n')),(0,a.kt)("h3",{id:"full-source-code"},"Full Source Code"),(0,a.kt)("p",null,"Header:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'#pragma once\n\n#include "GameFramework/Actor.h"\n#include "IServerCallback.h"\n#include "BrainCloudTestActor.generated.h"\n\nUCLASS()\nclass BCSUBSYSTEM_API ABrainCloudTestActor : public AActor, public IServerCallback\n{\n    GENERATED_BODY()\n    \npublic: \n    // Sets default values for this actor\'s properties\n    ABrainCloudTestActor();\n\n    // Called when the game starts or when spawned\n    virtual void BeginPlay() override;\n    \n    // Called every frame\n    virtual void Tick( float DeltaSeconds ) override;\n\n    // IServerCallback interface\n    void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, const FString& jsonData);\n    void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int32 statusCode, int32 reasonCode, const FString& jsonError);\n    // End of IServerCallback interface\n};\n')),(0,a.kt)("p",null,"Source:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'#include "MyProject.h"\n#include "BrainCloudTestActor.h"\n\n#include "BrainCloudClient.h"\n#include "ServiceName.h"\n#include "ServiceOperation.h"\nBrainCloudClient _bc;\n\n// Sets default values\nABrainCloudTestActor::ABrainCloudTestActor()\n{\n    // Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don\'t need it.\n    PrimaryActorTick.bCanEverTick = true;\n}\n\n// Called when the game starts or when spawned\nvoid ABrainCloudTestActor::BeginPlay()\n{\n    Super::BeginPlay();\n    _bc.initialize(\n        "https://sharedprod.braincloudservers.com/dispatcherv2", \n        "91c3a097-4697-4787-ba1c-fakeSecret", \n        "123456", \n        "1.0.0");\n\n    _bc.getAuthenticationService()->authenticateUniversal("UnrealUser", "UnrealUser", true, this);\n}\n\n// Called every frame\nvoid ABrainCloudTestActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n    _bc.runCallbacks();\n}\n\nvoid ABrainCloudTestActor::serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, const FString& jsonData)\n{\n    if (serviceName == ServiceName::AuthenticateV2) //authenticate return handling\n    {\n        UE_LOG(LogTemp, Display, TEXT("Authenticated!"));\n\n        //send our next request\n        _bc.getTimeService()->readServerTime(this);\n    }\n    else if (serviceName == ServiceName::Time) //time return handling\n    {\n        UE_LOG(LogTemp, Display, TEXT("Reading the time..."));\n\n        TSharedRef<TJsonReader<>> reader = TJsonReaderFactory<>::Create(*jsonData);\n        TSharedPtr<FJsonObject> jsonReadObject;\n        bool result = FJsonSerializer::Deserialize(reader, jsonReadObject);\n\n        if (result == true) //if deserializing was successful\n        {\n            TSharedPtr<FJsonObject> data = jsonReadObject->GetObjectField(TEXT("data"));\n            int64 serverTime = data->GetNumberField(TEXT("server_time"));\n            UE_LOG(LogTemp, Display, TEXT("The time is %d"), serverTime);\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT("Failed to deserialize JSON!"));\n        }\n    }\n}\n\nvoid ABrainCloudTestActor::serverError(ServiceName serviceName, ServiceOperation serviceOperation, int32 statusCode, int32 reasonCode, const FString& jsonError)\n{\n    UE_LOG(LogTemp, Error, TEXT("Call failed - %s - %s"), *serviceName.getValue(), *serviceOperation.getValue());\n}\n')))}d.isMDXComponent=!0},66155:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/files/unreal_cpp_actor-86d32c5cf7336a83e4cd277a5bfb12c5.png"},13092:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/unreal_cpp_actor-86d32c5cf7336a83e4cd277a5bfb12c5.png"}}]);