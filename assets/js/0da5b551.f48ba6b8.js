"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[54154],{3905:(e,a,r)=>{r.d(a,{Zo:()=>p,kt:()=>b});var t=r(67294);function n(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function o(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function d(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?o(Object(r),!0).forEach((function(a){n(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function i(e,a){if(null==e)return{};var r,t,n=function(e,a){if(null==e)return{};var r,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],a.indexOf(r)>=0||(n[r]=e[r]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=t.createContext({}),c=function(e){var a=t.useContext(l),r=a;return e&&(r="function"==typeof e?e(a):d(d({},a),e)),r},p=function(e){var a=c(e.components);return t.createElement(l.Provider,{value:a},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),s=c(r),m=n,b=s["".concat(l,".").concat(m)]||s[m]||u[m]||o;return r?t.createElement(b,d(d({ref:a},p),{},{components:r})):t.createElement(b,d({ref:a},p))}));function b(e,a){var r=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=r.length,d=new Array(o);d[0]=m;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i[s]="string"==typeof e?e:n,d[1]=i;for(var c=2;c<o;c++)d[c]=r[c];return t.createElement.apply(null,d)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},43981:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>l,contentTitle:()=>d,default:()=>y,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=r(87462),n=(r(67294),r(3905));const o={},d="PostScoreToDynamicGroupLeaderboardUTC",i={unversionedId:"api/capi/leaderboard/postscoretodynamicgroupleaderboardutc",id:"api/capi/leaderboard/postscoretodynamicgroupleaderboardutc",title:"PostScoreToDynamicGroupLeaderboardUTC",description:"Overview",source:"@site/docs/api/2_capi/leaderboard/postscoretodynamicgroupleaderboardutc.md",sourceDirName:"api/2_capi/leaderboard",slug:"/api/capi/leaderboard/postscoretodynamicgroupleaderboardutc",permalink:"/braincloud-apiref/api/capi/leaderboard/postscoretodynamicgroupleaderboardutc",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/leaderboard/postscoretodynamicgroupleaderboardutc.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672193365,formattedLastUpdatedAt:"Dec 28, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"PostScoreToDynamicGroupLeaderboardDaysUTC",permalink:"/braincloud-apiref/api/capi/leaderboard/postscoretodynamicgroupleaderboarddaysutc"},next:{title:"PostScoreToDynamicLeaderboardDaysUTC",permalink:"/braincloud-apiref/api/capi/leaderboard/postscoretodynamicleaderboarddaysutc"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],p=e=>function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",a)},s=p("PartialServop"),u=p("BrowserWindow"),m=p("Tabs"),b=p("TabItem"),g={toc:c};function y(e){let{components:a,...r}=e;return(0,n.kt)("wrapper",(0,t.Z)({},g,r,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"postscoretodynamicgroupleaderboardutc"},"PostScoreToDynamicGroupLeaderboardUTC"),(0,n.kt)("h2",{id:"overview"},"Overview"),(0,n.kt)("p",null,"Post the group score to the given group leaderboard and dynamically create if necessary. LeaderboardType, rotationType, rotationReset, and retainedCount are required."),(0,n.kt)(s,{service_name:"leaderboard",operation_name:"POST_GROUP_SCORE",mdxType:"PartialServop"}),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)(u,{mdxType:"BrowserWindow"},(0,n.kt)(m,{mdxType:"Tabs"},(0,n.kt)(b,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'string leaderboardId = "default";\nstring groupId = "actual_group_id";\nint score = 10;\nstring data = "{\\"nickname\\":\\"batman\\"}";\nSocialLeaderboardType leaderboardType = "HIGH_VALUE";\nRotationType rotationType = "WEEKLY";\nInt64 rotationResetTime = 15346346346;\nint retainedCount = 2;\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.LeaderboardService.PostScoreToDynamicGroupLeaderboardUTC(leaderboardId, groupId, score, data, leaderboardType, rotationType, rotationResetTime, retainedCount, successCallback, failureCallback);\n'))),(0,n.kt)(b,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *leaderboardId = "default";\nconst char *groupId = "actual_group_id";\nint score = 10;\nconst char *data = "{\\"nickname\\":\\"batman\\"}";\nconst char *leaderboardType = "HIGH_VALUE";\nconst char *rotationType = "WEEKLY";\nint64_t rotationResetTime = 15243457543;\nint32_t retainedCount = 2;\n\n_bc->getLeaderboardService()->postScoreToDynamicGroupLeaderboardUTC(leaderboardId, groupId, score, data, leaderboardType, rotationType, rotationResetTime, retainedCount, this);\n'))),(0,n.kt)(b,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *leaderboardId = @"default";\nNSString *groupId = @"actual_group_id";\nint score = 10;\nNSString *data = @"{\\"nickname\\":\\"batman\\"}";\nNSString *rotationType = @"WEEKLY";\nNSDate *rotationReset = [NSDate date];\nint retainedCount = 2;\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc leaderboardService] postScoreToDynamicGroupLeaderboardUTC:leaderboardId\n                    groupId:groupId\n                      score:score\n                       data:data\n            leaderboardType:leaderboardType\n               rotationType:rotationType\n          rotationResetTime:rotationResetTime\n              retainedCount:retainedCount\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,n.kt)(b,{value:"java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String leaderboardId = "default";\nString groupId = "actual_group_id";\nint score = 10;\nString data = "{\\"nickname\\":\\"batman\\"}";\nString leaderboardType = "HIGH_VALUE";\nString rotationType = "WEEKLY";\nlong rotationResetTime = 15623462346;\nint retainedCount = 2;\nthis; // implements IServerCallback\n\n_bc.getLeaderboardService().postScoreToDynamicGroupLeaderboardUTC(leaderboardId, groupId, score, data, leaderboardType, rotationType, rotationResetTime, retainedCount, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,n.kt)(b,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'var leaderboardId = "default";\nvar groupId = "actual_group_id";\nvar score = 10;\nvar data = {\n    "nickname": "batman"\n};\nvar leaderboardType = "HIGH_VALUE";\nvar rotationType = "WEEKLY";\nvar rotationResetTime = 158778236487;\nvar retainedCount = 2;\n\n_bc.leaderboard.postScoreToGroupLeaderboardUTC(leaderboardId, groupId, score, data, leaderboardType, rotationType, rotationResetTime, retainedCount, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,n.kt)(b,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cfscript"},'var leaderboardId = "default";\nvar groupId = "actual_group_id";\nvar score = 10;\nvar data = {\n    "nickname": "batman"\n};\nvar leaderboardType = "HIGH_VALUE";\nvar rotationType = "WEEKLY";\nvar rotationResetTime = 1572450892830;\nvar retainedCount = 2;\nvar leaderboardProxy = bridge.getLeaderboardServiceProxy();\n\nvar postResult = leaderboardProxy.postScoreToDynamicGroupLeaderboardUTC(leaderboardId, groupId, score, data, leaderboardType, rotationType, rotationResetTime, retainedCount);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,n.kt)(b,{value:"r",label:"Raw",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "leaderboard",\n    "operation": "POST_GROUP_SCORE_DYNAMIC",\n    "data": {\n        "leaderboardId": "groupLeaderboardConfig",\n        "groupId": "d25e3e1c-089f-4816-8534-f958ba3c9dac",\n        "score": 10,\n        "data": {\n          "nickname": "batman"\n        },\n        "leaderboardType": "HIGH_VALUE",\n        "rotationType": "WEEKLY",\n        "rotationResetTime": 1572454461001,\n        "retainedCount": 2\n      }\n}\n'))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"JSON Response"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": 200,\n    "data": null\n}\n'))),(0,n.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"leaderboardId"),(0,n.kt)("td",{parentName:"tr",align:null},"The id of the leaderboard.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"groupId"),(0,n.kt)("td",{parentName:"tr",align:null},"The id of the group.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"score"),(0,n.kt)("td",{parentName:"tr",align:null},"The score to post.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"data"),(0,n.kt)("td",{parentName:"tr",align:null},"Optional user-defined data to post with the score.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"leaderboardType"),(0,n.kt)("td",{parentName:"tr",align:null},"the type of leaderboard")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"rotationType"),(0,n.kt)("td",{parentName:"tr",align:null},"daily, weekly, monthly")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"rotationResetTime"),(0,n.kt)("td",{parentName:"tr",align:null},"the date to reset the rotation in milliseconds UTC")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"retainedCount"),(0,n.kt)("td",{parentName:"tr",align:null},"times to retain the leaderboard")))))}y.isMDXComponent=!0}}]);