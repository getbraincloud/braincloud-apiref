"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[81161],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(a),d=n,f=u["".concat(s,".").concat(d)]||u[d]||h[d]||i;return a?r.createElement(f,l(l({ref:t},p),{},{components:a})):r.createElement(f,l({ref:t},p))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:n,l[1]=o;for(var c=2;c<i;c++)l[c]=a[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},95159:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=a(87462),n=(a(67294),a(3905));const i={title:"Shared Accounts",date:"2015-09-18"},l=void 0,o={unversionedId:"learn/key-concepts/authentication/shared-accounts/index",id:"learn/key-concepts/authentication/shared-accounts/index",title:"Shared Accounts",description:"Overview",source:"@site/docs/learn/1_key-concepts/authentication/shared-accounts/index.md",sourceDirName:"learn/1_key-concepts/authentication/shared-accounts",slug:"/learn/key-concepts/authentication/shared-accounts/",permalink:"/braincloud-apiref/learn/key-concepts/authentication/shared-accounts/",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/learn/1_key-concepts/authentication/shared-accounts/index.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672679892,formattedLastUpdatedAt:"Jan 2, 2023",frontMatter:{title:"Shared Accounts",date:"2015-09-18"},sidebar:"learnSidebar",previous:{title:"External Authentication",permalink:"/braincloud-apiref/learn/key-concepts/authentication/external-authentication/"},next:{title:"Cloud Code",permalink:"/braincloud-apiref/learn/key-concepts/cloud-code/"}},s={},c=[{value:"Overview",id:"overview",level:3},{value:"<strong>Parent and Child Accounts</strong>",id:"parent-and-child-accounts",level:3},{value:"<strong>Family Member Profiles</strong>",id:"family-member-profiles",level:3},{value:"<strong>Parent Roles</strong>",id:"parent-roles",level:3},{value:"<strong>Authenticating Users</strong>",id:"authenticating-users",level:3},{value:"<strong>API calls and switching levels</strong>",id:"api-calls-and-switching-levels",level:3},{value:"<strong>Calling Parent Scripts</strong>",id:"calling-parent-scripts",level:3},{value:"<strong>Special case: Working with currencies</strong>",id:"special-case-working-with-currencies",level:3}],p={toc:c};function u(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h3",{id:"overview"},"Overview"),(0,n.kt)("p",null,"The ",(0,n.kt)("em",{parentName:"p"},"Shared Accounts")," feature is a powerful example of the flexibility of brainCloud\u2019s authentication architecture. \xa0 brainCloud already provides a myriad of authentication options: anonymous, e-mail address, Facebook id, Google Id, GameCenter, Twitter, etc. \xa0brainCloud can even authenticate users with external directories via our External Authentication feature. \xa0 ",(0,n.kt)("em",{parentName:"p"},"Shared Accounts")," takes this one step further, allowing you to create a single, shared account system for your users\xa0to access\xa0all (or select) company apps. You will then have a single repository of your users, regardless of the specific app they are using. This is useful to offer common, shared features\xa0across all apps - like shared premium currencies, meta-level leaderboards and achievements, etc. - really anything you want. \xa0"),(0,n.kt)("h3",{id:"parent-and-child-accounts"},(0,n.kt)("strong",{parentName:"h3"},"Parent and Child Accounts")),(0,n.kt)("p",null,"brainCloud ",(0,n.kt)("em",{parentName:"p"},"Shared Accounts")," architecture organizes apps (and their associated profiles) into a hierarchy of parents and children. \xa0Every app can have at most one parent. And parents can have parents as well, so you aren\u2019t limited to a two-level hierarchy. \xa0","[Technically we limit you to 5 levels - which should be more than enough - it is enforced primarily to ensure that we don\u2019t get recursion errors at runtime.]"," \xa0"),(0,n.kt)("p",null,(0,n.kt)("a",{target:"_blank",href:a(86350).Z},(0,n.kt)("img",{alt:"Shared Account Overview",src:a(61116).Z,width:"1024",height:"353"}))),(0,n.kt)("h3",{id:"family-member-profiles"},(0,n.kt)("strong",{parentName:"h3"},"Family Member Profiles")),(0,n.kt)("p",null,"The shared accounts architecture can also be used to associate multiple personal accounts with a single master account. Consider a Netflix-like game service example, where a single account provides access to a service, but we want to provide for personalized family member profiles within the context of the master account, and then of course separate save data for each app/game that the family member accesses. \xa0 Such a topology might look like this:"),(0,n.kt)("p",null,(0,n.kt)("a",{target:"_blank",href:a(16215).Z},(0,n.kt)("img",{alt:"Family Member",src:a(56031).Z,width:"1024",height:"563"}))),(0,n.kt)("h3",{id:"parent-roles"},(0,n.kt)("strong",{parentName:"h3"},"Parent Roles")),(0,n.kt)("p",null,"To allow for flexible referencing of parent apps from our APIs and data structures, parents must declare a logical \u201cparent level name\u201d. \xa0This level name will be used in API calls and in the underlying meta-data to refer to the parent app. To support separation of apps during development and production, multiple apps may share the same \u201clevel name\u201d - but they may not be configured together in the same app hierarchy."),(0,n.kt)("p",null,(0,n.kt)("a",{target:"_blank",href:a(57537).Z},(0,n.kt)("img",{alt:"Valid topologies",src:a(46760).Z,width:"1024",height:"384"}))),(0,n.kt)("h3",{id:"authenticating-users"},(0,n.kt)("strong",{parentName:"h3"},"Authenticating Users")),(0,n.kt)("p",null,"To authenticate a user in a Shared Accounts scenario, the app must:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Step 1 - First authenticate the user at the top-level of the hierarchy using one of our standard ",(0,n.kt)("a",{parentName:"li",href:"/api/capi/authentication"},"Authentication")," calls. \xa0For example, AuthenticateEmailPassword(), etc."),(0,n.kt)("li",{parentName:"ul"},"Step 2 - Switch to a child profile using either the ",(0,n.kt)("a",{parentName:"li",href:"/api/capi/identity/switchtochildprofile"},"SwitchToChildProfile()"),"\xa0or ",(0,n.kt)("a",{parentName:"li",href:"/api/capi/identity/switchtosingletonchildprofile"},"SwitchToSingletonChildProfile()"),"\xa0methods of the identity service. \xa0The currently authenticated top-level profile will be used as the identity for the sub-profile. As is standard for brainCloud authentication, if the profile doesn\u2019t exist it will be created (if the bForceCreate flag is true)"),(0,n.kt)("li",{parentName:"ul"},"Step 3 - Repeat step 2 for as many levels down the hierarchy that you need to use to get to the desired app profile.")),(0,n.kt)("p",null,'\xa0 Note, in some scenarios, there may be multiple child-level profiles for a parent profile. \xa0(See the "Family Member Profiles\u201d scenario above). \xa0For those situations, you can call a ',(0,n.kt)("a",{parentName:"p",href:"/api/capi/identity/getchildprofiles"},"GetChildProfiles()")," method to receive a list of candidate profiles to switch to. \xa0 \xa0"),(0,n.kt)("h3",{id:"api-calls-and-switching-levels"},(0,n.kt)("strong",{parentName:"h3"},"API calls and switching levels")),(0,n.kt)("p",null,"Once you\u2019ve authenticated users at the final app level, you\u2019re ready to go. \xa0All calls at this level behave the same way as they do for any other brainCloud app. \xa0",(0,n.kt)("em",{parentName:"p"},"Note that for analytics and billing purposes, brainCloud records API counts across each app id separately.")," \xa0 Should you want to switch context back to that of a parent profile, you can do so using the ",(0,n.kt)("a",{parentName:"p",href:"/api/capi/identity/switchtoparentprofile"},"SwitchToParentProfile()"),"\xa0API call. \xa0From then on, all API calls will be processed at the parent level specified. \xa0 For example: \xa0Once you\u2019ve fully authenticated, if you call GetPlayerState(), this operation will act upon the currently active child profile. \xa0If you\u2019d like to get that same information about the parent profile, you could call SwitchToParentProfile() first, then GetPlayerState(), and then return back to the child level via SwitchToChildProfile(). \xa0 ",(0,n.kt)("em",{parentName:"p"},"Although this is workable, it\u2019s far from elegant for making quick calls at a parent profile level - which is why we allow you to call parent cloud code scripts (see next section).")),(0,n.kt)("h3",{id:"calling-parent-scripts"},(0,n.kt)("strong",{parentName:"h3"},"Calling Parent Scripts")),(0,n.kt)("p",null,"Often the child app will need to access or manipulate data that\u2019s stored at the parent profile level. This can be easily accomplished via Cloud Code. \xa0 brainCloud now supports a new ",(0,n.kt)("a",{parentName:"p",href:"/api/capi/script/runparentscript"},"RunParentScript()"),"\xa0API call that allows child apps to run scripts that are both defined at the parent app level, and operate on the profile data at that level. \xa0 So, for example, if you wanted to log the number of game rounds played across all child apps, you could write a Cloud Code script called IncrementGamePlayed() at the parent level, and call it when appropriate from any of its child apps. \xa0 The syntax is RunParentScript( <script_name",">",", <parameters",">",", <parent_level",">"," ), where"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"<script_name",">"," is the name to run"),(0,n.kt)("li",{parentName:"ul"},"<parameters",">"," is the json data that you'd like to pass to the script"),(0,n.kt)("li",{parentName:"ul"},"<app_level",">"," is the the parent level that the script is defined (and will be run) at")),(0,n.kt)("p",null,"\xa0 Note that brainCloud will automatically adjust the server context to make the appropriate parent profile (as identified by the <app_level> current before running the script), and return it to prior app level when the script is complete. \xa0 \xa0"),(0,n.kt)("h3",{id:"special-case-working-with-currencies"},(0,n.kt)("strong",{parentName:"h3"},"Special case: Working with currencies")),(0,n.kt)("p",null,"The brainCloud API\u2019s are generally designed to access data associated with the currently select app id and profile. If you want to access data for another level, you must either switch the current profile level, or call RunParentScript(). \xa0 Currencies are an exception to this. It is very common for child apps to want to access and manage the currency balances shared in the parent profiles. \xa0Furthermore, for in-app-purchases are normally defined at the child app level, but may allocate shared currencies defined in parent apps. \xa0 To facilitate these use cases, we have expanded the brainCloud APIs to allow largely transparent access to parent currencies."),(0,n.kt)("p",null,"\xa0 The following new API calls have been added:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/api/capi/product/awardparentcurrency"},"AwardParentCurrency()")," - allows you to increment the currency balance of the specified parent-level currency"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/api/capi/product/consumeparentcurrency"},"ConsumeParentCurrency()")," - allows you to decrement the balance of the specified parent-level currency"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/api/capi/product/getparentcurrency"},"GetParentCurrency()")," - retrieves the current balance of the specified parent-level currency (note: also returned in Authentication and Player State )"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/api/capi/product/resetparentcurrency"},"ResetParentCurrency()")," - resets all currency balances at the specified parent-level (mostly useful for testing / debugging)")))}u.isMDXComponent=!0},16215:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/files/Family-Member-1024x563-adc043eacc3b9e23de93b12586360889.png"},86350:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/files/Shared-Account-Overview-1024x353-1e2cb6cb8f3cabb571d37df9bcd6125b.png"},57537:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/files/Valid-topologies-1024x384-8ca4435b581ba249b891a69184ae240f.png"},56031:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Family-Member-1024x563-adc043eacc3b9e23de93b12586360889.png"},61116:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Shared-Account-Overview-1024x353-1e2cb6cb8f3cabb571d37df9bcd6125b.png"},46760:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Valid-topologies-1024x384-8ca4435b581ba249b891a69184ae240f.png"}}]);