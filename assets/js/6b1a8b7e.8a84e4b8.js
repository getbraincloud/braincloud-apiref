"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[98393],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var a=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,i=function(e,t){if(null==e)return{};var r,a,i={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=a.createContext({}),s=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,i=e.mdxType,n=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(r),d=i,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||n;return r?a.createElement(f,p(p({ref:t},c),{},{components:r})):a.createElement(f,p({ref:t},c))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=r.length,p=new Array(n);p[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:i,p[1]=o;for(var s=2;s<n;s++)p[s]=r[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},40439:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>d,frontMatter:()=>n,metadata:()=>o,toc:()=>s});var a=r(87462),i=(r(67294),r(3905));const n={},p="App Store",o={unversionedId:"api/capi/appstore/index",id:"api/capi/appstore/index",title:"App Store",description:"Overview",source:"@site/docs/api/2_capi/appstore/index.md",sourceDirName:"api/2_capi/appstore",slug:"/api/capi/appstore/",permalink:"/braincloud-apiref/api/capi/appstore/",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/appstore/index.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671809255,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Client API",permalink:"/braincloud-apiref/api/capi/"},next:{title:"FinalizePurchase",permalink:"/braincloud-apiref/api/capi/appstore/finalizepurchase"}},l={},s=[{value:"Overview",id:"overview",level:2},{value:"API Summary",id:"api-summary",level:3},{value:"Verifying In-app Purchases",id:"verifying-in-app-purchases",level:3},{value:"Performing Two-part Purchases",id:"performing-two-part-purchases",level:3},{value:"Promotions",id:"promotions",level:3}],c=(u="DocCardList",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var u;const m={toc:s};function d(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"app-store"},"App Store"),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"The ",(0,i.kt)("strong",{parentName:"p"},"AppStore Service")," provides access to ",(0,i.kt)("em",{parentName:"p"},"Product / Pricing / Promotion")," features, as well as integrations with supported AppStores."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"This service replaces the deprecated")," ",(0,i.kt)("strong",{parentName:"p"},"Product Service")," ",(0,i.kt)("em",{parentName:"p"},"for purchases and product / pricing data. Currency operations have been moved to the new")," ",(0,i.kt)("a",{parentName:"p",href:"/api/capi/virtualcurrency"},"VirtualCurrency Service"),"."),(0,i.kt)("p",null,"It includes APIs for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Handling In-app Purchases (IAP)"),(0,i.kt)("li",{parentName:"ul"},"Querying Products and Promotions")),(0,i.kt)("h3",{id:"api-summary"},"API Summary"),(0,i.kt)("h3",{id:"verifying-in-app-purchases"},"Verifying In-app Purchases"),(0,i.kt)("p",null,"The specifics of processing in-app purchases from platform to platform vary slightly, but the overall flow is as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Client app requests a list of products from brainCloud ( ",(0,i.kt)("a",{parentName:"li",href:"/api/capi/appstore/getsalesinventory"},"GetSalesInventory")," )"),(0,i.kt)("li",{parentName:"ul"},"Client app requests the localized pricing details for the products from the AppStore"),(0,i.kt)("li",{parentName:"ul"},"Client app displays the products with prices to the user"),(0,i.kt)("li",{parentName:"ul"},"User chooses to purchase a product"),(0,i.kt)("li",{parentName:"ul"},"Client app invokes the purchase API from the AppStore.  AppStore performs the purchase, and sends back a receipt to the client"),(0,i.kt)("li",{parentName:"ul"},"Client sends the receipt to brainCloud for validation ( ",(0,i.kt)("a",{parentName:"li",href:"/api/capi/appstore/verifypurchase"},"VerifyPurchase")," ).  brainCloud performs a back-channel verification of the receipt with the AppStore \u2013 and if all is good, makes any required changes to virtual currency balances")),(0,i.kt)("p",null,"The follow call requests the list of products for sale:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/appstore/getsalesinventory"},"GetSalesInventory")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/appstore/getsalesinventorybycategory"},"GetSalesInventoryByCategory"))),(0,i.kt)("p",null,"This method is used to confirm store receipts:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/appstore/verifypurchase"},"VerifyPurchase")," - standardized receive verification for Apple, Google, Facebook and Steam purchases")),(0,i.kt)("h3",{id:"performing-two-part-purchases"},"Performing Two-part Purchases"),(0,i.kt)("p",null,"Some AppStores, like Steam, do a real-time two-part purchase. The following new API methods handle this requirement:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/appstore/startpurchase"},"StartPurchase")," - Generic version of start purchase."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/appstore/finalizepurchase"},"FinalizePurchase")," - Generic version of finalize purchase.")),(0,i.kt)("h3",{id:"promotions"},"Promotions"),(0,i.kt)("p",null,"In addition to the above purchase flows, the app can also query to see if any promotions are currently active (for display in banners, etc.), using the ",(0,i.kt)("a",{parentName:"p",href:"/api/capi/appstore/geteligiblepromotions"},"GetEligiblePromotions")," call \u2013 and can make manual adjustments to virtual currency balances."),(0,i.kt)("p",null,"The promotions API(s) are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/appstore/geteligiblepromotions"},"GetEligiblePromotions")," - Retrieves eligible promotions.")),(0,i.kt)(c,{mdxType:"DocCardList"}))}d.isMDXComponent=!0}}]);