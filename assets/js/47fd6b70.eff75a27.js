"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[70562],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),o=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=o(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",v={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=o(r),d=a,m=u["".concat(c,".").concat(d)]||u[d]||v[d]||s;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var o=2;o<s;o++)i[o]=r[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},53028:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>b,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var n=r(87462),a=(r(67294),r(3905));const s={},i="TriggerStatsEvents",l={unversionedId:"api/capi/playerstatsevent/triggerstatsevents",id:"api/capi/playerstatsevent/triggerstatsevents",title:"TriggerStatsEvents",description:"Overview",source:"@site/docs/api/2_capi/playerstatsevent/triggerstatsevents.md",sourceDirName:"api/2_capi/playerstatsevent",slug:"/api/capi/playerstatsevent/triggerstatsevents",permalink:"/braincloud-apiref/api/capi/playerstatsevent/triggerstatsevents",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/playerstatsevent/triggerstatsevents.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671831235,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"TriggerStatsEvent",permalink:"/braincloud-apiref/api/capi/playerstatsevent/triggerstatsevent"},next:{title:"Presence",permalink:"/braincloud-apiref/api/capi/presence/"}},c={},o=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},u=p("PartialServop"),v=p("BrowserWindow"),d=p("Tabs"),m=p("TabItem"),g={toc:o};function b(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"triggerstatsevents"},"TriggerStatsEvents"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Triggers multiple events server side that will increase the users statistics. This may cause one or more awards to be sent back to the player - could be achievements, experience, etc. Achievements will be sent by this client library to the appropriate awards service (Apple Game Center, etc)."),(0,a.kt)("p",null,"This mechanism supersedes the ",(0,a.kt)("a",{parentName:"p",href:"/api/capi/playerstats"},(0,a.kt)("code",null,"PlayerStatisticsService"))," API methods, since PlayerStatisticsService API method only update the raw statistics without triggering the rewards."),(0,a.kt)(u,{service_name:"playerStatisticsEvent",operation_name:"TRIGGER_MULTIPLE",mdxType:"PartialServop"}),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)(v,{mdxType:"BrowserWindow"},(0,a.kt)(d,{mdxType:"Tabs"},(0,a.kt)(m,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'string events = "[{\\"eventName\\":\\"GrantExperience\\",\\"eventMultiplier\\":100}]";\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.PlayerStatisticsEventService.TriggerStatsEvents(events, successCallback, failureCallback);\n'))),(0,a.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *events = "[{\\"eventName\\":\\"GrantExperience\\",\\"eventMultiplier\\":100}]";\n\n_bc->getPlayerStatisticsEventService()->triggerStatsEvents(events, this);\n'))),(0,a.kt)(m,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *events = "[{\\"eventName\\":\\"GrantExperience\\",\\"eventMultiplier\\":100}]";\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc playerStatisticsEventService] triggerStatsEvents:events\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,a.kt)(m,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'String events = "[{\\"eventName\\":\\"GrantExperience\\",\\"eventMultiplier\\":100}]";\nthis; // implements IServerCallback\n\n_bc.getPlayerStatisticsEventService().triggerStatsEvents(events, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,a.kt)(m,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'var events = [\n    {\n        "eventName": "GrantExperience",\n        "eventMultiplier": 100\n    }\n];\n\n_bc.playerStatisticsEvent.triggerStatsEvents(events, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,a.kt)(m,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cfscript"},'var events = [\n    {\n        "eventName": "GrantExperience",\n        "eventMultiplier": 100\n    }\n];\nvar playerStatisticsEventProxy = bridge.getPlayerStatisticsEventServiceProxy();\n\nvar postResult = playerStatisticsEventProxy.triggerStatsEvents(events);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,a.kt)(m,{value:"r",label:"Raw",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cfscript"},'var events = [\n    {\n        "eventName": "GrantExperience",\n        "eventMultiplier": 100\n    }\n];\nvar playerStatisticsEventProxy = bridge.getPlayerStatisticsEventServiceProxy();\n\nvar postResult = playerStatisticsEventProxy.triggerStatsEvents(events);\nif (postResult.status == 200) {\n    // Success!\n}\n'))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"JSON Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "data": {\n        "currency": {\n            "credits": {\n                "awarded": 10000,\n                "balance": 10000,\n                "consumed": 0,\n                "purchased": 0\n            },\n            "test": {\n                "awarded": 0,\n                "balance": 0,\n                "consumed": 0,\n                "purchased": 0\n            }\n        },\n        "rewardDetails": {},\n        "rewards": {\n            "currency": {\n                "credits": 10000\n            }\n        }\n    },\n    "status": 200\n}\n'))),(0,a.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"jsonData"),(0,a.kt)("td",{parentName:"tr",align:null},"An array of JSON objects representing Event Names and Multipliers.  ex. ",(0,a.kt)("inlineCode",{parentName:"td"},'[ { "eventName": "event1", "eventMultiplier": 1 } ]'))))))}b.isMDXComponent=!0}}]);