"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[79904],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),l=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(a),d=r,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5624:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const o={},i="CreateMatchWithInitialTurn",c={unversionedId:"api/capi/asyncmatch/creatematchwithinitialturn",id:"api/capi/asyncmatch/creatematchwithinitialturn",title:"CreateMatchWithInitialTurn",description:"Overview",source:"@site/docs/api/2_capi/asyncmatch/creatematchwithinitialturn.md",sourceDirName:"api/2_capi/asyncmatch",slug:"/api/capi/asyncmatch/creatematchwithinitialturn",permalink:"/braincloud-apiref/api/capi/asyncmatch/creatematchwithinitialturn",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/asyncmatch/creatematchwithinitialturn.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671809255,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"CreateMatch",permalink:"/braincloud-apiref/api/capi/asyncmatch/creatematch"},next:{title:"DeleteMatch",permalink:"/braincloud-apiref/api/capi/asyncmatch/deletematch"}},s={},l=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},u=p("PartialServop"),m=p("BrowserWindow"),d=p("Tabs"),h=p("TabItem"),y={toc:l};function f(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},y,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"creatematchwithinitialturn"},"CreateMatchWithInitialTurn"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Creates an instance of an asynchronous match with an initial turn."),(0,r.kt)("p",null,"Opponent IDs is a JSON array containing objects with a Platform and player ID. Platforms are identified as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"BC - a brainCloud profile id"),(0,r.kt)("li",{parentName:"ul"},"FB - a Facebook id"),(0,r.kt)("li",{parentName:"ul"},"STEAM - a Steam id"),(0,r.kt)("li",{parentName:"ul"},"PSN - a Playstation id")),(0,r.kt)("p",null,"An example of this string would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'[{\n  "platform":"BC",\n  "id": "some-braincloud-profile"\n},\n{\n  "platform":"FB",\n  "id": "some-facebook-id"\n}]\n')),(0,r.kt)(u,{service_name:"asyncMatch",operation_name:"CREATE",mdxType:"PartialServop"}),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)(m,{mdxType:"BrowserWindow"},(0,r.kt)(d,{mdxType:"Tabs"},(0,r.kt)(h,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'string jsonOpponentIds = "[{\\"platform\\":\\"BC\\",\\"id\\":\\"profile ID-1\\"},{\\"platform\\":\\"FB\\",\\"id\\":\\"Facebook ID-1\\"}]";\nstring jsonMatchState = "{}";\nstring pushNotificationMessage = "You have been entered into an async-match!";\nstring nextPlayer = "Facebook ID-1";\nstring jsonSummary = "{\\"Address\\": \\"South Africa\\"}";\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.AsyncMatchService.CreateMatchWithInitialTurn(jsonOpponentIds, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, successCallback, failureCallback);\n'))),(0,r.kt)(h,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *jsonOpponentIds = "[{\\"platform\\":\\"BC\\",\\"id\\":\\"profile ID-1\\"},{\\"platform\\":\\"FB\\",\\"id\\":\\"Facebook ID-1\\"}]";\nconst char *jsonMatchState = "{}";\nconst char *pushNotificationMessage = "You have been entered into an async-match!";\nconst char *nextPlayer = "Facebook ID-1";\nconst char *jsonSummary = "{\\"Address\\": \\"South Africa\\"}";\n_bc->getAsyncMatchService()->createMatchWithInitialTurn(jsonOpponentIds, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, this);\n'))),(0,r.kt)(h,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *jsonOpponentIds = @"[{\\"platform\\":\\"BC\\",\\"id\\":\\"profile ID-1\\"},{\\"platform\\":\\"FB\\",\\"id\\":\\"Facebook ID-1\\"}]";\nNSString *jsonMatchState = @"{}";\nNSString *pushNotificationMessage = @"You have been entered into an async-match!";\nNSString *nextPlayer = @"Facebook ID-1";\nNSString *jsonSummary = @"{\\"Address\\": \\"South Africa\\"}";\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc asyncMatchService] createMatchWithInitialTurn:jsonOpponentIds\n             jsonMatchState:jsonMatchState\n    pushNotificationMessage:pushNotificationMessage\n                 nextPlayer:nextPlayer\n                jsonSummary:jsonSummary\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,r.kt)(h,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String jsonOpponentIds = "[{\\"platform\\":\\"BC\\",\\"id\\":\\"profile ID-1\\"},{\\"platform\\":\\"FB\\",\\"id\\":\\"Facebook ID-1\\"}]";\nString jsonMatchState = "{}";\nString pushNotificationMessage = "You have been entered into an async-match!";\nString nextPlayer = "Facebook ID-1";\nString jsonSummary = "{\\"Address\\": \\"South Africa\\"}";\nthis; // implements IServerCallback\n\n_bc.getAsyncMatchService().createMatchWithInitialTurn(jsonOpponentIds, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,r.kt)(h,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'var jsonOpponentIds = [\n    {\n        "platform": "BC",\n        "id": "profile ID-1"\n    },\n    {\n        "platform": "FB",\n        "id": "Facebook ID-1"\n    }\n];\nvar jsonMatchState = {};\nvar pushNotificationMessage = "You have been entered into an async-match!";\nvar nextPlayer = "Facebook ID-1";\nvar jsonSummary = {\n    "Address": "South Africa"\n};\n\n_bc.asyncMatch.createMatchWithInitialTurn(jsonOpponentIds, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,r.kt)(h,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfscript"},'var jsonOpponentIds = [\n    {\n        "platform": "BC",\n        "id": "profile ID-1"\n    },\n    {\n        "platform": "FB",\n        "id": "Facebook ID-1"\n    }\n];\nvar jsonMatchState = {};\nvar pushNotificationMessage = "You have been entered into an async-match!";\nvar nextPlayer = "Facebook ID-1";\nvar jsonSummary = {\n    "Address": "South Africa"\n};\nvar asyncMatchProxy = bridge.getAsyncMatchServiceProxy();\n\nvar postResult = asyncMatchProxy.createMatchWithInitialTurn(jsonOpponentIds, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,r.kt)(h,{value:"r",label:"Raw",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "asyncMatch",\n    "operation": "CREATE",\n    "data": {\n        "players": [\n            {\n                "platform": "BC",\n                "id": "1st-profile-id"\n            },\n            {\n                "platform": "FB",\n                "id": "2nd-profile-id"\n            }\n        ],\n        "matchState": {},\n        "pushContent": "You have been entered into an async-match!",\n        "currentPlayer": "2nd-profile-id",\n        "summary": {\n            "Address": "South Africa"\n        }\n    }\n}\n'))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"JSON Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "data" : {\n        "createdAt" : 1449737412088,\n        "gameId" : "102345",\n        "matchId" : "af876cc7-1dd1-4fbe-959d-a9awdsab9a1c",\n        "ownerId" : "c76009c3-ea92-41c5-8560-e1dwasc07ce6b",\n        "players" : [\n            {\n                "pictureUrl" : null,\n                "playerId" : "c76009c3-ea92-41c5-8560-e1dwasc07ce6b",\n                "playerName" : "UserA_CPP_96764398"\n            },\n            {\n                "pictureUrl" : null,\n                "playerId" : "3bb9dwasdd-9c9a-454f-ae17-9703a66973c8",\n                "playerName" : "UserB_CPP_80148460"\n            }\n        ],\n        "status" : {\n            "currentPlayer" : "3bb9dwasdd-9c9a-454f-ae17-9703a66973c8",\n            "status" : "PENDING"\n        },\n        "summary" : {\n            "map" : "level01"\n        },\n        "updatedAt" : 1449737412092,\n        "version" : 1\n    },\n    "status" : 200\n}\n'))),(0,r.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"jsonOpponentIds"),(0,r.kt)("td",{parentName:"tr",align:null},"List of objects identifying the opponent platform and id for this match.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"jsonMatchState"),(0,r.kt)("td",{parentName:"tr",align:null},"JSON string blob provided by the caller")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pushNotificationMessage"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional push notification message to send to the other party. Refer to the Push Notification functions for the syntax required.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nextPlayer"),(0,r.kt)("td",{parentName:"tr",align:null},"Optionally, force the next player player to be a specific player")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"jsonSummary"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional JSON string defining what the other player will see as a summary of the game when listing their games")))))}f.isMDXComponent=!0}}]);