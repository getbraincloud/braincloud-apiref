"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[81680],{3905:(t,e,a)=>{a.d(e,{Zo:()=>u,kt:()=>h});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function s(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?s(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function c(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},s=Object.keys(t);for(n=0;n<s.length;n++)a=s[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(n=0;n<s.length;n++)a=s[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var o=n.createContext({}),l=function(t){var e=n.useContext(o),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},u=function(t){var e=l(t.components);return n.createElement(o.Provider,{value:e},t.children)},m="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},p=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,s=t.originalType,o=t.parentName,u=c(t,["components","mdxType","originalType","parentName"]),m=l(a),p=r,h=m["".concat(o,".").concat(p)]||m[p]||d[p]||s;return a?n.createElement(h,i(i({ref:e},u),{},{components:a})):n.createElement(h,i({ref:e},u))}));function h(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var s=a.length,i=new Array(s);i[0]=p;var c={};for(var o in e)hasOwnProperty.call(e,o)&&(c[o]=e[o]);c.originalType=t,c[m]="string"==typeof t?t:r,i[1]=c;for(var l=2;l<s;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},70334:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>b,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const s={},i="SubmitTurn",c={unversionedId:"api/capi/asyncmatch/submitturn",id:"api/capi/asyncmatch/submitturn",title:"SubmitTurn",description:"Overview",source:"@site/docs/api/2_capi/asyncmatch/submitturn.md",sourceDirName:"api/2_capi/asyncmatch",slug:"/api/capi/asyncmatch/submitturn",permalink:"/braincloud-apiref/api/capi/asyncmatch/submitturn",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/asyncmatch/submitturn.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671809255,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"ReadMatchHistory",permalink:"/braincloud-apiref/api/capi/asyncmatch/readmatchhistory"},next:{title:"UpdateMatchSummaryData",permalink:"/braincloud-apiref/api/capi/asyncmatch/updatematchsummarydata"}},o={},l=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],u=t=>function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)},m=u("PartialServop"),d=u("BrowserWindow"),p=u("Tabs"),h=u("TabItem"),y={toc:l};function b(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,n.Z)({},y,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"submitturn"},"SubmitTurn"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Submits a turn for the given match."),(0,r.kt)(m,{service_name:"asyncMatch",operation_name:"SUBMIT_TURN",mdxType:"PartialServop"}),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)(d,{mdxType:"BrowserWindow"},(0,r.kt)(p,{mdxType:"Tabs"},(0,r.kt)(h,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'string ownerId = "internalPlayerId";\nstring matchId = "matchId";\nstring jsonMatchState = "{}";\nstring pushNotificationMessage = "You have been entered into an async-match!";\nstring nextPlayer = "player2Id";\nstring jsonSummary = "{\\"Address\\":\\"South Africa\\"}";\nstring jsonStatistics = "{\\"statsName\\":\\"statValue\\"}";\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.AsyncMatchService.SubmitTurn(ownerId, matchId, version, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, jsonStatistics, successCallback, failureCallback);\n'))),(0,r.kt)(h,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *ownerId = "internalPlayerId";\nconst char *matchId = "matchId";\nconst char *jsonMatchState = "{}";\nconst char *pushNotificationMessage = "You have been entered into an async-match!";\nconst char *nextPlayer = "player2Id";\nconst char *jsonSummary = "{\\"Address\\":\\"South Africa\\"}";\nconst char *jsonStatistics = "{\\"statsName\\":\\"statValue\\"}";\n_bc->getAsyncMatchService()->submitTurn(ownerId, matchId, version, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, jsonStatistics, this);\n'))),(0,r.kt)(h,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *ownerId = @"internalPlayerId";\nNSString *matchId = @"matchId";\nNSString *jsonMatchState = @"{}";\nNSString *pushNotificationMessage = @"You have been entered into an async-match!";\nNSString *nextPlayer = @"player2Id";\nNSString *jsonSummary = @"{\\"Address\\":\\"South Africa\\"}";\nNSString *jsonStatistics = @"{\\"statsName\\":\\"statValue\\"}";\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc asyncMatchService] submitTurn:ownerId\n                    matchId:matchId\n                    version:version\n             jsonMatchState:jsonMatchState\n    pushNotificationMessage:pushNotificationMessage\n                 nextPlayer:nextPlayer\n                jsonSummary:jsonSummary\n             jsonStatistics:jsonStatistics\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,r.kt)(h,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String ownerId = "internalPlayerId";\nString matchId = "matchId";\nString jsonMatchState = "{}";\nString pushNotificationMessage = "You have been entered into an async-match!";\nString nextPlayer = "player2Id";\nString jsonSummary = "{\\"Address\\":\\"South Africa\\"}";\nString jsonStatistics = "{\\"statsName\\":\\"statValue\\"}";\nthis; // implements IServerCallback\n\n_bc.getAsyncMatchService().submitTurn(ownerId, matchId, version, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, jsonStatistics, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,r.kt)(h,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'var ownerId = "internalPlayerId";\nvar matchId = "matchId";\nvar jsonMatchState = {};\nvar pushNotificationMessage = "You have been entered into an async-match!";\nvar nextPlayer = "player2Id";\nvar jsonSummary = {\n    "Address": "South Africa"\n};\nvar jsonStatistics = {\n    "statsName": "statValue"\n};\n\n_bc.asyncMatch.submitTurn(ownerId, matchId, version, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, jsonStatistics, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,r.kt)(h,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfscript"},'var ownerId = "internalPlayerId";\nvar matchId = "matchId";\nvar jsonMatchState = {};\nvar pushNotificationMessage = "You have been entered into an async-match!";\nvar nextPlayer = "player2Id";\nvar jsonSummary = {\n    "Address": "South Africa"\n};\nvar jsonStatistics = {\n    "statsName": "statValue"\n};\nvar asyncMatchProxy = bridge.getAsyncMatchServiceProxy();\n\nvar postResult = asyncMatchProxy.submitTurn(ownerId, matchId, version, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, jsonStatistics);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,r.kt)(h,{value:"r",label:"Raw",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "asyncMatch",\n    "operation": "SUBMIT_TURN",\n    "data": {\n        "ownerId": "the-owner-id",\n        "matchId": "the-match-id",\n        "version": 1,\n        "matchState": {},\n        "pushContent": "It\'s your turn!",\n        "currentPlayer": "2nd-profle-id",\n        "summary": {\n            "Address": "South Africa"\n        },\n        "statistics": {\n            "statsName": "statValue"\n        }\n    }\n}\n'))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"JSON Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "data" : {\n        "createdAt" : 1449737412088,\n        "gameId" : "102345",\n        "matchId" : "af876cc7-1dd1-4fbe-959d-a9awdsab9a1c",\n        "ownerId" : "c76009c3-ea92-41c5-8560-e1dwasc07ce6b",\n        "players" : [\n            {\n                "pictureUrl" : null,\n                "playerId" : "c76009c3-ea92-41c5-8560-e1dwasc07ce6b",\n                "playerName" : "UserA_CPP_96764398",\n                "summaryFriendData": null\n            },\n            {\n                "pictureUrl" : null,\n                "playerId" : "3bb9dwasdd-9c9a-454f-ae17-9703a66973c8",\n                "playerName" : "UserB_CPP_80148460",\n                "summaryFriendData": null\n            }\n        ],\n        "status" : {\n            "currentPlayer" : "3bb9dwasdd-9c9a-454f-ae17-9703a66973c8",\n            "status" : "PENDING"\n        },\n        "summary" : {\n            "map" : "level01"\n        },\n        "updatedAt" : 1449737412092,\n        "version" : 1\n    },\n    "status" : 200\n}\n'))),(0,r.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ownerId"),(0,r.kt)("td",{parentName:"tr",align:null},"Match owner identifier")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"matchId"),(0,r.kt)("td",{parentName:"tr",align:null},"Match identifier")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"version"),(0,r.kt)("td",{parentName:"tr",align:null},"Game state version to ensure turns are submitted once and in order")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"jsonMatchState"),(0,r.kt)("td",{parentName:"tr",align:null},"JSON string blob provided by the caller")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pushNotificationMessage"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional push notification message to send to the other party. Refer to the Push Notification functions for the syntax required.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nextPlayer"),(0,r.kt)("td",{parentName:"tr",align:null},"Optionally, force the next player player to be a specific player")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"jsonSummary"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional JSON string defining what the other player will see as a summary of the game when listing their games")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"jsonStatistics"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional JSON string blob provided by the caller")))))}b.isMDXComponent=!0}}]);