"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[84281],{3905:(e,t,a)=>{a.d(t,{Zo:()=>b,kt:()=>u});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),d=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},b=function(e){var t=d(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,b=s(e,["components","mdxType","originalType","parentName"]),c=d(a),m=r,u=c["".concat(i,".").concat(m)]||c[m]||p[m]||l;return a?n.createElement(u,o(o({ref:t},b),{},{components:a})):n.createElement(u,o({ref:t},b))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var d=2;d<l;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},75657:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>y,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var n=a(87462),r=(a(67294),a(3905));const l={},o="FindLobby",s={unversionedId:"api/capi/lobby/findlobby",id:"api/capi/lobby/findlobby",title:"FindLobby",description:"Overview",source:"@site/docs/api/2_capi/lobby/findlobby.md",sourceDirName:"api/2_capi/lobby",slug:"/api/capi/lobby/findlobby",permalink:"/braincloud-apiref/api/capi/lobby/findlobby",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/lobby/findlobby.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671809255,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"CreateLobbyWithPingData",permalink:"/braincloud-apiref/api/capi/lobby/createlobbywithpingdata"},next:{title:"FindLobbyWithPingData",permalink:"/braincloud-apiref/api/capi/lobby/findlobbywithpingdata"}},i={},d=[{value:"Overview",id:"overview",level:2},{value:"Status Codes",id:"status-codes",level:3},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],b=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},c=b("PartialServop"),p=b("BrowserWindow"),m=b("Tabs"),u=b("TabItem"),g={toc:d};function y(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"findlobby"},"FindLobby"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Finds a lobby matching the specified parameters. Asynchronous - returns 200 to indicate that matchmaking has started."),(0,r.kt)("h3",{id:"status-codes"},"Status Codes"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Code"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"40601"),(0,r.kt)("td",{parentName:"tr",align:null},"RTT_NOT_ENABLED"),(0,r.kt)("td",{parentName:"tr",align:null},"RTT must be enabled for this feature")))),(0,r.kt)(c,{service_name:"lobby",operation_name:"FIND_LOBBY",mdxType:"PartialServop"}),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)(p,{mdxType:"BrowserWindow"},(0,r.kt)(m,{mdxType:"Tabs"},(0,r.kt)(u,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'string lobbyType = "4v4";\nint rating = 76;\nint maxSteps = 3;\nstring algo = "{\\"strategy\\":\\"ranged-absolute\\",\\"alignment\\":\\"center\\",\\"ranges\\":[5,7.5,10]}";\nstring filterJson = "{\\"cheater\\":false}";\nstring[] otherUserCxIds = { "55555:aaa-bbb-ccc-ddd:asdfjkl" };\nbool isReady = false;\nstring extraJson = "{}";\nstring teamCode = "blue";\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.LobbyService.FindLobby(lobbyType, rating, maxSteps, algo, filterJson, otherUserCxIds, isReady, extraJson, teamCode, successCallback, failureCallback);\n'))),(0,r.kt)(u,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *lobbyType = "4v4";\nint rating = 76;\nint maxSteps = 3;\nconst char *algo = "{\\"strategy\\":\\"ranged-absolute\\",\\"alignment\\":\\"center\\",\\"ranges\\":[5,7.5,10]}";\nconst char *filterJson = "{\\"cheater\\":false}";\nstd::vector<std::string> otherUserCxIds;\notherUserCxIds.push_back("55555:aaa-bbb-ccc-ddd:asdfjkl");\nbool isReady = false;\nconst char *extraJson = "{}";\nconst char *teamCode = "blue";\n_bc->getLobbyService()->findLobby(lobbyType, rating, maxSteps, algo, filterJson, otherUserCxIds, isReady, extraJson, teamCode, this);\n'))),(0,r.kt)(u,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *lobbyType = @"4v4";\nint rating = 76;\nint maxSteps = 3;\nNSString *algo = @"{\\"strategy\\":\\"ranged-absolute\\",\\"alignment\\":\\"center\\",\\"ranges\\":[5,7.5,10]}";\nNSString *filterJson = @"{\\"cheater\\":false}";\nNSArray *otherUserCxIds = @[ @"55555:aaa-bbb-ccc-ddd:asdfjkl" ];\nbool isReady = false;\nNSString *extraJson = @"{}";\nNSString *teamCode = @"blue";\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc lobbyService] findLobby:lobbyType\n                     rating:rating\n                   maxSteps:maxSteps\n                       algo:algo\n                 filterJson:filterJson\n             otherUserCxIds:otherUserCxIds\n                    isReady:isReady\n                  extraJson:extraJson\n                   teamCode:teamCode\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,r.kt)(u,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String lobbyType = "4v4";\nint rating = 76;\nint maxSteps = 3;\nString algo = "{\\"strategy\\":\\"ranged-absolute\\",\\"alignment\\":\\"center\\",\\"ranges\\":[5,7.5,10]}";\nString filterJson = "{\\"cheater\\":false}";\nString[] otherUserCxIds = { "55555:aaa-bbb-ccc-ddd:asdfjkl" };\nboolean isReady = false;\nString extraJson = "{}";\nString teamCode = "blue";\nthis; // implements IServerCallback\n\n_bc.getLobbyService().findLobby(lobbyType, rating, maxSteps, algo, filterJson, otherUserCxIds, isReady, extraJson, teamCode, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,r.kt)(u,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'var lobbyType = "4v4";\nvar rating = 76;\nvar maxSteps = 3;\nvar algo = {\n    "strategy": "ranged-absolute",\n    "alignment": "center",\n    "ranges": [\n        5,\n        7.5,\n        10\n    ]\n};\nvar filterJson = {\n    "cheater": false\n};\nvar otherUserCxIds = [ "55555:aaa-bbb-ccc-ddd:asdfjkl" ];\nvar isReady = false;\nvar extraJson = {};\nvar teamCode = "blue";\n\n_bc.lobby.findLobby(lobbyType, rating, maxSteps, algo, filterJson, otherUserCxIds, isReady, extraJson, teamCode, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,r.kt)(u,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfscript"},'var lobbyType = "4v4";\nvar rating = 76;\nvar maxSteps = 3;\nvar algo = {\n    "strategy": "ranged-absolute",\n    "alignment": "center",\n    "ranges": [\n        5,\n        7.5,\n        10\n    ]\n};\nvar filterJson = {\n    "cheater": false\n};\nvar otherUserCxIds = [ "55555:aaa-bbb-ccc-ddd:asdfjkl" ];\nvar isReady = false;\nvar extraJson = {};\nvar teamCode = "blue";\nvar lobbyProxy = bridge.getLobbyServiceProxy();\n\nvar postResult = lobbyProxy.findLobby(lobbyType, rating, maxSteps, algo, filterJson, otherUserCxIds, isReady, extraJson, teamCode);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,r.kt)(u,{value:"r",label:"Raw",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "lobby",\n    "operation": "FIND_LOBBY",\n    "data": {\n        "lobbyType": "4v4",\n        "rating": 76,\n        "maxSteps": 3,\n        "algo": {\n            "strategy": "ranged-absolute",\n            "alignment": "center",\n            "ranges": [\n                5,\n                7.5,\n                10\n            ]\n        },\n        "filterJson": {\n            "cheater": false\n        },\n        "otherUserCxIds": [\n            "55555:aaa-bbb-ccc-ddd:asdfjkl"\n        ],\n        "isReady": false,\n        "extraJson": {},\n        "teamCode": "blue"\n    }\n}\n'))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"JSON Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": 200,\n    "data": {}\n}\n'))),(0,r.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lobbyType"),(0,r.kt)("td",{parentName:"tr",align:null},"The type of lobby to look for. Lobby types are defined in the portal.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rating"),(0,r.kt)("td",{parentName:"tr",align:null},"The skill rating to use for finding the lobby. Provided as a separate parameter because it may not exactly match the user's rating (especially in cases where parties are involved).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"maxSteps"),(0,r.kt)("td",{parentName:"tr",align:null},"The maximum number of steps to wait when looking for an applicable lobby. Each step is ~5 seconds.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"algo"),(0,r.kt)("td",{parentName:"tr",align:null},"The algorithm to use for increasing the search scope.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filterJson"),(0,r.kt)("td",{parentName:"tr",align:null},"Used to help filter the list of rooms to consider. Passed to the matchmaking filter, if configured.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"otherUserCxIds"),(0,r.kt)("td",{parentName:"tr",align:null},"Array of other users (i.e. party members) to add to the lobby as well. Will constrain things so that only lobbies with room for all players will be considered.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isReady"),(0,r.kt)("td",{parentName:"tr",align:null},"Initial ready-status of this user.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"extraJson"),(0,r.kt)("td",{parentName:"tr",align:null},"Initial extra-data about this user.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"teamCode"),(0,r.kt)("td",{parentName:"tr",align:null},"Preferred team for this user, if applicable. Send ",(0,r.kt)("inlineCode",{parentName:"td"},'""')," or ",(0,r.kt)("inlineCode",{parentName:"td"},"null")," for automatic assignment.")))))}y.isMDXComponent=!0}}]);