"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[49500],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>u});var r=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=r.createContext({}),m=function(e){var a=r.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},c=function(e){var a=m(e.components);return r.createElement(i.Provider,{value:a},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},d=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,s=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),g=m(t),d=n,u=g["".concat(i,".").concat(d)]||g[d]||p[d]||s;return t?r.createElement(u,l(l({ref:a},c),{},{components:t})):r.createElement(u,l({ref:a},c))}));function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var s=t.length,l=new Array(s);l[0]=d;var o={};for(var i in a)hasOwnProperty.call(a,i)&&(o[i]=a[i]);o.originalType=e,o[g]="string"==typeof e?e:n,l[1]=o;for(var m=2;m<s;m++)l[m]=t[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},57602:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>l,default:()=>k,frontMatter:()=>s,metadata:()=>o,toc:()=>m});var r=t(87462),n=(t(67294),t(3905));const s={},l="MarkMessagesRead",o={unversionedId:"api/capi/messaging/markmessagesread",id:"api/capi/messaging/markmessagesread",title:"MarkMessagesRead",description:"Overview",source:"@site/docs/api/2_capi/messaging/markmessagesread.md",sourceDirName:"api/2_capi/messaging",slug:"/api/capi/messaging/markmessagesread",permalink:"/braincloud-apiref/api/capi/messaging/markmessagesread",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/messaging/markmessagesread.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671809255,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"GetMessagesPageOffset",permalink:"/braincloud-apiref/api/capi/messaging/getmessagespageoffset"},next:{title:"SendMessage",permalink:"/braincloud-apiref/api/capi/messaging/sendmessage"}},i={},m=[{value:"Overview",id:"overview",level:2},{value:"Status Codes",id:"status-codes",level:3},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],c=e=>function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",a)},g=c("PartialServop"),p=c("BrowserWindow"),d=c("Tabs"),u=c("TabItem"),b={toc:m};function k(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},b,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"markmessagesread"},"MarkMessagesRead"),(0,n.kt)("h2",{id:"overview"},"Overview"),(0,n.kt)("p",null,"Marks the specified message(s) as read."),(0,n.kt)("h3",{id:"status-codes"},"Status Codes"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Code"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"40601"),(0,n.kt)("td",{parentName:"tr",align:null},"FEATURE_NOT_ENABLED"),(0,n.kt)("td",{parentName:"tr",align:null},"Messaging feature is not enabled for app.")))),(0,n.kt)(g,{service_name:"messaging",operation_name:"MARK_MESSAGES_READ",mdxType:"PartialServop"}),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)(p,{mdxType:"BrowserWindow"},(0,n.kt)(d,{mdxType:"Tabs"},(0,n.kt)(u,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'string msgbox = "inbox";\nstring[] msgIds = { "msgId1", "msgId2" };\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.MessagingService.MarkMessagesRead(msgbox, msgIds, successCallback, failureCallback);\n'))),(0,n.kt)(u,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *msgbox = "inbox";\nstd::vector<std::string> msgIds;\nmsgIds.push_back("msgId1");\nmsgIds.push_back("msgId2");\n_bc->getMessagingService()->markMessagesRead(msgbox, msgIds, this);\n'))),(0,n.kt)(u,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *msgbox = @"inbox";\nNSArray *msgIds = @[ @"msgId1", @"msgId2" ];\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc messagingService] markMessagesRead:msgbox\n                     msgIds:msgIds\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,n.kt)(u,{value:"java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String msgbox = "inbox";\nString[] msgIds = { "msgId1", "msgId2" };\nthis; // implements IServerCallback\n\n_bc.getMessagingService().markMessagesRead(msgbox, msgIds, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,n.kt)(u,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'var msgbox = "inbox";\nvar msgIds = [ "msgId1", "msgId2" ];\n\n_bc.messaging.markMessagesRead(msgbox, msgIds, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,n.kt)(u,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cfscript"},'var msgbox = "inbox";\nvar msgIds = [ "msgId1", "msgId2" ];\nvar messagingProxy = bridge.getMessagingServiceProxy();\n\nvar postResult = messagingProxy.markMessagesRead(msgbox, msgIds);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,n.kt)(u,{value:"r",label:"Raw",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "messaging",\n    "operation": "MARK_MESSAGES_READ",\n    "data": {\n        "msgbox": "inbox",\n        "msgIds": [\n            "msgId1",\n            "msgId2"\n        ]\n    }\n}\n'))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"JSON Response"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": 200,\n    "data": {\n        "actual": 1,\n        "requested": 1\n    }\n}\n'))),(0,n.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"msgbox"),(0,n.kt)("td",{parentName:"tr",align:null},"The box that the messages reside in.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"msgIds"),(0,n.kt)("td",{parentName:"tr",align:null},"An array of msgIds.")))))}k.isMDXComponent=!0}}]);