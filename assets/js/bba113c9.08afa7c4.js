"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[10264],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>b});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(a),d=r,b=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return a?n.createElement(b,s(s({ref:t},u),{},{components:a})):n.createElement(b,s({ref:t},u))}));function b(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},46017:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const i={title:"brainCloud + Unity + Steam Integration",date:"2019-05-22"},s=void 0,o={unversionedId:"learn/sdk-tutorials/unity-tutorials/braincloud-unity-steam-integration/index",id:"learn/sdk-tutorials/unity-tutorials/braincloud-unity-steam-integration/index",title:"brainCloud + Unity + Steam Integration",description:"Steam does not offer native support for the Unity Game Engine. A third party git library was used to integrate Steam features into Unity.",source:"@site/docs/learn/6_sdk-tutorials/unity-tutorials/braincloud-unity-steam-integration/index.md",sourceDirName:"learn/6_sdk-tutorials/unity-tutorials/braincloud-unity-steam-integration",slug:"/learn/sdk-tutorials/unity-tutorials/braincloud-unity-steam-integration/",permalink:"/braincloud-apiref/learn/sdk-tutorials/unity-tutorials/braincloud-unity-steam-integration/",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/learn/6_sdk-tutorials/unity-tutorials/braincloud-unity-steam-integration/index.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672679892,formattedLastUpdatedAt:"Jan 2, 2023",frontMatter:{title:"brainCloud + Unity + Steam Integration",date:"2019-05-22"},sidebar:"learnSidebar",previous:{title:"brainCloud Bombers Example Game",permalink:"/braincloud-apiref/learn/sdk-tutorials/unity-tutorials/braincloud-bombers-example-game/"},next:{title:"Unity Authentication Example",permalink:"/braincloud-apiref/learn/sdk-tutorials/unity-tutorials/unity-authentication-example/"}},l={},c=[],u={toc:c};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Steam does not offer native support for the Unity Game Engine. A third party git library was used to integrate Steam features into Unity.  "),(0,r.kt)("h1",{id:"required-materials"},"Required Materials"),(0,r.kt)("p",null,"Download Steamworks SDK from Steam"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://partner.steamgames.com/doc/sdk"},"https://partner.steamgames.com/doc/sdk")),(0,r.kt)("p",null,"Steamworks.Net version 12.0.0 was used.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rlabrecque/Steamworks.NET/releases"},"https://github.com/rlabrecque/Steamworks.NET/releases")),(0,r.kt)("p",null,"brainCloud version 3.11 was used.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/getbraincloud/braincloud-csharp"},"https://github.com/getbraincloud/braincloud-csharp")),(0,r.kt)("p",null,"Unity 2018.2.5f1 was used"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://unity3d.com/get-unity/download/archive"},"https://unity3d.com/get-unity/download/archive")),(0,r.kt)("h1",{id:"configure-steam-platform-with-braincloud-design-portal"},"Configure Steam Platform with brainCloud Design Portal"),(0,r.kt)("p",null,"Enter in the Steam App Id and Steam Publisher Key into the brainCloud Design Portal via ",(0,r.kt)("strong",{parentName:"p"},"Design -> Core App Info -> Application IDs."),"  "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Steam App Id")," - Retrievable via Steam\u2019s partner network."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Steam Publisher Key")," - Also referred to as WEB API key within Steam. \xa0From the Steam partner network, Users & Permissions. \xa0Select the correct group, and select \u201cCreate WepAPI Key\u201d from the right panel.  "),(0,r.kt)("h1",{id:"configure-steamworksnet"},"Configure Steamworks.Net"),(0,r.kt)("p",null,"Update ",(0,r.kt)("strong",{parentName:"p"},"Plugins\\Steamworks.NET\\redist\\steam_appid.txt")," with the appropriate steam app Id.  "),(0,r.kt)("p",null,"Update ",(0,r.kt)("strong",{parentName:"p"},"SteamManager.cs"),",  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"if (SteamAPI.RestartAppIfNecessary(AppId_t.Invalid))\n")),(0,r.kt)("p",null,"To"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"if (SteamAPI.RestartAppIfNecessary((AppId_t)<yoursteamappid>) \n")),(0,r.kt)("h1",{id:"setup-steamworksnet"},"Setup Steamworks.Net"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"using Steamworks;\n\npublic void SetupSteamManager()\n{\n    if (SteamManager.Initialized)\n    {\n        m_bSteamInitialized = true;\n        // required callback for authenticating, view Steamworks.Net + brainCloud Authentication\n        m_getAuthSessionTicketResponse = Callback<GetAuthSessionTicketResponse_t>.Create(OnGetAuthSessionTicketResponse);\n        // required callback for In-App Purchases, Steamworks.Net + brainCloud Microtransactions\n        m_transactionCallback = Callback<MicroTxnAuthorizationResponse_t>.Create(OnTransactionResponse);\n    }        \n}\n")),(0,r.kt)("h1",{id:"steamworksnet--braincloud-authentication"},"Steamworks.Net + brainCloud Authentication"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'using BrainCloud;\n\nprivate bool m_bAttachSteam = false; // used for after we receive the auth response\nprivate uint m_ticketSize;           // cache ticket size\nprivate byte[] m_ticket;             // cache auth ticket\n\n// requests an auth ticket from Steam for use later\npublic void AttachSteamAccount(bool in_bAttach = false, SuccessCallback in_success = null, FailureCallback in_fail = null)\n{\n    if (SteamManager.Initialized)\n    {\n        m_bAttachSteam = in_bAttach;\n        m_steamAuthSuccess = in_success;\n        m_steamFailure = in_fail;\n\n        m_ticket = new byte[1024];\n        SteamUser.GetAuthSessionTicket(m_ticket, 1024, out m_ticketSize);\n    }\n}\n\npublic void MergeSteamAccount(SuccessCallback in_success = null, FailureCallback in_fail = null, object in_obj = null)\n{\n    if (m_steamIdStr != "" && m_authToken != "")\n    {\n        BCWrapper.IdentityService.MergeSteamIdentity(m_steamIdStr, m_authToken, in_success, in_fail, in_obj);\n        m_steamIdStr = ""; \n        m_authToken  = "";\n    }\n}\n\nprivate string m_authToken = "";    // will cache this, if we need it for a merge\nprivate string m_steamIdStr = "";   // will cache this, if we need it for a merge\nprivate void OnGetAuthSessionTicketResponse(GetAuthSessionTicketResponse_t pCallback)\n{\n    CSteamID steamId = SteamUser.GetSteamID();\n    if (pCallback.m_hAuthTicket != HAuthTicket.Invalid && m_ticketSize != 0)\n    {\n        m_steamIdStr = steamId.ToString();\n        // IMPORTANT!!! CONVERT TO HEX STRING\n        m_authToken = BitConverter.ToString(m_ticket, 0, (int)m_ticketSize).Replace("-", string.Empty);\n\n        if (!m_bAttachSteam)\n        {\n           BCWrapper.AuthenticateSteam(m_steamIdStr, m_authToken, false, m_steamAuthSuccess, m_steamFailure, m_steamObj);\n        }\n        else\n        {\n           BCWrapper.IdentityService.AttachSteamIdentity(m_steamIdStr, m_authToken, m_steamAuthSuccess, m_steamFailure, m_steamObj);\n        }\n    }\n}\n')),(0,r.kt)("h1",{id:"steamworksnet--braincloud-microtransactions--in-app-purchases"},"Steamworks.Net + brainCloud Microtransactions / In-App Purchases"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},' // steam is a two-step process, where you start a purchase, and then finalize it\n\nprivate SuccessCallback m_successCallback;\nprivate FailureCallback m_failureCallback;\nprivate string m_delayedTransactionId = "";\n\npublic void StartPurchase(string in_languageCode, string in_storeProductId, SuccessCallback in_success = null, FailureCallback in_fail = null)\n{\n    m_successCallback = in_success;\n    m_failureCallback = in_failure;\n    m_delayedTransactionId = "";\n\n    Dictionary<string, object> purchaseData = new Dictionary<string, object>();\n    purchaseData["language"] = in_languageCode;\n    purchaseData["itemId"] = in_storeProductId;\n\n    BCWrapper.Client.AppStoreService.StartPurchase("steam", JsonWriter.Serialize(purchaseData), onSteamStartPurchaseSuccess, m_failureCallback);\n}\n\nprivate void onSteamStartPurchaseSuccess(string in_json, object obj)\n{\n    Dictionary<string, object> jsonMessage = (Dictionary<string, object>)JsonReader.Deserialize(in_json);\n    Dictionary<string, object> jsonData = (Dictionary<string, object>)jsonMessage["data"];\n    \n    // brainCloud has given a transaction ID for this interaction, the STEAM overlay will popup\n    // to finalize the purchase for the user        \n    m_delayedTransactionId = (string)jsonData["transactionId"];\n}\n// callback was created during Steam Setup \nprivate void OnTransactionResponse(MicroTxnAuthorizationResponse_t pCallback)\n{\n   Dictionary<string, object> transactionData = new Dictionary<string, object>();\n   transactionData["transId"] = m_delayedTransactionId;\n   BCWrapper.AppStoreService.FinalizePurchase("steam", m_delayedTransactionId, JsonWriter.Serialize(transactionData), m_successCallback, m_failureCallback);\n\n   m_delayedTransactionId = "";\n}\n')),(0,r.kt)("h1",{id:"more-info"},"More Info"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Often times the Steam Overlay does not render/show up during editor or developer standalone builds. \xa0You will need to upload a build using the steam SDK content uploader, to ensure the overlay is properly rendered over Unity\u2019s engine.  "),(0,r.kt)("li",{parentName:"ul"},"All Steam purchases by default are in sandbox mode, to help initial integration and testing, prior to release. \xa0Visit the brainCloud design portal Navigate to ",(0,r.kt)("strong",{parentName:"li"},"Design -> Core App Info -> Advanced Settings"),". \xa0At the bottom is a check mark to distinguish if Steam Store purchases should be in sandbox mode or not. \xa0Ensure this is unselected before going to the marketplace.")))}p.isMDXComponent=!0}}]);