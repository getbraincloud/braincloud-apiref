"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[9485],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),d=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(n),m=a,b=c["".concat(i,".").concat(m)]||c[m]||p[m]||o;return n?r.createElement(b,l(l({ref:t},u),{},{components:n})):r.createElement(b,l({ref:t},u))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:a,l[1]=s;for(var d=2;d<o;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9724:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=n(87462),a=(n(67294),n(3905));const o={},l="GetTournamentStatus",s={unversionedId:"api/capi/tournament/gettournamentstatus",id:"api/capi/tournament/gettournamentstatus",title:"GetTournamentStatus",description:"Overview",source:"@site/docs/api/2_capi/tournament/gettournamentstatus.md",sourceDirName:"api/2_capi/tournament",slug:"/api/capi/tournament/gettournamentstatus",permalink:"/braincloud-apiref/api/capi/tournament/gettournamentstatus",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/tournament/gettournamentstatus.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671809255,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"GetMyDivisions",permalink:"/braincloud-apiref/api/capi/tournament/getmydivisions"},next:{title:"JoinDivision",permalink:"/braincloud-apiref/api/capi/tournament/joindivision"}},i={},d=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},c=u("PartialServop"),p=u("BrowserWindow"),m=u("Tabs"),b=u("TabItem"),v={toc:d};function g(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"gettournamentstatus"},"GetTournamentStatus"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Get tournament status associated with a leaderboard."),(0,a.kt)(c,{service_name:"tournament",operation_name:"GET_TOURNAMENT_STATUS",mdxType:"PartialServop"}),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)(p,{mdxType:"BrowserWindow"},(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(b,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'string leaderboardId = "leaderboardId1";\nint versionId = 1;\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.TournamentService.GetTournamentStatus(leaderboardId, versionId, successCallback, failureCallback);\n'))),(0,a.kt)(b,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *leaderboardId = "leaderboardId1";\nint versionId = 1;\n_bc->getTournamentService()->getTournamentStatus(leaderboardId, versionId, this);\n'))),(0,a.kt)(b,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *leaderboardId = @"leaderboardId1";\nint versionId = 1;\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc tournamentService] getTournamentStatus:leaderboardId\n                  versionId:versionId\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,a.kt)(b,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'String leaderboardId = "leaderboardId1";\nint versionId = 1;\nthis; // implements IServerCallback\n\n_bc.getTournamentService().getTournamentStatus(leaderboardId, versionId, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,a.kt)(b,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'var leaderboardId = "leaderboardId1";\nvar versionId = 1;\n\n_bc.tournament.getTournamentStatus(leaderboardId, versionId, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,a.kt)(b,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cfscript"},'var leaderboardId = "leaderboardId1";\nvar versionId = 1;\nvar tournamentProxy = bridge.getTournamentServiceProxy();\n\nvar postResult = tournamentProxy.getTournamentStatus(leaderboardId, versionId);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,a.kt)(b,{value:"r",label:"Raw",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "tournament",\n    "operation": "GET_TOURNAMENT_STATUS",\n    "data": {\n        "leaderboardId": "the-leaderboard-id",\n        "versionId": 1\n    }\n}\n'))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"JSON Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": 200,\n    "data": {\n        "enrolled": true,\n        "versionId": 4,\n        "server_time": 1483719062011,\n        "tournamentTimetable": {\n            "tRegistrationStart": 1483704035003,\n            "tRegistrationEnd": 1483790435003,\n            "tState": "ACTIVE",\n            "tPlayEnd": 1483790435003,\n            "tPlayStart": 1483704035003\n        },\n        "tournamentConfigs": [{\n            "tournamentCode": "testTournament",\n            "description": {\n                "name": {\n                    "en": "Test Tournament"\n                },\n                "desc": {\n                    "en": "Test Tournament"\n                }\n            },\n            "customJson": {},\n            "payoutRules": [{\n                "reward": {\n                    "currency": {\n                        "credits": 1\n                    }\n                },\n                "rank": {\n                    "rankAbs": 1\n                }\n            }, {\n                "reward": {},\n                "rank": {\n                    "rankRemainder": -1\n                }\n            }],\n            "entryFee": {}\n        }],\n        "leaderboardEnrollment": {\n            "score": 989,\n            "data": null,\n            "createdAt": 1483719061830,\n            "updatedAt": 1483719061830,\n            "tCode": "testTournament",\n            "tRank": 0,\n            "tClaimedAt": 0\n        }\n    }\n}\n'))),(0,a.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"leaderboardId"),(0,a.kt)("td",{parentName:"tr",align:null},"The leaderboard for the tournament")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"versionId"),(0,a.kt)("td",{parentName:"tr",align:null},"Version of the tournament, use -1 for the latest version")))))}g.isMDXComponent=!0}}]);