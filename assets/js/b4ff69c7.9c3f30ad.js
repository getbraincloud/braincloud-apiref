"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[87763],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>v});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,v=u["".concat(c,".").concat(m)]||u[m]||p[m]||i;return n?a.createElement(v,o(o({ref:t},d),{},{components:n})):a.createElement(v,o({ref:t},d))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},77484:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>k,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={},o="JoinDivision",l={unversionedId:"api/capi/tournament/joindivision",id:"api/capi/tournament/joindivision",title:"JoinDivision",description:"Overview",source:"@site/docs/api/2_capi/tournament/joindivision.md",sourceDirName:"api/2_capi/tournament",slug:"/api/capi/tournament/joindivision",permalink:"/braincloud-apiref/api/capi/tournament/joindivision",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/tournament/joindivision.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671809255,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"GetTournamentStatus",permalink:"/braincloud-apiref/api/capi/tournament/gettournamentstatus"},next:{title:"JoinTournament",permalink:"/braincloud-apiref/api/capi/tournament/jointournament"}},c={},s=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2},{value:"Method Parameters",id:"method-parameters-1",level:4}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},u=d("PartialServop"),p=d("BrowserWindow"),m=d("Tabs"),v=d("TabItem"),b={toc:s};function k(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"joindivision"},"JoinDivision"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Similar to ",(0,r.kt)("code",null,(0,r.kt)("a",{parentName:"p",href:"/api/capi/tournament/jointournament"},"JoinTournament")),", except that you specify the ",(0,r.kt)("em",{parentName:"p"},"division set id")," instead of the ",(0,r.kt)("em",{parentName:"p"},"leaderboard id"),". "),(0,r.kt)("p",null,"Returns the ",(0,r.kt)("em",{parentName:"p"},"division instance id")," (i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"leaderboardId"),") upon success. If joining the tournament requires a fee, it is possible to fail (if the user doesn't have enough currency)."),(0,r.kt)(u,{service_name:"tournament",operation_name:"JOIN_DIVISION",mdxType:"PartialServop"}),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)(p,{mdxType:"BrowserWindow"},(0,r.kt)(m,{mdxType:"Tabs"},(0,r.kt)(v,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'string divSetId = "exampleDivSetId";\nstring tournamentCode = "exampleTournamentCode1";\nint initialScore = 0;\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.TournamentService.JoinDivision(divSetId, tournamentCode, initialScore, successCallback, failureCallback);\n'))),(0,r.kt)(v,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *divSetId = "exampleDivSetId";\nconst char *tournamentCode = "exampleTournamentCode1";\nint initialScore = 0;\n_bc->getTournamentService()->joinDivision(divSetId, tournamentCode, initialScore, this);\n'))),(0,r.kt)(v,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *divSetId = @"exampleDivSetId";\nNSString *tournamentCode = @"exampleTournamentCode1";\nint initialScore = 0;\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc tournamentService] joinDivision:divSetId\n             tournamentCode:tournamentCode\n               initialScore:initialScore\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,r.kt)(v,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String divSetId = "exampleDivSetId";\nString tournamentCode = "exampleTournamentCode1";\nint initialScore = 0;\nthis; // implements IServerCallback\n\n_bc.getTournamentService().joinDivision(divSetId, tournamentCode, initialScore, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,r.kt)(v,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'var divSetId = "exampleDivSetId";\nvar tournamentCode = "exampleTournamentCode1";\nvar initialScore = 0;\n\n_bc.tournament.joinDivision(divSetId, tournamentCode, initialScore, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,r.kt)(v,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfscript"},'var divSetId = "exampleDivSetId";\nvar tournamentCode = "exampleTournamentCode1";\nvar initialScore = 0;\nvar tournamentProxy = bridge.getTournamentServiceProxy();\n\nvar postResult = tournamentProxy.joinDivision(divSetId, tournamentCode, initialScore);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,r.kt)(v,{value:"r",label:"Raw",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "tournament",\n    "operation": "JOIN_DIVISION",\n    "data": {\n        "divSetId": "exampleDivSetId",\n        "tournamentCode": "exampleTournamentCode1",\n        "initialScore": 0\n    }\n}\n'))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"JSON Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "data": {\n        "entryFee": {},\n        "createdAt": 1654717860000,\n        "balance": {\n            "currency": {\n                "coin": {\n                    "consumed": 0,\n                    "balance": 25000,\n                    "purchased": 25000,\n                    "awarded": 0\n                }\n            }\n        },\n        "leaderboardId": "^D^weekly^2",\n        "enrolled": true\n    },\n    "status": 200\n}\n'))),(0,r.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,r.kt)("h4",{id:"method-parameters-1"},"Method Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"divSetId"),(0,r.kt)("td",{parentName:"tr",align:null},"Division set id.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tournamentCode"),(0,r.kt)("td",{parentName:"tr",align:null},"The code for the tournament to join (eg. free vs. premium, etc.)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"initialScore"),(0,r.kt)("td",{parentName:"tr",align:null},"The initial score to give the player on the leaderboard.")))))}k.isMDXComponent=!0}}]);