"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[43513],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>b});var a=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=a.createContext({}),c=function(e){var r=a.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},u=function(e){var r=c(e.components);return a.createElement(l.Provider,{value:r},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},d=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(t),d=n,b=p["".concat(l,".").concat(d)]||p[d]||m[d]||s;return t?a.createElement(b,o(o({ref:r},u),{},{components:t})):a.createElement(b,o({ref:r},u))}));function b(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var s=t.length,o=new Array(s);o[0]=d;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i[p]="string"==typeof e?e:n,o[1]=i;for(var c=2;c<s;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},17651:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=t(87462),n=(t(67294),t(3905));const s={},o="SubmitCrashReport",i={unversionedId:"api/capi/datastream/submitcrashreport",id:"api/capi/datastream/submitcrashreport",title:"SubmitCrashReport",description:"Overview",source:"@site/docs/api/2_capi/datastream/submitcrashreport.md",sourceDirName:"api/2_capi/datastream",slug:"/api/capi/datastream/submitcrashreport",permalink:"/braincloud-apiref/api/capi/datastream/submitcrashreport",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/datastream/submitcrashreport.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672193365,formattedLastUpdatedAt:"Dec 28, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"CustomTrackEvent",permalink:"/braincloud-apiref/api/capi/datastream/customtrackevent"},next:{title:"Entity",permalink:"/braincloud-apiref/api/capi/entity/"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],u=e=>function(r){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",r)},p=u("PartialServop"),m=u("BrowserWindow"),d=u("Tabs"),b=u("TabItem"),g={toc:c};function h(e){let{components:r,...t}=e;return(0,n.kt)("wrapper",(0,a.Z)({},g,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"submitcrashreport"},"SubmitCrashReport"),(0,n.kt)("h2",{id:"overview"},"Overview"),(0,n.kt)("p",null,"Allows the system to send a Crash Report to the servers, to be forwarded to any connected DataStream services."),(0,n.kt)("p",null,"This API can be called silently by the app - or can be sent after presenting an error dialog to the user (requestion more info). User submitted reports should be flagged as such, so that the app's support team knows to follow up."),(0,n.kt)(p,{service_name:"dataStream",operation_name:"SEND_CRASH_REPORT",mdxType:"PartialServop"}),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)(m,{mdxType:"BrowserWindow"},(0,n.kt)(d,{mdxType:"Tabs"},(0,n.kt)(b,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'string crashType = "unknown";\nstring errorMsg = "Divide by zero error";\nstring crashJson = "{\\"dialog\\":5}";\nstring crashLog = "funcX(a,b,c)/ncalled by funcY(a,b,c)";\nstring userName = "";\nstring userEmail = "";\nstring userNotes = "";\nbool userSubmitted = false;\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.DataStreamService.SubmitCrashReport(crashType, errorMsg, crashJson, crashLog, userName, userEmail, userNotes, userSubmitted, successCallback, failureCallback);\n'))),(0,n.kt)(b,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *crashType = "unknown";\nconst char *errorMsg = "Divide by zero error";\nconst char *crashJson = "{\\"dialog\\":5}";\nconst char *crashLog = "funcX(a,b,c)/ncalled by funcY(a,b,c)";\nconst char *userName = "";\nconst char *userEmail = "";\nconst char *userNotes = "";\nbool userSubmitted = false;\n_bc->getDataStreamService()->submitCrashReport(crashType, errorMsg, crashJson, crashLog, userName, userEmail, userNotes, userSubmitted, this);\n'))),(0,n.kt)(b,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *crashType = @"unknown";\nNSString *errorMsg = @"Divide by zero error";\nNSString *crashJson = "{\\"dialog\\":5}";\nNSString *crashLog = @"funcX(a,b,c)/ncalled by funcY(a,b,c)";\nNSString *userName = @"";\nNSString *userEmail = @"";\nNSString *userNotes = @"";\nbool userSubmitted = false;\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc dataStreamService] submitCrashReport:crashType\n                   errorMsg:errorMsg\n                  crashJson:crashJson\n                   crashLog:crashLog\n                   userName:userName\n                  userEmail:userEmail\n                  userNotes:userNotes\n              userSubmitted:userSubmitted\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,n.kt)(b,{value:"java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String crashType = "unknown";\nString errorMsg = "Divide by zero error";\nString crashJson = "{\\"dialog\\":5}";\nString crashLog = "funcX(a,b,c)/ncalled by funcY(a,b,c)";\nString userName = "";\nString userEmail = "";\nString userNotes = "";\nboolean userSubmitted = false;\nthis; // implements IServerCallback\n\n_bc.getDataStreamService().submitCrashReport(crashType, errorMsg, crashJson, crashLog, userName, userEmail, userNotes, userSubmitted, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,n.kt)(b,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'var crashType = "unknown";\nvar errorMsg = "Divide by zero error";\nvar crashJson = {\n  "dialog": 5\n};\nvar crashLog = "funcX(a,b,c)/ncalled by funcY(a,b,c)";\nvar userName = "";\nvar userEmail = "";\nvar userNotes = "";\nvar userSubmitted = false;\n\n_bc.dataStream.submitCrashReport(crashType, errorMsg, crashJson, crashLog, userName, userEmail, userNotes, userSubmitted, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,n.kt)(b,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cfscript"},'var crashType = "unknown";\nvar errorMsg = "Divide by zero error";\nvar crashJson = {\n  "dialog": 5\n};\nvar crashLog = "funcX(a,b,c)/ncalled by funcY(a,b,c)";\nvar userName = "";\nvar userEmail = "";\nvar userNotes = "";\nvar userSubmitted = false;\nvar dataStreamProxy = bridge.getDataStreamServiceProxy();\n\nvar postResult = dataStreamProxy.submitCrashReport(crashType, errorMsg, crashJson, crashLog, userName, userEmail, userNotes, userSubmitted);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,n.kt)(b,{value:"r",label:"Raw",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "dataStream",\n    "operation": "SEND_CRASH_REPORT",\n    "data": {\n        "crashType": "unknown",\n        "errorMsg": "Divide by zero error",\n        "crashJson": {\n            "dialog": 5\n        },\n        "crashLog": "funcX(a,b,c)/ncalled by funcY(a,b,c)",\n        "userName": "",\n        "userEmail": "",\n        "userNotes": "",\n        "userSubmitted": false\n    }\n}\n'))))),(0,n.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"crashType"),(0,n.kt)("td",{parentName:"tr",align:null},"Identifies the crash category. Developer-defined, can be anything.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"errorMsg"),(0,n.kt)("td",{parentName:"tr",align:null},"Short message describing the crash.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"crashJson"),(0,n.kt)("td",{parentName:"tr",align:null},"Exception data.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"crashLog"),(0,n.kt)("td",{parentName:"tr",align:null},"Client log up until the crash (if available.)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"userName"),(0,n.kt)("td",{parentName:"tr",align:null},"Name provided by the user (if provided.)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"userEmail"),(0,n.kt)("td",{parentName:"tr",align:null},"Email address to respond to (if provided.)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"userNotes"),(0,n.kt)("td",{parentName:"tr",align:null},"Notes provided by the user (if provided.)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"userSubmitted"),(0,n.kt)("td",{parentName:"tr",align:null},"User submitted flag.")))))}h.isMDXComponent=!0}}]);