"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[51895],{3905:(e,r,n)=>{n.d(r,{Zo:()=>p,kt:()=>m});var t=n(67294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function l(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?l(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=t.createContext({}),s=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},p=function(e){var r=s(e.components);return t.createElement(c.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),f=a,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||l;return n?t.createElement(m,o(o({ref:r},p),{},{components:n})):t.createElement(m,o({ref:r},p))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=f;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}f.displayName="MDXCreateElement"},64353:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>v,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var t=n(87462),a=(n(67294),n(3905));const l={},o="GetPresenceOfFriends",i={unversionedId:"api/capi/presence/getpresenceoffriends",id:"api/capi/presence/getpresenceoffriends",title:"GetPresenceOfFriends",description:"Overview",source:"@site/docs/api/2_capi/presence/getpresenceoffriends.md",sourceDirName:"api/2_capi/presence",slug:"/api/capi/presence/getpresenceoffriends",permalink:"/braincloud-apiref/api/capi/presence/getpresenceoffriends",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/presence/getpresenceoffriends.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671831235,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"ForcePush",permalink:"/braincloud-apiref/api/capi/presence/forcepush"},next:{title:"GetPresenceOfGroup",permalink:"/braincloud-apiref/api/capi/presence/getpresenceofgroup"}},c={},s=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],p=e=>function(r){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",r)},u=p("PartialServop"),d=p("BrowserWindow"),f=p("Tabs"),m=p("TabItem"),b={toc:s};function v(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},b,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getpresenceoffriends"},"GetPresenceOfFriends"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Gets the presence data for the given ",(0,a.kt)("inlineCode",{parentName:"p"},"platform"),'. Can be one of "all", "brainCloud", or "facebook". Will not include offline profiles unless ',(0,a.kt)("inlineCode",{parentName:"p"},"includeOffline")," is set to true."),(0,a.kt)(u,{service_name:"presence",operation_name:"GET_PRESENCE_OF_FRIENDS",mdxType:"PartialServop"}),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)(d,{mdxType:"BrowserWindow"},(0,a.kt)(f,{mdxType:"Tabs"},(0,a.kt)(m,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'string platform = <%= data.example.platform %>;\nbool includeOffline = true;\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n    \n_bc.PresenceService.GetPresenceOfFriends(platform, includeOffline, successCallback, failureCallback);\n'))),(0,a.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"const char* platform = <%= data.example.platform %>;\nbool includeOffline = true;\n\n_bc->getPresenceService()->getPresenceOfFriends(platform, includeOffline, this);\n"))),(0,a.kt)(m,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-objectivec"},"NSString* platform = @<%= data.example.platform %>;\nbool includeOffline = true;\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc presenceService] getPresenceOfFriends:platform\n             includeOffline:includeOffline\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n"))),(0,a.kt)(m,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'String platform = <%= data.example.platform %>;\nboolean includeOffline = true;\nthis; // implements IServerCallback\n\n_bc.getPresenceService().getPresenceOfFriends(platform, includeOffline, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,a.kt)(m,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'var platform = <%= data.example.platform %>;\nvar includeOffline = true;\n\n_bc.presence.getPresenceOfFriends(platform, includeOffline, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,a.kt)(m,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cfscript"},"var presenceProxy = bridge.getPresenceServiceProxy();\nvar platform = <%= data.example.platform %>;\nvar includeOffline = true;\n\nvar postResult = presenceProxy.getPresenceOfFriends(platform, includeOffline);\nif (postResult.status == 200) {\n    // Success!\n}\n"))),(0,a.kt)(m,{value:"r",label:"Raw",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "presence",\n    "operation": "GET_PRESENCE_OF_FRIENDS",\n    "data": {\n        "friendPlatform": "brainCloud",\n        "includeOffline": true\n    }\n}\n'))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"JSON Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n "data": {\n  "presence": [\n   {\n    "user": {\n     "id": <%= data.example.profileId %>,\n     "name": <%= data.example.playerName %>,\n     "pic": null,\n     "cxs": [\n      "22284:fb416888-e76d-425d-a06d-a5529bdba8d9:id58ohotujj893gomctos244al"\n     ]\n    },\n    "online": true,\n    "summaryFriendData": {},\n    "activity": {\n     "LOCATION": "POKER_TABLE",\n     "STATUS": "PLAYING_GAME"\n    }\n   }\n  ]\n },\n "status": 200\n}\n'))),(0,a.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"platform"),(0,a.kt)("td",{parentName:"tr",align:null},'Gets a list of Presence entries for the specified platform or "all" for all platforms.')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"includeOffline"),(0,a.kt)("td",{parentName:"tr",align:null},"Should offline users be included in the response?")))))}v.isMDXComponent=!0}}]);