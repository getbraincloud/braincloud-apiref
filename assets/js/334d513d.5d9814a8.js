"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[49048],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||r;return n?o.createElement(f,s(s({ref:t},u),{},{components:n})):o.createElement(f,s({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},12306:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>y,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=n(87462),a=(n(67294),n(3905));const r={},s="SendRawPushToCustomQuery",i={unversionedId:"api/capi/pushnotification/sendrawpushtocustomquery1",id:"api/capi/pushnotification/sendrawpushtocustomquery1",title:"SendRawPushToCustomQuery",description:"Overview",source:"@site/docs/api/2_capi/pushnotification/sendrawpushtocustomquery1.md",sourceDirName:"api/2_capi/pushnotification",slug:"/api/capi/pushnotification/sendrawpushtocustomquery1",permalink:"/braincloud-apiref/api/capi/pushnotification/sendrawpushtocustomquery1",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/pushnotification/sendrawpushtocustomquery1.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671809255,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"SendRawPushNotificationToGroup",permalink:"/braincloud-apiref/api/capi/pushnotification/sendrawpushnotificationtogroup"},next:{title:"SendRichPushNotification",permalink:"/braincloud-apiref/api/capi/pushnotification/sendrichpushnotification"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},p=u("PartialServop"),d=u("BrowserWindow"),m=u("Tabs"),f=u("TabItem"),g={toc:c};function y(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sendrawpushtocustomquery"},"SendRawPushToCustomQuery"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Sends a push to users based on custom collection query and the profileIdField storing the user's brainCloud profile Id."),(0,a.kt)(p,{service_name:"pushNotification",operation_name:"SEND_RAW_PUSH_TO_CUSTOM_QUERY",mdxType:"PartialServop"}),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)(d,{mdxType:"BrowserWindow"},(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(f,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'string customEntityType = "athletes";\nstring customQueryJson = "{ \\"data.totalGoals\\": { \\"$gte\\": 10 } }";\nstring profileIdField = "ownerId";\nstring contentJson = "{ \\"fcmContent\\": { \\"notification\\": { \\"body\\": \\"content of message\\", \\"title\\": \\"message title\\" }, \\"data\\": { \\"customfield1\\": \\"customValue1\\", \\"customfield2\\": \\"customValue2\\" }, \\"priority\\": \\"normal\\" }, \\"iosContent\\": { \\"aps\\": { \\"alert\\": { \\"body\\": \\"content of message\\", \\"title\\": \\"message title\\" }, \\"badge\\": 0, \\"sound\\": \\"gggg\\" } }, \\"facebookContent\\": { \\"template\\": \\"content of message\\" } }";\nSuccessCallback successCallback = (response, cbObject) =>\n{\n  Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n  Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.PushNotificationService.SendRawPushToCustomQuery(customEntityType, customQueryJson, profileIdField, contentJson, successCallback, failureCallback);\n'))),(0,a.kt)(f,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'const chat *customEntityType = "athletes";\nconst chat *customQueryJson = "{ \\"data.totalGoals\\": { \\"$gte\\": 10 } }";\nconst chat *profileIdField = "ownerId";\nconst chat *contentJson = "{ \\"fcmContent\\": { \\"notification\\": { \\"body\\": \\"content of message\\", \\"title\\": \\"message title\\" }, \\"data\\": { \\"customfield1\\": \\"customValue1\\", \\"customfield2\\": \\"customValue2\\" }, \\"priority\\": \\"normal\\" }, \\"iosContent\\": { \\"aps\\": { \\"alert\\": { \\"body\\": \\"content of message\\", \\"title\\": \\"message title\\" }, \\"badge\\": 0, \\"sound\\": \\"gggg\\" } }, \\"facebookContent\\": { \\"template\\": \\"content of message\\" } }";\n\n_bc->getPushNotificationService()->sendRawPushToCustomQuery(customEntityType, customQueryJson, profileIdField, contentJson, this);\n'))),(0,a.kt)(f,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *customEntityType = @"athletes";\nNSString *customQueryJson = "{ \\"data.totalGoals\\": { \\"$gte\\": 10 } }";\nNSString *profileIdField = @"ownerId";\nNSString *contentJson = "{ \\"fcmContent\\": { \\"notification\\": { \\"body\\": \\"content of message\\", \\"title\\": \\"message title\\" }, \\"data\\": { \\"customfield1\\": \\"customValue1\\", \\"customfield2\\": \\"customValue2\\" }, \\"priority\\": \\"normal\\" }, \\"iosContent\\": { \\"aps\\": { \\"alert\\": { \\"body\\": \\"content of message\\", \\"title\\": \\"message title\\" }, \\"badge\\": 0, \\"sound\\": \\"gggg\\" } }, \\"facebookContent\\": { \\"template\\": \\"content of message\\" } }";\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc pushNotificationService] sendRawPushToCustomQuery:customEntityType\n               customQueryJson:customQueryJson\n                profileIdField:profileIdField\n                   contentJson:contentJson\n               completionBlock:successBlock\n          errorCompletionBlock:failureBlock\n                      cbObject:nil];\n'))),(0,a.kt)(f,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'String customEntityType = "athletes";\nString customQueryJson = "{ \\"data.totalGoals\\": { \\"$gte\\": 10 } }";\nString profileIdField = "ownerId";\nString contentJson = "{ \\"fcmContent\\": { \\"notification\\": { \\"body\\": \\"content of message\\", \\"title\\": \\"message title\\" }, \\"data\\": { \\"customfield1\\": \\"customValue1\\", \\"customfield2\\": \\"customValue2\\" }, \\"priority\\": \\"normal\\" }, \\"iosContent\\": { \\"aps\\": { \\"alert\\": { \\"body\\": \\"content of message\\", \\"title\\": \\"message title\\" }, \\"badge\\": 0, \\"sound\\": \\"gggg\\" } }, \\"facebookContent\\": { \\"template\\": \\"content of message\\" } }";\nthis; // implements IServerCallback\n\n_bc.getPushNotificationService().sendRawPushToCustomQuery(customEntityType, customQueryJson, profileIdField, contentJson, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n  System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n  System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,a.kt)(f,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'var customEntityType = "athletes";\nvar customQueryJson = {\n  "data.totalGoals": {\n    "$gte": 10\n  }\n};\nvar profileIdField = "ownerId";\nvar contentJson = {\n  "fcmContent": {\n    "notification": {\n      "body": "content of message",\n      "title": "message title"\n    },\n    "data": {\n      "customfield1": "customValue1",\n      "customfield2": "customValue2"\n    },\n    "priority": "normal"\n  },\n  "iosContent": {\n    "aps": {\n      "alert": {\n        "body": "content of message",\n        "title": "message title"\n      },\n      "badge": 0,\n      "sound": "gggg"\n    }\n  },\n  "facebookContent": {\n    "template": "content of message"\n  }\n};\n\n_bc.pushNotification.sendRawPushToCustomQuery(customEntityType, customQueryJson, profileIdField, contentJson, result =>\n{\n  var status = result.status;\n  console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,a.kt)(f,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cfscript"},'var customEntityType = "athletes";\nvar customQueryJson = {\n  "data.totalGoals": {\n    "$gte": 10\n  }\n};\nvar profileIdField = "ownerId";\nvar contentJson = {\n  "fcmContent": {\n    "notification": {\n      "body": "content of message",\n      "title": "message title"\n    },\n    "data": {\n      "customfield1": "customValue1",\n      "customfield2": "customValue2"\n    },\n    "priority": "normal"\n  },\n  "iosContent": {\n    "aps": {\n      "alert": {\n        "body": "content of message",\n        "title": "message title"\n      },\n      "badge": 0,\n      "sound": "gggg"\n    }\n  },\n  "facebookContent": {\n    "template": "content of message"\n  }\n};\nvar pushNotificationProxy = bridge.getPushNotificationServiceProxy();\n\nvar postResult = pushNotificationProxy.sendRawPushToCustomQuery(customEntityType, customQueryJson, profileIdField, contentJson);\nif (postResult.status == 200) {\n  // Success!\n}\n'))),(0,a.kt)(f,{value:"r",label:"Raw",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-r"},'{\n  "service": "pushNotification",\n  "operation": "SEND_RAW_PUSH_TO_CUSTOM_QUERY",\n  "data":\n  {\n    "customEntityType": "athletes",\n    "customQueryJson": {\n      "data.totalGoals": {\n        "$gte": 10\n      }\n    },\n    "profileIdField": "ownerId",\n    "contentJson": {\n      "fcmContent": {\n        "notification": {\n          "body": "content of message",\n          "title": "message title"\n        },\n        "data": {\n          "customfield1": "customValue1",\n          "customfield2": "customValue2"\n        },\n        "priority": "normal"\n      },\n      "iosContent": {\n        "aps": {\n          "alert": {\n            "body": "content of message",\n            "title": "message title"\n          },\n          "badge": 0,\n          "sound": "gggg"\n        }\n      },\n      "facebookContent": {\n        "template": "content of message"\n      }\n    }\n  }\n}\n'))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"JSON Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "status" : 200,\n  "data" : {}\n}\n'))),(0,a.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"customEntityType"),(0,a.kt)("td",{parentName:"tr",align:null},"Entity type identifying the applicable custom collection.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"customQueryJson"),(0,a.kt)("td",{parentName:"tr",align:null},"JSON query to be applied to the custom collection.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"profileIdField"),(0,a.kt)("td",{parentName:"tr",align:null},"Name of field in custom collection that contains the user's brainCloud profile Id. For owned custom collections, this would be ",(0,a.kt)("inlineCode",{parentName:"td"},"ownerId"),", but for unowned custom collections this would be something like ",(0,a.kt)("inlineCode",{parentName:"td"},"data.bcProfileId"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"contentJson"),(0,a.kt)("td",{parentName:"tr",align:null},"JSON containing applicable ",(0,a.kt)("inlineCode",{parentName:"td"},"fcmContent"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"iosContent")," and/or ",(0,a.kt)("inlineCode",{parentName:"td"},"facebookContent"),". At least one is required.")))))}y.isMDXComponent=!0}}]);