"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[38021],{3905:(e,r,a)=>{a.d(r,{Zo:()=>i,kt:()=>b});var t=a(67294);function n(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function o(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?o(Object(a),!0).forEach((function(r){n(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function s(e,r){if(null==e)return{};var a,t,n=function(e,r){if(null==e)return{};var a,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||(n[a]=e[a]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=t.createContext({}),c=function(e){var r=t.useContext(d),a=r;return e&&(a="function"==typeof e?e(r):l(l({},r),e)),a},i=function(e){var r=c(e.components);return t.createElement(d.Provider,{value:r},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var a=e.components,n=e.mdxType,o=e.originalType,d=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),p=c(a),m=n,b=p["".concat(d,".").concat(m)]||p[m]||u[m]||o;return a?t.createElement(b,l(l({ref:r},i),{},{components:a})):t.createElement(b,l({ref:r},i))}));function b(e,r){var a=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=m;var s={};for(var d in r)hasOwnProperty.call(r,d)&&(s[d]=r[d]);s.originalType=e,s[p]="string"==typeof e?e:n,l[1]=s;for(var c=2;c<o;c++)l[c]=a[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},37313:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var t=a(87462),n=(a(67294),a(3905));const o={},l="GetPlayerScores",s={unversionedId:"api/capi/leaderboard/getplayerscores",id:"api/capi/leaderboard/getplayerscores",title:"GetPlayerScores",description:"Overview",source:"@site/docs/api/2_capi/leaderboard/getplayerscores.md",sourceDirName:"api/2_capi/leaderboard",slug:"/api/capi/leaderboard/getplayerscores",permalink:"/braincloud-apiref/api/capi/leaderboard/getplayerscores",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/leaderboard/getplayerscores.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671831235,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"GetPlayerScore",permalink:"/braincloud-apiref/api/capi/leaderboard/getplayerscore"},next:{title:"GetPlayerScoresFromLeaderboards",permalink:"/braincloud-apiref/api/capi/leaderboard/getplayerscoresfromleaderboards"}},d={},c=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],i=e=>function(r){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",r)},p=i("PartialServop"),u=i("BrowserWindow"),m=i("Tabs"),b=i("TabItem"),v={toc:c};function g(e){let{components:r,...a}=e;return(0,n.kt)("wrapper",(0,t.Z)({},v,a,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"getplayerscores"},"GetPlayerScores"),(0,n.kt)("h2",{id:"overview"},"Overview"),(0,n.kt)("p",null,"Retrieves up to maxResults scores data for user for arcade-style leaderboard."),(0,n.kt)(p,{service_name:"leaderboard",operation_name:"GET_PLAYER_SCORES",mdxType:"PartialServop"}),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)(u,{mdxType:"BrowserWindow"},(0,n.kt)(m,{mdxType:"Tabs"},(0,n.kt)(b,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'string leaderboardId = "anArcadeLeaderboardId";\nint versionId = -1;\nint maxResults = 10;\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.LeaderboardService.GetPlayerScores(leaderboardId, versionId, maxResults, successCallback, failureCallback);\n'))),(0,n.kt)(b,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *leaderboardId = "anArcadeLeaderboardId";\nint versionId = -1;\nint maxResults = 10;\n_bc->getLeaderboardService()->getPlayerScores(leaderboardId, versionId, maxResults, this);\n'))),(0,n.kt)(b,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *leaderboardId = @"anArcadeLeaderboardId";\nint versionId = -1;\nint maxResults = 10;\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc leaderboardService] getPlayerScores:leaderboardId\n                  versionId:versionId\n                 maxResults:maxResults\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,n.kt)(b,{value:"java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String leaderboardId = "anArcadeLeaderboardId";\nint versionId = -1;\nint maxResults = 10;\nthis; // implements IServerCallback\n\n_bc.getLeaderboardService().getPlayerScores(leaderboardId, versionId, maxResults, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,n.kt)(b,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'var leaderboardId = "anArcadeLeaderboardId";\nvar versionId = -1;\nvar maxResults = 10;\n_bc.leaderboard.getPlayerScores(leaderboardId, versionId, maxResults, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,n.kt)(b,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cfscript"},'var leaderboardId = "anArcadeLeaderboardId";\nvar versionId = -1;\nvar maxResults = 10;\nvar leaderboardProxy = bridge.getLeaderboardServiceProxy();\n\nvar postResult = leaderboardProxy.getPlayerScores(leaderboardId, versionId, maxResults);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,n.kt)(b,{value:"r",label:"Raw",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "leaderboard",\n    "operation": "GET_PLAYER_SCORES",\n    "data": {\n        "leaderboardId": "anArcadeLeaderboardId",\n        "versionId": -1,\n        "maxResults": 10\n    }\n}\n'))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"JSON Response"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "versionId": 1,\n    "scores": [\n      {\n        "score": 10101,\n        "data": {\n          "nickname": "batman"\n        },\n        "createdAt": 1613678944374,\n        "updatedAt": 1613678944374\n      },\n      {\n        "score": 101,\n        "data": {\n          "nickname": "batman"\n        },\n        "createdAt": 1613678939147,\n        "updatedAt": 1613678939147\n      },\n      {\n        "score": 10,\n        "data": {\n          "nickname": "batman"\n        },\n        "createdAt": 1613678933679,\n        "updatedAt": 1613678933679\n      }\n    ],\n    "leaderboardId": "anArcadeLeaderboardId"\n  },\n  "status": 200\n}\n'))),(0,n.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"leaderboardId"),(0,n.kt)("td",{parentName:"tr",align:null},"The leaderboard to retrieve the score from.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"versionId"),(0,n.kt)("td",{parentName:"tr",align:null},"The version of the leaderboard. Use -1 to specify the currently active leaderboard version.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"maxResults"),(0,n.kt)("td",{parentName:"tr",align:null},"The maximum number of player scores to retrieve.")))))}g.isMDXComponent=!0}}]);