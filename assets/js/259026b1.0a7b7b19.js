"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[33723],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},s="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),s=d(n),c=r,u=s["".concat(p,".").concat(c)]||s[c]||b[c]||l;return n?a.createElement(u,o(o({ref:t},m),{},{components:n})):a.createElement(u,o({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[s]="string"==typeof e?e:r,o[1]=i;for(var d=2;d<l;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},11167:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const l={},o="Lobby",i={unversionedId:"api/capi/lobby/index",id:"api/capi/lobby/index",title:"Lobby",description:"Overview",source:"@site/docs/api/2_capi/lobby/index.md",sourceDirName:"api/2_capi/lobby",slug:"/api/capi/lobby/",permalink:"/braincloud-apiref/api/capi/lobby/",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/lobby/index.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672194346,formattedLastUpdatedAt:"Dec 28, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"SysResetNeverLeaderboard",permalink:"/braincloud-apiref/api/capi/leaderboard/sysresetneverleaderboard"},next:{title:"CancelFindRequest",permalink:"/braincloud-apiref/api/capi/lobby/cancelfindrequest"}},p={},d=[{value:"Overview",id:"overview",level:2},{value:"Key concepts",id:"key-concepts",level:3},{value:"API Summary",id:"api-summary",level:3},{value:"Online Matchmaking",id:"online-matchmaking",level:3},{value:"Lobby Experience",id:"lobby-experience",level:3},{value:"Room Service Integration",id:"room-service-integration",level:3},{value:"Lobby Events",id:"lobby-events",level:3},{value:"Common Event Structures",id:"common-event-structures",level:3},{value:"<code>lobbyTypeDef</code>",id:"lobbytypedef",level:3},{value:"<code>members</code>",id:"members",level:3},{value:"<code>settings</code>",id:"settings",level:3},{value:"Search Algorithms",id:"search-algorithms",level:3},{value:"<code>ranged-percent</code>",id:"ranged-percent",level:3},{value:"<code>ranged-absolute</code>",id:"ranged-absolute",level:3},{value:"<code>alignment</code>",id:"alignment",level:3}],m=(s="DocCardList",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var s;const b={toc:d};function c(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,a.Z)({},b,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lobby"},"Lobby"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"Lobby Service")," works together with custom ",(0,r.kt)("strong",{parentName:"p"},"Room Servers")," to provide multi-user experiences (i.e. online games, shared streaming, etc.) to groups of participants."),(0,r.kt)("p",null,"It is available to apps that have ",(0,r.kt)("strong",{parentName:"p"},"brainCloud RTT")," enabled."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You configure ",(0,r.kt)("em",null,"Lobby Types")," in the portal under ",(0,r.kt)("strong",null,"Design | Multiplayer | Lobbies"),".")),(0,r.kt)("h3",{id:"key-concepts"},"Key concepts"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Online Multiplayer Process",src:n(80591).Z,width:"429",height:"170"})),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Lobbies")," are used to gather up users prior to launching shared experiences via ",(0,r.kt)("em",{parentName:"p"},"Room Servers"),". Users can be added to teams, indicate their ready status, and adjust personal and room settings before the experience starts."),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"Lobby Service")," also offers highly configurable ",(0,r.kt)("em",{parentName:"p"},"Online Matchmaking")," - to quickly and efficiently pair users up together."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"For more information on Lobby Concepts, see the ",(0,r.kt)("a",{parentName:"em",href:"https://getbraincloud.com/apidocs/api-modules/multiplayer/lobbies/"},"Lobby Overview")," page.")),(0,r.kt)("h3",{id:"api-summary"},"API Summary"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"DISBANDED")," event example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json-doc"},'{\n    "service": "lobby",\n    "operation": "DISBANDED",\n    "data": {\n        "lobbyId": "22819:unranked:406",\n        "reason": {\n            "code": 80101,\n            "desc": "Room successfully launched"\n        }\n    }\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"JOIN_FAIL")," event example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json-doc"},'{\n    "service": "lobby",\n    "operation": "JOIN_FAIL",\n    "data": {\n        "lobbyType": "4v4",\n        "reason": {\n            "code": 80200,\n            "desc": "No lobbies found matching criteria"\n        }\n    }\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"MEMBER_JOIN")," event example (",(0,r.kt)("em",{parentName:"p"},"click orange bar below to expand"),")")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json-doc"},'{\n    "service": "lobby",\n    "operation": "MEMBER_JOIN",\n    "data": {\n        "lobbyId": "22819:unranked:406",\n        "currentTime": 1549658965234,\n        "lobby": {\n            "state": "setup",\n            "owner": "f6fa3e0e-6aac-497a-84e1-c8db6f545c12",\n            "rating": 0,\n            "lobbyTypeDef": {},\n            "settings": {},\n            "version": 1,\n            "timetable": {\n                "createdAt": 1549658965234,\n                "early": 1549658965234,\n                "onTime": 1549659055234,\n                "tooLate": 1549659145234\n            },\n            "numMembers": 1,\n            "members": []\n        },\n        "member": {\n            "profileId": "f6fa3e0e-6aac-497a-84e1-c8db6f545c12",\n            "name": "David",\n            "pic": "",\n            "rating": 0,\n            "team": "player1",\n            "isReady": true,\n            "extra": {},\n            "cxId": "22819:f6fa3e0e-6aac-497a-84e1-c8db6f545c12:bvm2ga9aelaigkbdrojp3ifjrp"\n        }\n    }\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"MEMBER_LEFT")," event example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json-doc"},'{\n    "service": "lobby",\n    "operation": "MEMBER_LEFT",\n    "data": {\n        "lobbyId": "22979:4v4:1387",\n        "lobby": {\n            "owner": "d8297230-6e7b-4bad-9c66-5371eb5c101b",\n            "version": 1,\n            "numMembers": 1,\n            "members": []\n        },\n        "member": {\n            "profileId": "24da7a7a-8e78-45a2-8350-30ad41c5372b",\n            "name": "Daivuk",\n            "pic": "",\n            "rating": 0,\n            "team": "green",\n            "isReady": false,\n            "extra": {\n                "loadout": "tank"\n            },\n            "cxId": "22979:24da7a7a-8e78-45a2-8350-30ad41c5372b:a4nto6vb672qtq1rpa1pecba48"\n        },\n        "reason": {\n            "code": 80000,\n            "desc": "Left by choice"\n        }\n    }\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"MEMBER_UPDATE")," event example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json-doc"},'{\n    "service": "lobby",\n    "operation": "MEMBER_UPDATE",\n    "data": {\n        "lobbyId": "22979:4v4:662",\n        "member": {\n            "profileId": "841cf9fa-1a93-4a7a-a36b-e5833f7e239b",\n            "name": "ste123",\n            "pic": "",\n            "rating": 0,\n            "team": "red",\n            "isReady": true,\n            "extra": {\n                "loadout": "scout"\n            },\n            "cxId": "22979:841cf9fa-1a93-4a7a-a36b-e5833f7e239b:acturqk5p5qaenvio8msecob9d"\n        }\n    }\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"ROOM_ASSIGNED")," event example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json-doc"},'{\n    "service": "lobby",\n    "operation": "ROOM_ASSIGNED",\n    "data": {\n        "lobbyId": "22819:unranked:406",\n        "connectData": {\n            "roomId": "22819:unranked:406",\n            "url": "207.219.200.99",\n            "port": 9307,\n            "wsPort": 9308\n        },\n        "passcode": "978b63"\n    }\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"ROOM_READY")," event example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json-doc"},'{\n    "service": "lobby",\n    "operation": "ROOM_READY",\n    "data": {\n        "lobbyId": "22819:unranked:406",\n        "connectData": {\n            "roomId": "22819:unranked:406",\n            "url": "207.219.200.99",\n            "port": 9307,\n            "wsPort": 9308\n        },\n        "passcode": "978b63"\n    }\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"SETTINGS_UPDATE")," event example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json-doc"},'{\n    "service": "lobby",\n    "operation": "SETTINGS_UPDATE",\n    "data": {\n        "lobbyId": "22979:4v4:662",\n        "lobby": {\n            "settings": {\n                "gameTime": 300\n            },\n            "version": 1\n        },\n        "currentTime": 1549916254804\n    }\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"STARTING")," event example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json-doc"},'{\n    "service": "lobby",\n    "operation": "STARTING",\n    "data": {\n        "lobbyId": "22819:unranked:406",\n        "lobby": {\n            "state": "starting",\n            "owner": "f6fa3e0e-6aac-497a-84e1-c8db6f545c12",\n            "settings": {},\n            "version": 1,\n            "numMembers": 2,\n            "members": []\n        }\n    }\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"STATUS_UPDATE")," event example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json-doc"},'{\n    "service": "lobby",\n    "operation": "STATUS_UPDATE",\n    "data": {\n        "lobbyId": "22819:unranked:406",\n        "lobby": {\n            "state": "early",\n            "owner": "f6fa3e0e-6aac-497a-84e1-c8db6f545c12",\n            "version": 1,\n            "numMembers": 2,\n            "members": []\n        }\n    }\n}\n\n')),(0,r.kt)("p",null,"The Lobby Service provides APIs for ",(0,r.kt)("em",{parentName:"p"},"Online Matchmaking"),", ",(0,r.kt)("em",{parentName:"p"},"Lobby Experience")," and ",(0,r.kt)("em",{parentName:"p"},"Room Server Integration"),"."),(0,r.kt)("h3",{id:"online-matchmaking"},"Online Matchmaking"),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"Online Matchmaking")," APIs allow users to find and/or create lobbies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/api/capi/lobby/findlobby"},"FindLobby")," - Find a lobby to meet the provided specs.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/api/capi/lobby/createlobby"},"CreateLobby")," - Create a lobby.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/api/capi/lobby/findorcreatelobby"},"FindOrCreateLobby")," - Search for lobby; create one if nothing suitable is found.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/api/capi/lobby/joinlobby"},"JoinLobby")," - Adds the caller to the given lobby instance.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/api/capi/lobby/getregionsforlobbies"},"GetRegionsForLobbies")," - Retrieves the region settings for each of the given lobby types.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/api/capi/lobby/pingregions"},"PingRegions")," - Retrieves associated PingData averages to be used with all associated WithPingData APIs.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/api/capi/lobby/findlobbywithpingdata"},"FindLobbyWithPingData")," - Adds the caller to the lobby entry queue.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/api/capi/lobby/createlobbywithpingdata"},"FindOrCreateLobbyPingData")," - Creates an instance of a lobby.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/api/capi/lobby/findorcreatelobbywithpingdata"},"FindOrCreateLobbyWithPingData")," - Adds the caller to the lobby entry queue and will create a lobby if none are found.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/api/capi/lobby/joinlobbywithpingdata"},"JoinLobbyWithPingData")," - Adds the caller to the given lobby instance."))),(0,r.kt)("h3",{id:"lobby-experience"},"Lobby Experience"),(0,r.kt)("p",null,"The following APIs allow users to interact with lobby's once they have joined:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/capi/lobby/getlobbydata"},"GetLobbyData")," - request info about the lobby"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/capi/lobby/updateready"},"UpdateReady")," - update the user's ready-status"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/capi/lobby/updatesettings"},"UpdateSettings")," - update the lobby's setting data (owner only)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/capi/lobby/switchteam"},"SwitchTeam")," - switch teams"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/capi/lobby/sendsignal"},"SendSignal")," - send an event to all other lobby members"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/capi/lobby/leavelobby"},"LeaveLobby")," - leave the lobby"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/capi/lobby/removemember"},"RemoveMember")," - kicks another member from the lobby")),(0,r.kt)("h3",{id:"room-service-integration"},"Room Service Integration"),(0,r.kt)("p",null,"The following APIs are called by Room Service providers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/capi/lobby/sysroomready"},"SysRoomReady")," - the room experience is ready to launch"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/capi/lobby/sysroomcancelled"},"SysRoomCancelled")," - the room server request cannot be fulfilled")),(0,r.kt)("h3",{id:"lobby-events"},"Lobby Events"),(0,r.kt)("p",null,"These APIs can result in the following events being sent to lobby members."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Event"),(0,r.kt)("th",{parentName:"tr",align:null},"Data"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MATCHMAKING_IN_PROGRESS"),(0,r.kt)("td",{parentName:"tr",align:null},"lobbyType, step, maxSteps, minRating, maxRating, lobbiesInRange"),(0,r.kt)("td",{parentName:"tr",align:null},"Start provisioning lobby. Sent to everyone as they are being processed for each marchmaking round.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MEMBER_JOIN"),(0,r.kt)("td",{parentName:"tr",align:null},"lobbyId, currentTime, lobby, memeber"),(0,r.kt)("td",{parentName:"tr",align:null},"A new member has joined the lobby. Sent to everyone, including the user who joined.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JOIN_FAIL"),(0,r.kt)("td",{parentName:"tr",align:null},"lobbyType, reason"),(0,r.kt)("td",{parentName:"tr",align:null},"Could not locate a lobby that satisfies the filter criteria in the specified timeframe. The returned ",(0,r.kt)("inlineCode",{parentName:"td"},"reason")," is mapped with ",(0,r.kt)("inlineCode",{parentName:"td"},"code")," (including ",(0,r.kt)("inlineCode",{parentName:"td"},"NO_LOBBIES_FOUND"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"FIND_REQUEST_CANCELLED"),") and ",(0,r.kt)("inlineCode",{parentName:"td"},"desc"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MEMBER_LEFT"),(0,r.kt)("td",{parentName:"tr",align:null},"lobbyId, lobby, member, reason"),(0,r.kt)("td",{parentName:"tr",align:null},"A member has left the lobby. Sent to everyone, including the user who left. The returned ",(0,r.kt)("inlineCode",{parentName:"td"},"reason")," is mapped with ",(0,r.kt)("inlineCode",{parentName:"td"},"code")," (including ",(0,r.kt)("inlineCode",{parentName:"td"},"LEFT_BY_CHOICE"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"EVICTED"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"LOST_CONNECTION"),") and ",(0,r.kt)("inlineCode",{parentName:"td"},"desc"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MEMBER_UPDATE"),(0,r.kt)("td",{parentName:"tr",align:null},"lobbyId, lobby,  member"),(0,r.kt)("td",{parentName:"tr",align:null},"A member has updated their data, which may include switching teams, thus why all of lobbyData is returned.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SIGNAL"),(0,r.kt)("td",{parentName:"tr",align:null},"lobbyId, from (optional), signalData"),(0,r.kt)("td",{parentName:"tr",align:null},"This message allows players in lobbies to send messages to all other players.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SETTINGS_UPDATE"),(0,r.kt)("td",{parentName:"tr",align:null},"lobbyId, currentTime, lobby"),(0,r.kt)("td",{parentName:"tr",align:null},"Changes to the settings that will be used to start the room.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"STATUS_UPDATE"),(0,r.kt)("td",{parentName:"tr",align:null},"lobbyId, lobby"),(0,r.kt)("td",{parentName:"tr",align:null},"The status of the overall lobby has changed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"STARTING"),(0,r.kt)("td",{parentName:"tr",align:null},"lobbyId, lobby"),(0,r.kt)("td",{parentName:"tr",align:null},"This message is sent once all the hosted server launch conditions have been met and a server instance is being started.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ROOM_ASSIGNED"),(0,r.kt)("td",{parentName:"tr",align:null},"lobbyId, connectData, passcode"),(0,r.kt)("td",{parentName:"tr",align:null},"A room has been allocated for this lobby. ",(0,r.kt)("inlineCode",{parentName:"td"},"connectData")," is likely incompolete. Each lobby member receives a random alphanumeric passcode for use in connecting to the room server to guard against impersonation.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ROOM_READY"),(0,r.kt)("td",{parentName:"tr",align:null},"lobbyId, connectData, passcode"),(0,r.kt)("td",{parentName:"tr",align:null},"Go connect to the specified room. Will normally be immediately followed by DISBANDED. The same passcode as sent in ROOM_ASSIGNED will be repeated here as well.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DISBANDED"),(0,r.kt)("td",{parentName:"tr",align:null},"lobbyId, reason, msg (optional)"),(0,r.kt)("td",{parentName:"tr",align:null},"The lobby has been terminated. The returned ",(0,r.kt)("inlineCode",{parentName:"td"},"reason")," is mapped with ",(0,r.kt)("inlineCode",{parentName:"td"},"code")," (including ",(0,r.kt)("inlineCode",{parentName:"td"},"TIMEOUT"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"ROOM_READY"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"ROOM_READY_TIMEOUT"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"ROOM_CANCELLED"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"ERROR_ASSIGNING_ROOM"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"ERROR_LAUNCHING_ROOM"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"HOSTING_NOT_ENABLED"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"SERVER_MAX_REACHED"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"BY_REQUEST"),") and ",(0,r.kt)("inlineCode",{parentName:"td"},"desc"),".")))),(0,r.kt)("p",null,"An example of using the returned ",(0,r.kt)("inlineCode",{parentName:"p"},"reason code")," of DISBANDED:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"if (result.data.reason.code != this.bc.reasonCodes.RTT_ROOM_READY)\n{\n    // Disbanded for any other reason than ROOM_READY, means we failed to launch the game.\n    this.onGameScreenClose()\n}\n")),(0,r.kt)("h3",{id:"common-event-structures"},"Common Event Structures"),(0,r.kt)("p",null,"The following structures are common to multiple event types:"),(0,r.kt)("h3",{id:"lobbytypedef"},(0,r.kt)("inlineCode",{parentName:"h3"},"lobbyTypeDef")),(0,r.kt)("p",null,"The configured meta-data for the lobby type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    lobbyTypeDef: {\n        "roomConfig": null,\n        "lobbyTypeId": "unranked",\n        "teams": {\n            "player1": {\n                "minUsers": 1,\n                "maxUsers": 1,\n                "autoAssign": true,\n                "code": "player1"\n            },\n            "player2": {\n                "minUsers": 1,\n                "maxUsers": 1,\n                "autoAssign": true,\n                "code": "player2"\n            }\n        },\n        "rules": {\n            "allowEarlyStartWithoutMax": false,\n            "forceOnTimeStartWithoutReady": true,\n            "onTimeStartSecs": 90,\n            "everyReadyMinPercent": 100,\n            "everyReadyMinNum": 2,\n            "earliestStartSecs": 0,\n            "tooLateSecs": 180\n        },\n        "desc": "Unranked match"\n    }\n}\n')),(0,r.kt)("h3",{id:"members"},(0,r.kt)("inlineCode",{parentName:"h3"},"members")),(0,r.kt)("p",null,"The list of members in the lobby, and their status:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "members": [\n        {\n            "profileId": "f6fa3e0e-6aac-497a-84e1-c8db6f545c12",\n            "name": "david",\n            "pic": "",\n            "rating": 0,\n            "team": "player2",\n            "isReady": true,\n            "extra": {},\n            "cxId": "22819:f6fa3e0e-6aac-497a-84e1-c8db6f545c12:vn0vnr7li5ll6t7gc0om18hksg"\n        },\n        {\n            "profileId": "1dab1250-facb-419a-80cf-3d2de4e91e0b",\n            "name": "david2",\n            "pic": "",\n            "rating": 0,\n            "team": "player1",\n            "isReady": true,\n            "extra": {},\n            "cxId": "22819:1dab1250-facb-419a-80cf-3d2de4e91e0b:bkr44a0ssbd0q3ae3r2i2refjh"\n        }\n    ]\n}\n')),(0,r.kt)("h3",{id:"settings"},(0,r.kt)("inlineCode",{parentName:"h3"},"settings")),(0,r.kt)("p",null,"The developer-defined, dynamic settings for this lobby instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "settings": {\n        "gameTime": 300,\n        "isPlaying": 0,\n        "mapLayout": 0,\n        "mapSize": 1,\n        "gameName": "ste123\'s Room",\n        "maxPlayers": 8,\n        "lightPosition": 0,\n        "minLevel": 0,\n        "maxLevel": 50\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"The json above is just an example - it can be whatever the developer decides.")),(0,r.kt)("h3",{id:"search-algorithms"},"Search Algorithms"),(0,r.kt)("p",null,"When looking for a lobby."),(0,r.kt)("h3",{id:"ranged-percent"},(0,r.kt)("inlineCode",{parentName:"h3"},"ranged-percent")),(0,r.kt)("p",null,"Ranges provided are interpreted as percentages to be applied to the user's rating for matchmaking."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n   "rating" : 1200,\n   "algo":{  \n      "strategy":"ranged-percent",\n      "alignment":"center",\n      "ranges":[  \n         10,\n         20,\n         80\n      ]\n   }\n}\n')),(0,r.kt)("h3",{id:"ranged-absolute"},(0,r.kt)("inlineCode",{parentName:"h3"},"ranged-absolute")),(0,r.kt)("p",null,"Ranges provided are interpreted as absolute values to add/subtract from the user's rating when calculating the range for matchmaking"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{ \n   "rating" : 76, \n   "algo":{  \n      "strategy":"ranged-absolute",\n      "alignment":"center",\n      "ranges":[  \n         5,\n         7.5,\n         10\n      ]\n   }\n}\n')),(0,r.kt)("h3",{id:"alignment"},(0,r.kt)("inlineCode",{parentName:"h3"},"alignment")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Alignment"),(0,r.kt)("th",{parentName:"tr",align:null},"Min"),(0,r.kt)("th",{parentName:"tr",align:null},"Max"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"high"),(0,r.kt)("td",{parentName:"tr",align:null},"80"),(0,r.kt)("td",{parentName:"tr",align:null},"100"),(0,r.kt)("td",{parentName:"tr",align:null},"Ensures that lobbies must have skill rating >= to the candidate. Leaves the min equal to player rating, and adds 200% of the range to the max.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mid-high"),(0,r.kt)("td",{parentName:"tr",align:null},"75"),(0,r.kt)("td",{parentName:"tr",align:null},"95"),(0,r.kt)("td",{parentName:"tr",align:null},"Subtracks 50% of the range for the min, and adds 150% of the range to the max.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"center"),(0,r.kt)("td",{parentName:"tr",align:null},"70"),(0,r.kt)("td",{parentName:"tr",align:null},"90"),(0,r.kt)("td",{parentName:"tr",align:null},"Centers the range around the candidiate's rating.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mid-low"),(0,r.kt)("td",{parentName:"tr",align:null},"65"),(0,r.kt)("td",{parentName:"tr",align:null},"85"),(0,r.kt)("td",{parentName:"tr",align:null},"Subtracts 150% of the range for the min, and adds 50% of the range to the max.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"low"),(0,r.kt)("td",{parentName:"tr",align:null},"60"),(0,r.kt)("td",{parentName:"tr",align:null},"80"),(0,r.kt)("td",{parentName:"tr",align:null},"Ensures that lobbies will have skill rating <= to the candidate.  Subtracts 200% of the range from the rating to calculate min, and leaves max as the player rating.")))),(0,r.kt)(m,{mdxType:"DocCardList"}))}c.isMDXComponent=!0},80591:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/online_multiplayer_process_1-79bd7b8a621f5271d4becd59f3844e17.png"}}]);