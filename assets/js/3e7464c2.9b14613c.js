"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[30914],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>y});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),b=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=b(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=b(a),u=n,y=p["".concat(s,".").concat(u)]||p[u]||d[u]||o;return a?r.createElement(y,i(i({ref:t},c),{},{components:a})):r.createElement(y,i({ref:t},c))}));function y(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:n,i[1]=l;for(var b=2;b<o;b++)i[b]=a[b];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},92942:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>b});var r=a(87462),n=(a(67294),a(3905));const o={},i="CreateLobbyWithPingData",l={unversionedId:"api/capi/lobby/createlobbywithpingdata",id:"api/capi/lobby/createlobbywithpingdata",title:"CreateLobbyWithPingData",description:"Overview",source:"@site/docs/api/2_capi/lobby/createlobbywithpingdata.md",sourceDirName:"api/2_capi/lobby",slug:"/api/capi/lobby/createlobbywithpingdata",permalink:"/braincloud-apiref/api/capi/lobby/createlobbywithpingdata",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/lobby/createlobbywithpingdata.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672193365,formattedLastUpdatedAt:"Dec 28, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"CreateLobby",permalink:"/braincloud-apiref/api/capi/lobby/createlobby"},next:{title:"FindLobby",permalink:"/braincloud-apiref/api/capi/lobby/findlobby"}},s={},b=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",t)},p=c("PartialServop"),d=c("BrowserWindow"),u=c("Tabs"),y=c("TabItem"),g={toc:b};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"createlobbywithpingdata"},"CreateLobbyWithPingData"),(0,n.kt)("h2",{id:"overview"},"Overview"),(0,n.kt)("p",null,"Creates an instance of a lobby."),(0,n.kt)("p",null,"Use ",(0,n.kt)("a",{parentName:"p",href:"/api/capi/lobby/pingregions"},"PingRegions")," to generate the ping data."),(0,n.kt)(p,{service_name:"lobby",operation_name:"CREATE_LOBBY_WITH_PING_DATA",mdxType:"PartialServop"}),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)(d,{mdxType:"BrowserWindow"},(0,n.kt)(u,{mdxType:"Tabs"},(0,n.kt)(y,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'string lobbyType = "4v4";\nint rating = 76;\nstring[] otherUserCxIds = { "123456:aaa-bbb-ccc-ddd:asdfjkl" };\nstring settings = "{}";\nbool isReady = false;\nstring extraJson = "{}";\nstring teamCode = "blue";\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.LobbyService.CreateLobbyWithPingData(lobbyType, rating, otherUserCxIds, settings, isReady, extraJson, teamCode, successCallback, failureCallback);\n'))),(0,n.kt)(y,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *lobbyType = "4v4";\nint rating = 76;\nstd::vector<std::string> otherUserCxIds;\notherUserCxIds.push_back("123456:aaa-bbb-ccc-ddd:asdfjkl");\nconst char *settings = "{}";\nbool isReady = false;\nconst char *extraJson = "{}";\nconst char *teamCode = "blue";\n_bc->getLobbyService()->createLobbyWithPingData(lobbyType, rating, otherUserCxIds, settings, isReady, extraJson, teamCode, this);\n'))),(0,n.kt)(y,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *lobbyType = @"4v4";\nint rating = 76;\nNSArray *otherUserCxIds = @[ @"123456:aaa-bbb-ccc-ddd:asdfjkl" ];\nNSString *settings = @"{}";\nbool isReady = false;\nNSString *extraJson = @"{}";\nNSString *teamCode = @"blue";\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc lobbyService] createLobbyWithPingData:lobbyType\n                     rating:rating\n             otherUserCxIds:otherUserCxIds\n                   settings:settings\n                    isReady:isReady\n                  extraJson:extraJson\n                   teamCode:teamCode\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,n.kt)(y,{value:"java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String lobbyType = "4v4";\nint rating = 76;\nString[] otherUserCxIds = { "123456:aaa-bbb-ccc-ddd:asdfjkl" };\nString settings = "{}";\nboolean isReady = false;\nString extraJson = "{}";\nString teamCode = "blue";\nthis; // implements IServerCallback\n\n_bc.getLobbyService().createLobbyWithPingData(lobbyType, rating, otherUserCxIds, settings, isReady, extraJson, teamCode, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,n.kt)(y,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'var lobbyType = "4v4";\nvar rating = 76;\nvar otherUserCxIds = [ "123456:aaa-bbb-ccc-ddd:asdfjkl" ];\nvar settings = {};\nvar isReady = false;\nvar extraJson = {};\nvar teamCode = "blue";\n\n_bc.lobby.createLobbyWithPingData(lobbyType, rating, otherUserCxIds, settings, isReady, extraJson, teamCode, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,n.kt)(y,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cfscript"},'var lobbyType = "4v4";\nvar rating = 76;\nvar otherUserCxIds = [ "123456:aaa-bbb-ccc-ddd:asdfjkl" ];\nvar settings = {};\nvar isReady = false;\nvar extraJson = {};\nvar teamCode = "blue";\nvar pingData = {\n    "ca-central-1": 98,\n    "us-west-1": 123\n};\nvar lobbyProxy = bridge.getLobbyServiceProxy();\n\nvar postResult = lobbyProxy.createLobbyWithPingData(lobbyType, rating, otherUserCxIds, settings, isReady, extraJson, teamCode, pingData);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,n.kt)(y,{value:"r",label:"Raw",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "lobby",\n    "operation": "CREATE_LOBBY_WITH_PING_DATA",\n    "data": {\n        "lobbyType": "4v4",\n        "rating": 76,\n        "otherUserCxIds": [\n            "55555:aaa-bbb-ccc-ddd:asdfjkl"\n        ],\n        "settings": {},\n        "isReady": false,\n        "extraJson": {},\n        "teamCode": "blue",\n        "pingData": {\n            "ca-central-1": 98,\n            "us-west-1": 123\n        }\n    }\n}\n'))))),(0,n.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"lobbyType"),(0,n.kt)("td",{parentName:"tr",align:null},"The type of lobby to look for. Lobby types are defined in the portal.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"rating"),(0,n.kt)("td",{parentName:"tr",align:null},"The skill rating to use for finding the lobby. Provided as a separate parameter because it may not exactly match the user's rating (especially in cases where parties are involved).")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"otherUserCxIds"),(0,n.kt)("td",{parentName:"tr",align:null},"Array of other users (i.e. party members) to add to the lobby as well. Will constrain things so that only lobbies with room for all players will be considered.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"settings"),(0,n.kt)("td",{parentName:"tr",align:null},"Owner settings for this lobby.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"isReady"),(0,n.kt)("td",{parentName:"tr",align:null},"Initial ready-status of this user.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"extraJson"),(0,n.kt)("td",{parentName:"tr",align:null},"Initial extra-data about this user.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"teamCode"),(0,n.kt)("td",{parentName:"tr",align:null},"Preferred team for this user, if applicable. Send ",(0,n.kt)("inlineCode",{parentName:"td"},'""')," or ",(0,n.kt)("inlineCode",{parentName:"td"},"null")," for automatic assignment.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"pingData"),(0,n.kt)("td",{parentName:"tr",align:null},"Ping times for each region available for this lobby type. Can use GET_REGIONS_FOR_LOBBIES to retreive the list of regions for a given lobby type. pingData is automatically passed in on the client.")))))}m.isMDXComponent=!0}}]);