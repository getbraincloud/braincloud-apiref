"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[81145],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>b});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(r),m=a,b=c["".concat(s,".").concat(m)]||c[m]||p[m]||o;return r?n.createElement(b,i(i({ref:t},d),{},{components:r})):n.createElement(b,i({ref:t},d))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},22118:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var n=r(87462),a=(r(67294),r(3905));const o={},i="PostTournamentScoreWithResultsUTC",l={unversionedId:"api/capi/tournament/posttournamentscorewithresultsutc",id:"api/capi/tournament/posttournamentscorewithresultsutc",title:"PostTournamentScoreWithResultsUTC",description:"Overview",source:"@site/docs/api/2_capi/tournament/posttournamentscorewithresultsutc.md",sourceDirName:"api/2_capi/tournament",slug:"/api/capi/tournament/posttournamentscorewithresultsutc",permalink:"/braincloud-apiref/api/capi/tournament/posttournamentscorewithresultsutc",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/tournament/posttournamentscorewithresultsutc.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671809255,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"PostTournamentScoreUTC",permalink:"/braincloud-apiref/api/capi/tournament/posttournamentscoreutc"},next:{title:"SysCreateDivisionSetConfig",permalink:"/braincloud-apiref/api/capi/tournament/syscreatedivisionsetconfig"}},s={},u=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},c=d("PartialServop"),p=d("BrowserWindow"),m=d("Tabs"),b=d("TabItem"),f={toc:u};function k(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"posttournamentscorewithresultsutc"},"PostTournamentScoreWithResultsUTC"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Post the users score to the tournament leaderboard, and returns updated standings."),(0,a.kt)("p",null,"tRank will always be zero in the response of this API call. The value generates after the tournament is complete or on ",(0,a.kt)("code",null,(0,a.kt)("a",{parentName:"p",href:"/api/capi/tournament/viewcurrentreward"},"ViewCurrentReward")),"."),(0,a.kt)(c,{service_name:"tournament",operation_name:"POST_TOURNAMENT_SCORE_WITH_RESULTS",mdxType:"PartialServop"}),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)(p,{mdxType:"BrowserWindow"},(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(b,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'string leaderboardId = "leaderboardId1";\nint score = 0;\nstring jsonData = "{\\"nickname\\":\\"withResults\\"}";\nDateTime roundStartedTime = DateTime.Now;\nSortOrder sortOrder = SortOrder.HIGH_TO_LOW;\nint beforeCount = 3;\nint afterCount = 4;\nint initialScore = 0;\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.TournamentService.PostTournamentScoreWithResultsUTC(leaderboardId, score, jsonData, roundStartedTime, sortOrder, beforeCount, afterCount, initialScore, successCallback, failureCallback);\n'))),(0,a.kt)(b,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *leaderboardId = "leaderboardId1";\nint score = 0;\nconst char *jsonData = "{\\"nickname\\":\\"withResults\\"}";\ntime_t t = time(0);\nconst struct *roundStartedTime = gmtime(&t);\nSortOrder sortOrder = HIGH_TO_LOW;\nint beforeCount = 3;\nint afterCount = 4;\nint initialScore = 0;\n_bc->getTournamentService()->postTournamentScoreWithResultsUTC(leaderboardId, score, jsonData, roundStartedTime, sortOrder, beforeCount, afterCount, initialScore, this);\n'))),(0,a.kt)(b,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *leaderboardId = @"leaderboardId1";\nint score = 0;\nNSString *jsonData = @"{\\"nickname\\":\\"withResults\\"}";\nNSDate *roundStartedTime = [NSDate date];\nSortOrder sortOrder = HIGH_TO_LOW;\nint beforeCount = 3;\nint afterCount = 4;\nint initialScore = 0;\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc tournamentService] postTournamentScoreWithResultsUTC:leaderboardId\n                      score:score\n                   jsonData:jsonData\n           roundStartedTime:roundStartedTime\n                  sortOrder:sortOrder\n                beforeCount:beforeCount\n                 afterCount:afterCount\n               initialScore:initialScore\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,a.kt)(b,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'String leaderboardId = "leaderboardId1";\nint score = 0;\nString jsonData = "{\\"nickname\\":\\"withResults\\"}";\nDate roundStartedTime = new Date(System.currentTimeMillis());\nSortOrder sortOrder = SortOrder.HIGH_TO_LOW;\nint beforeCount = 3;\nint afterCount = 4;\nint initialScore = 0;\nthis; // implements IServerCallback\n\n_bc.getTournamentService().postTournamentScoreWithResults(leaderboardId, score, jsonData, roundStartedTime, sortOrder, beforeCount, afterCount, initialScore, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,a.kt)(b,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'var leaderboardId = "leaderboardId1";\nvar score = 0;\nvar jsonData = {\n    "nickname": "withResults"\n};\nvar roundStartedTime = Date.now();\nvar sortOrder = SortOrder.HIGH_TO_LOW;\nvar beforeCount = 3;\nvar afterCount = 4;\nvar initialScore = 0;\n\n_bc.tournament.postTournamentScoreWithResultsUTC(leaderboardId, score, jsonData, roundStartedTime, sortOrder, beforeCount, afterCount, initialScore, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,a.kt)(b,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cfscript"},'var leaderboardId = "leaderboardId1";\nvar score = 0;\nvar jsonData = {\n    "nickname": "withResults"\n};\nvar roundStartedTime = Date.now();\nvar sortOrder = SortOrder.HIGH_TO_LOW;\nvar beforeCount = 3;\nvar afterCount = 4;\nvar initialScore = 0;\nvar tournamentProxy = bridge.getTournamentServiceProxy();\n\nvar postResult = tournamentProxy.postTournamentScoreWithResultsUTC(leaderboardId, score, jsonData, roundStartedTime, sortOrder, beforeCount, afterCount, initialScore);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,a.kt)(b,{value:"r",label:"Raw",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "tournament",\n    "operation": "POST_TOURNAMENT_SCORE_WITH_RESULTS",\n    "data": {\n        "leaderboardId": "the-leaderboard-id",\n        "score": 0,\n        "data": {\n            "nickname": "withResults"\n        },\n        "roundStartedEpoch": "[[#ts-10000]]",\n        "sort": "HIGH_TO_LOW",\n        "beforeCount": 3,\n        "afterCount": 4,\n        "initialScore": 0\n    }\n}\n'))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"JSON Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": 200,\n    "data": {\n        "postScore": {\n            "createdAt": 1484937347793,\n            "data": null,\n            "leaderboardId": "testTournamentLeaderboard",\n            "playerId": "d271327b-0c33-45cf-8f5f-a62904aae5fb",\n            "previousLeaderboard": {\n                "createdAt": 1484937347793,\n                "data": null,\n                "index": 0,\n                "name": "UserA_CPP_23167710",\n                "pictureUrl": "https://some.domain.com/mypicture.jpg",\n                "playerId": "d271327b-0c33-45cf-8f5f-a62904aae5fb",\n                "rank": 1,\n                "score": 100,\n                "summaryFriendData": {\n                    "field": "value"\n                },\n                "tCode": "testTournament",\n                "tNotifiedAt": 0,\n                "tRank": 0,\n                "updatedAt": 1484937347793\n            },\n            "previousScore": 100,\n            "score": 100,\n            "tClaimedAt": 0,\n            "tCode": "testTournament",\n            "tNotifiedAt": 0,\n            "tRank": 0,\n            "updatedAt": 1484937348565,\n            "versionId": 18\n        },\n        "scores": [{\n            "createdAt": 1484937347793,\n            "data": null,\n            "index": 0,\n            "name": "UserA_CPP_23167710",\n            "pictureUrl": "https://some.domain.com/mypicture.jpg",\n            "playerId": "d271327b-0c33-45cf-8f5f-a62904aae5fb",\n            "rank": 1,\n            "score": 100,\n            "summaryFriendData": {\n                "field": "value"\n            },\n            "tCode": "testTournament",\n            "tNotifiedAt": 0,\n            "tRank": 0,\n            "updatedAt": 1484937348565\n        }]\n    }\n}\n'))),(0,a.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"leaderboardId"),(0,a.kt)("td",{parentName:"tr",align:null},"The leaderboard for the tournament")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"score"),(0,a.kt)("td",{parentName:"tr",align:null},"The score to post")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"jsonData"),(0,a.kt)("td",{parentName:"tr",align:null},"Optional data attached to the leaderboard entry")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"roundStartedTime"),(0,a.kt)("td",{parentName:"tr",align:null},"Time the user started the match resulting in the score being posted (in millis UTC)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"sort"),(0,a.kt)("td",{parentName:"tr",align:null},'Sort key Sort order of page.  ("HIGH_TO_LOW" or "LOW_TO_HIGH")')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"beforeCount"),(0,a.kt)("td",{parentName:"tr",align:null},"The count of number of players before the current player to include.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"afterCount"),(0,a.kt)("td",{parentName:"tr",align:null},"The count of number of players after the current player to include.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"initialScore"),(0,a.kt)("td",{parentName:"tr",align:null},"The initial score for players first joining a tournament. Usually 0, unless leaderboard is LOW_VALUE.")))))}k.isMDXComponent=!0}}]);