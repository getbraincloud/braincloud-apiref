"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[94413],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>b});var r=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=r.createContext({}),s=function(e){var a=r.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):d(d({},a),e)),t},c=function(e){var a=s(e.components);return r.createElement(l.Provider,{value:a},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=s(t),m=n,b=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return t?r.createElement(b,d(d({ref:a},c),{},{components:t})):r.createElement(b,d({ref:a},c))}));function b(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=t.length,d=new Array(o);d[0]=m;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i[p]="string"==typeof e?e:n,d[1]=i;for(var s=2;s<o;s++)d[s]=t[s];return r.createElement.apply(null,d)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7194:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>d,default:()=>T,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=t(87462),n=(t(67294),t(3905));const o={},d="PostScoreToDynamicLeaderboardDaysUTC",i={unversionedId:"api/capi/leaderboard/postscoretodynamicleaderboarddaysutc",id:"api/capi/leaderboard/postscoretodynamicleaderboarddaysutc",title:"PostScoreToDynamicLeaderboardDaysUTC",description:"Overview",source:"@site/docs/api/2_capi/leaderboard/postscoretodynamicleaderboarddaysutc.md",sourceDirName:"api/2_capi/leaderboard",slug:"/api/capi/leaderboard/postscoretodynamicleaderboarddaysutc",permalink:"/braincloud-apiref/api/capi/leaderboard/postscoretodynamicleaderboarddaysutc",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/leaderboard/postscoretodynamicleaderboarddaysutc.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672193365,formattedLastUpdatedAt:"Dec 28, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"PostScoreToDynamicGroupLeaderboardUTC",permalink:"/braincloud-apiref/api/capi/leaderboard/postscoretodynamicgroupleaderboardutc"},next:{title:"PostScoreToDynamicLeaderboardUTC",permalink:"/braincloud-apiref/api/capi/leaderboard/postscoretodynamicleaderboardutc"}},l={},s=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],c=e=>function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",a)},p=c("PartialServop"),u=c("BrowserWindow"),m=c("Tabs"),b=c("TabItem"),y={toc:s};function T(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},y,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"postscoretodynamicleaderboarddaysutc"},"PostScoreToDynamicLeaderboardDaysUTC"),(0,n.kt)("h2",{id:"overview"},"Overview"),(0,n.kt)("p",null,"Post the players score to the given social leaderboard with a rotation type of DAYS. You can optionally send a user-defined JSON string of data with the posted score. This string could include information relevant to the posted score."),(0,n.kt)("p",null,"The passed in leaderboard config data is to dynamically create the leaderboard if it does not exist already."),(0,n.kt)(p,{service_name:"leaderboard",operation_name:"POST_SCORE_DYNAMIC",mdxType:"PartialServop"}),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)(u,{mdxType:"BrowserWindow"},(0,n.kt)(m,{mdxType:"Tabs"},(0,n.kt)(b,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'string leaderboardId = "default";\nint score = 10;\nstring jsonData = "{\\"nickname\\":\\"batman\\"}";\nstring leaderboardType = "HIGH_VALUE";\nstring rotationType = "DAYS";\nInt64 rotationReset = DateTime.Now;\nint retainedCount = 2;\nint numDaysToRotate = 4;\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.LeaderboardService.PostScoreToDynamicLeaderboardDaysUTC(leaderboardId, score, jsonData, leaderboardType, rotationType, rotationReset, retainedCount, numDaysToRotate, successCallback, failureCallback);\n'))),(0,n.kt)(b,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *leaderboardId = "default";\nint score = 10;\nconst char *jsonData = "{\\"nickname\\":\\"batman\\"}";\nconst char *leaderboardType = "HIGH_VALUE";\nconst char *rotationType = "DAYS";\ntime_t t = time(0);\nconst struct *rotationReset = gmtime(&t);\nint retainedCount = 2;\nint numDaysToRotate = 4;\n_bc->getLeaderboardService()->postScoreToDynamicLeaderboardDaysUTC(leaderboardId, score, jsonData, leaderboardType, rotationType, rotationReset, retainedCount, numDaysToRotate, this);\n'))),(0,n.kt)(b,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *leaderboardId = @"default";\nint score = 10;\nNSString *jsonData = @"{\\"nickname\\":\\"batman\\"}";\nNSString *leaderboardType = @"HIGH_VALUE";\nNSString *rotationType = @"DAYS";\nNSDate *rotationReset = [NSDate date];\nint retainedCount = 2;\nint numDaysToRotate = 4;\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc leaderboardService] postScoreToDynamicLeaderboardDaysUTC:leaderboardId\n                      score:score\n                   jsonData:jsonData\n            leaderboardType:leaderboardType\n               rotationType:rotationType\n              rotationReset:rotationReset\n              retainedCount:retainedCount\n            numDaysToRotate:numDaysToRotate\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,n.kt)(b,{value:"java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String leaderboardId = "default";\nint score = 10;\nString jsonData = "{\\"nickname\\":\\"batman\\"}";\nString leaderboardType = "HIGH_VALUE";\nString rotationType = "DAYS";\nDate rotationReset = new Date(System.currentTimeMillis());\nint retainedCount = 2;\nint numDaysToRotate = 4;\nthis; // implements IServerCallback\n\n_bc.getLeaderboardService().postScoreToDynamicLeaderboardDaysUTC(leaderboardId, score, jsonData, leaderboardType, rotationType, rotationReset, retainedCount, numDaysToRotate, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,n.kt)(b,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'var leaderboardId = "default";\nvar score = 10;\nvar jsonData = {\n    "nickname": "batman"\n};\nvar leaderboardType = "HIGH_VALUE";\nvar rotationType = "DAYS";\nvar rotationReset = Date.now();\nvar retainedCount = 2;\nvar numDaysToRotate = 4;\n\n_bc.leaderboard.postScoreToDynamicLeaderboardDaysUTC(leaderboardId, score, jsonData, leaderboardType, rotationType, rotationReset, retainedCount, numDaysToRotate, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,n.kt)(b,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cfscript"},'var leaderboardId = "default";\nvar score = 10;\nvar jsonData = {\n    "nickname": "batman"\n};\nvar leaderboardType = "HIGH_VALUE";\nvar rotationType = "DAYS";\nvar rotationReset = Date.now();\nvar retainedCount = 2;\nvar numDaysToRotate = 4;\nvar leaderboardProxy = bridge.getLeaderboardServiceProxy();\n\nvar postResult = leaderboardProxy.postScoreToDynamicLeaderboardDaysUTC(leaderboardId, score, jsonData, leaderboardType, rotationType, rotationReset, retainedCount, numDaysToRotate);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,n.kt)(b,{value:"r",label:"Raw",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "leaderboard",\n    "operation": "POST_SCORE_DYNAMIC",\n    "data": {\n        "leaderboardId": "default",\n        "score": 10,\n        "data": {\n            "nickname": "batman"\n        },\n        "leaderboardType": "HIGH_VALUE",\n        "rotationType": "DAYS",\n        "rotationResetTime": "[[#ts+60000]]",\n        "retainedCount": 2,\n        "numDaysToRotate": 4\n    }\n}\n'))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"JSON Response"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": 200,\n    "data": null\n}\n'))),(0,n.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"leaderboardId"),(0,n.kt)("td",{parentName:"tr",align:null},"The leaderboard to post to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"score"),(0,n.kt)("td",{parentName:"tr",align:null},"The score to post")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"data"),(0,n.kt)("td",{parentName:"tr",align:null},"Optional user-defined data to post with the score")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"leaderboardType"),(0,n.kt)("td",{parentName:"tr",align:null},"Leaderboard type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"rotationType"),(0,n.kt)("td",{parentName:"tr",align:null},"Type of rotation")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"rotationReset"),(0,n.kt)("td",{parentName:"tr",align:null},"Date to start the rotation (date in millis UTC)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"retainedCount"),(0,n.kt)("td",{parentName:"tr",align:null},"How many previous rotations to keep")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"numDaysToRotate"),(0,n.kt)("td",{parentName:"tr",align:null},"How many days between each rotation")))))}T.isMDXComponent=!0}}]);