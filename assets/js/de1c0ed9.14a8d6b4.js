"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[45722],{3905:(e,r,a)=>{a.d(r,{Zo:()=>i,kt:()=>m});var t=a(67294);function o(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function n(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,t)}return a}function d(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?n(Object(a),!0).forEach((function(r){o(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function l(e,r){if(null==e)return{};var a,t,o=function(e,r){if(null==e)return{};var a,t,o={},n=Object.keys(e);for(t=0;t<n.length;t++)a=n[t],r.indexOf(a)>=0||(o[a]=e[a]);return o}(e,r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(t=0;t<n.length;t++)a=n[t],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=t.createContext({}),c=function(e){var r=t.useContext(s),a=r;return e&&(a="function"==typeof e?e(r):d(d({},r),e)),a},i=function(e){var r=c(e.components);return t.createElement(s.Provider,{value:r},e.children)},p="mdxType",b={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var a=e.components,o=e.mdxType,n=e.originalType,s=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),p=c(a),u=o,m=p["".concat(s,".").concat(u)]||p[u]||b[u]||n;return a?t.createElement(m,d(d({ref:r},i),{},{components:a})):t.createElement(m,d({ref:r},i))}));function m(e,r){var a=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var n=a.length,d=new Array(n);d[0]=u;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[p]="string"==typeof e?e:o,d[1]=l;for(var c=2;c<n;c++)d[c]=a[c];return t.createElement.apply(null,d)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},27793:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>s,contentTitle:()=>d,default:()=>g,frontMatter:()=>n,metadata:()=>l,toc:()=>c});var t=a(87462),o=(a(67294),a(3905));const n={},d="GetPlayerScoresFromLeaderboards",l={unversionedId:"api/capi/leaderboard/getplayerscoresfromleaderboards",id:"api/capi/leaderboard/getplayerscoresfromleaderboards",title:"GetPlayerScoresFromLeaderboards",description:"Overview",source:"@site/docs/api/2_capi/leaderboard/getplayerscoresfromleaderboards.md",sourceDirName:"api/2_capi/leaderboard",slug:"/api/capi/leaderboard/getplayerscoresfromleaderboards",permalink:"/braincloud-apiref/api/capi/leaderboard/getplayerscoresfromleaderboards",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/leaderboard/getplayerscoresfromleaderboards.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672193365,formattedLastUpdatedAt:"Dec 28, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"GetPlayerScores",permalink:"/braincloud-apiref/api/capi/leaderboard/getplayerscores"},next:{title:"GetPlayersSocialLeaderboard",permalink:"/braincloud-apiref/api/capi/leaderboard/getplayerssocialleaderboard"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],i=e=>function(r){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",r)},p=i("PartialServop"),b=i("BrowserWindow"),u=i("Tabs"),m=i("TabItem"),v={toc:c};function g(e){let{components:r,...a}=e;return(0,o.kt)("wrapper",(0,t.Z)({},v,a,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"getplayerscoresfromleaderboards"},"GetPlayerScoresFromLeaderboards"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"Gets a player's score from multiple leaderboards. Will only return scores if they exist."),(0,o.kt)(p,{service_name:"leaderboard",operation_name:"GET_PLAYER_SCORES_FROM_LEADERBOARDS",mdxType:"PartialServop"}),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)(b,{mdxType:"BrowserWindow"},(0,o.kt)(u,{mdxType:"Tabs"},(0,o.kt)(m,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'string[] leaderboardIds = { "leaderboardId1", "leaderboardId2" };\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.LeaderboardService.GetPlayerScoresFromLeaderboards(leaderboardIds, successCallback, failureCallback);\n'))),(0,o.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'std::vector<std::string> leaderboardIds;\nleaderboardIds.push_back("leaderboardId1");\nleaderboardIds.push_back("leaderboardId2");\n_bc->getLeaderboardService()->getPlayerScoresFromLeaderboards(leaderboardIds, this);\n'))),(0,o.kt)(m,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSArray *leaderboardIds = @[ @"leaderboardId1", @"leaderboardId2" ];\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc leaderboardService] getPlayerScoresFromLeaderboards:leaderboardIds\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,o.kt)(m,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'String[] leaderboardIds = { "leaderboardId1", "leaderboardId2" };\nthis; // implements IServerCallback\n\n_bc.getLeaderboardService().getPlayerScoresFromLeaderboards(leaderboardIds, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,o.kt)(m,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var leaderboardIds = [ "leaderboardId1", "leaderboardId2" ];\n\n_bc.leaderboard.getPlayerScoresFromLeaderboards(leaderboardIds, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,o.kt)(m,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cfscript"},'var leaderboardIds = [ "leaderboardId1", "leaderboardId2" ];\nvar leaderboardProxy = bridge.getLeaderboardServiceProxy();\n\nvar postResult = leaderboardProxy.getPlayerScoresFromLeaderboards(leaderboardIds);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,o.kt)(m,{value:"r",label:"Raw",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "leaderboard",\n    "operation": "GET_PLAYER_SCORES_FROM_LEADERBOARDS",\n    "data": {\n        "leaderboardIds": [\n            "1st-leaderboard-id",\n            "2nd-leaderboard-id"\n        ]\n    }\n}\n'))))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"JSON Response"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": 200,\n    "data": {\n        "scores": [{\n            "score": 100,\n            "data": {\n                "test": "testdata"\n            },\n            "createdAt": 1484933569566,\n            "updatedAt": 1484933569566,\n            "leaderboardId": "testLeaderboard",\n            "versionId": 150\n        }, {\n            "score": 10,\n            "data": null,\n            "createdAt": 1484933681216,\n            "updatedAt": 1484933681216,\n            "leaderboardId": "testLeaderboard2",\n            "versionId": 3\n        }]\n    }\n}\n'))),(0,o.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"leaderboardIds"),(0,o.kt)("td",{parentName:"tr",align:null},"Collection of leaderboard IDs")))))}g.isMDXComponent=!0}}]);