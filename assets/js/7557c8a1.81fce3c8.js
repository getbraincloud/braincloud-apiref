"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[71098],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>c});var a=t(67294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function n(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?n(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,a,i=function(e,r){if(null==e)return{};var t,a,i={},n=Object.keys(e);for(a=0;a<n.length;a++)t=n[a],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)t=n[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),d=function(e){var r=a.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=d(e.components);return a.createElement(s.Provider,{value:r},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},m=a.forwardRef((function(e,r){var t=e.components,i=e.mdxType,n=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=d(t),m=i,c=f["".concat(s,".").concat(m)]||f[m]||u[m]||n;return t?a.createElement(c,o(o({ref:r},p),{},{components:t})):a.createElement(c,o({ref:r},p))}));function c(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var n=t.length,o=new Array(n);o[0]=m;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[f]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<n;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},98356:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>n,metadata:()=>l,toc:()=>d});var a=t(87462),i=(t(67294),t(3905));const n={},o="Friend",l={unversionedId:"api/capi/friend/index",id:"api/capi/friend/index",title:"Friend",description:"Overview",source:"@site/docs/api/2_capi/friend/index.md",sourceDirName:"api/2_capi/friend",slug:"/api/capi/friend/",permalink:"/braincloud-apiref/api/capi/friend/",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/friend/index.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672193365,formattedLastUpdatedAt:"Dec 28, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"UploadFileFromMemory",permalink:"/braincloud-apiref/api/capi/file/uploadfilefrommemory"},next:{title:"AddFriends",permalink:"/braincloud-apiref/api/capi/friend/addfriends"}},s={},d=[{value:"Overview",id:"overview",level:2},{value:"API Summary",id:"api-summary",level:3},{value:"Friend Management",id:"friend-management",level:3},{value:"User Lookup",id:"user-lookup",level:3},{value:"Friend Data Access",id:"friend-data-access",level:3}],p=(f="DocCardList",function(e){return console.warn("Component "+f+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var f;const u={toc:d};function m(e){let{components:r,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"friend"},"Friend"),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Friends in brainCloud are other users (i.e. players) that you want to\nshare your user experience with. Friends may be existing connections\nfrom a social network (i.e. Facebook), or social connections that you make\nthat are specific to the app and managed by brainCloud."),(0,i.kt)("p",null,"brainCloud can help to manage these friends - and use them for the basis\nof higher-level features such as social leaderboards."),(0,i.kt)("p",null,"The methods of this service fall into the following categories:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Friend management - for directly managing the list of brainCloud friends"),(0,i.kt)("li",{parentName:"ul"},"Friend lookup - for looking up new friend candidates"),(0,i.kt)("li",{parentName:"ul"},"Friend data access - for accessing data associated with a friend")),(0,i.kt)("h3",{id:"api-summary"},"API Summary"),(0,i.kt)("h3",{id:"friend-management"},"Friend Management"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/addfriends"},"AddFriends")," - Adds brainCloud profile IDs to local friends."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/listfriends"},"ListFriends")," - Retrieves the friend summary data associated with the logged in user. Optional parameters: includeNetworkFriends and includeSummaryData"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/removefriends"},"RemoveFriends")," - Removes brainCloud profile IDs from local friends.")),(0,i.kt)("h3",{id:"user-lookup"},"User Lookup"),(0,i.kt)("p",null,"By Universal ID:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/finduserbyexactuniversalid"},"FindUserByExactUniversalId")," - Retrieves profile information for the partial Universal ID matches of the specified text."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/findusersbyuniversalidstartingwith"},"FindUsersByUniversalIdStartingWith")," - Retrieves profile information for users whose universal ID starts with search text. Optional parameter: maxResults")),(0,i.kt)("p",null,"By Name (not recommended - slow!):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/findusersbyexactname"},"FindUsersByExactName")," - Retrieves profile information for exactly matched user names. Optional parameter: maxResults"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/findusersbysubstrname"},"FindUsersBySubstrName")," - Retrieves profile information for partially matched user names. Optional parameter: maxResults"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/findusersbynamestartingwith"},"FindUsersByNameStartingWith")," - Retrieves profile information for users whose name starts with search text. Optional parameter: maxResults")),(0,i.kt)("p",null,"By Other Identity:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/getprofileinfoforcredential"},"GetProfileInfoForCredential")," - Retrieves profile information for the specified user."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/getprofileinfoforcredentialifexists"},"GetProfileInfoForCredentialIfExists")," - Retrieves profile information for the specified user. Silently fails"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/getprofileinfoforexternalauthid"},"GetProfileInfoForExternalAuthId")," - Retrieves profile information for the specified user."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/getprofileinfoforexternalauthidifexists"},"GetProfileInfoForExternalAuthIdIfExists")," - Retrieves profile information for the specified user. Silently fails")),(0,i.kt)("p",null,"Misc:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/findusersbyusersummary"},"FindUsersByUserSummary")," - Retrieves profile information based on the search criteria of the user summary data."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/getusersonlinestatus"},"GetUsersOnlineStatus")," - Get users online status."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/getexternalidforprofileid"},"GetExternalIdForProfileId")," - Retrieves the external ID for the specified user profile ID on the specified social platform."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/getsummarydataforprofileid"},"GetSummaryDataForProfileId")," - Retrieves summary information for the specified user profile ID.")),(0,i.kt)("h3",{id:"friend-data-access"},"Friend Data Access"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/readfriendentity"},"ReadFriendEntity")," - Reads entity data of friend."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/readfriendsentities"},"ReadFriendsEntities")," - Reads entities data of friends."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/capi/friend/readfrienduserstate"},"ReadFriendUserState")," - Updates the friend summary data associated with the logged in user.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Summary Friend Data")," (also referred to as simply ",(0,i.kt)("strong",{parentName:"p"},"Friend Data"),") is special game summary data that is made available to a user's friends.\nThis is normally used to provide additional information for use in social leaderboards and/or neighbor displays.\nCommon examples of friend data include experience level, player level title, etc. Summary Friend data is updated via the\n",(0,i.kt)("a",{parentName:"p",href:"/api/capi/playerstate/updatesummaryfrienddata"},(0,i.kt)("code",null,"UpdateSummaryFriendData"))," method."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},'Any app that relies on access to the user\'s Facebook friends will require the "user_friends" permission when authenticating with Facebook. See the Facebook API documentation for how to request the "user_friends" permission.')),(0,i.kt)(p,{mdxType:"DocCardList"}))}m.isMDXComponent=!0}}]);