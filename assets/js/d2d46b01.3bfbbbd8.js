"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[63353],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>k});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),l=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=l(e.components);return r.createElement(o.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=l(a),d=n,k=m["".concat(o,".").concat(d)]||m[d]||p[d]||s;return a?r.createElement(k,i(i({ref:t},u),{},{components:a})):r.createElement(k,i({ref:t},u))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,i=new Array(s);i[0]=d;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c[m]="string"==typeof e?e:n,i[1]=c;for(var l=2;l<s;l++)i[l]=a[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},43848:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var r=a(87462),n=(a(67294),a(3905));const s={},i="SmartSwitchAuthenticateSteam",c={unversionedId:"api/wrapper/smartswitchauthenticatesteam",id:"api/wrapper/smartswitchauthenticatesteam",title:"SmartSwitchAuthenticateSteam",description:"Overview",source:"@site/docs/api/1_wrapper/smartswitchauthenticatesteam.md",sourceDirName:"api/1_wrapper",slug:"/api/wrapper/smartswitchauthenticatesteam",permalink:"/braincloud-apiref/api/wrapper/smartswitchauthenticatesteam",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/1_wrapper/smartswitchauthenticatesteam.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672193337,formattedLastUpdatedAt:"Dec 28, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"SmartSwitchAuthenticatePlaystationNetwork",permalink:"/braincloud-apiref/api/wrapper/smartswitchauthenticateplaystationnetwork"},next:{title:"SmartSwitchAuthenticateTwitter",permalink:"/braincloud-apiref/api/wrapper/smartswitchauthenticatetwitter"}},o={},l=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",t)},m=u("BrowserWindow"),p=u("Tabs"),d=u("TabItem"),k={toc:l};function h(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"smartswitchauthenticatesteam"},"SmartSwitchAuthenticateSteam"),(0,n.kt)("h2",{id:"overview"},"Overview"),(0,n.kt)("p",null,"Smart Switch Authenticate will logout of the current profile, and switch to the new authentication type.\nIn event the current session was previously an anonymous account, the smart switch will delete that profile.\nUse this function to keep a clean designflow from anonymous to signed profiles"),(0,n.kt)("p",null,"Authenticate the user using a steam userId and session ticket (without any validation on the userId)."),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)(m,{mdxType:"BrowserWindow"},(0,n.kt)(p,{mdxType:"Tabs"},(0,n.kt)(d,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'string steamId = "userSteamId";\nstring ticket = "sessionTicketFromSteam";\nbool forceCreate = true;\n    \nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("[Authenticate Success] {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("[Authenticate Failed] {0}  {1}  {2}", status, code, error));\n};\n_bc.SmartSwitchAuthenticateSteam(\n    steamId, ticket, forceCreate,\n    successCallback, failureCallback);\n'))),(0,n.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},'const char* steamId = "userSteamId";\nconst char* ticket = "sessionTicketFromSteam";\n\n_bc->smartSwitchAuthenticateSteam(\n    steamId, token, true, this);\n'))),(0,n.kt)(d,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString* userID = @"userSteamId";\nNSString* sessionticket = @"sessionTicketFromSteam";\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[_bc smartSwitchAuthenticateSteam:userID\n             sessionTicket:sessionticket\n               forceCreate:true\n           completionBlock:successBlock\n      errorCompletionBlock:failureBlock\n                  cbObject:nil];\n'))),(0,n.kt)(d,{value:"java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'Steam steamId = "userSteamId";\nSteam ticket = "sessionTicketFromSteam";\n\n_bc.smartSwitchAuthenticateSteam(\n    steamId, token, true, this);\n'))),(0,n.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'var steamId = "userSteamId";\nvar ticket = "sessionTicketFromSteam";\nvar forceCreate = true;\n\n_bc.smartSwitchAuthenticateSteam(steamId, ticket, forceCreate, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,n.kt)(d,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'var steamId = "userSteamId";\nvar ticket = "sessionTicketFromSteam";\nvar forceCreate = true;\n\n_bc.smartSwitchAuthenticateSteam(steamId, ticket, forceCreate, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,n.kt)(d,{value:"r",label:"Raw",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'var steamId = "userSteamId";\nvar ticket = "sessionTicketFromSteam";\nvar forceCreate = true;\n\n_bc.smartSwitchAuthenticateSteam(steamId, ticket, forceCreate, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"JSON Response"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'var steamId = "userSteamId";\nvar ticket = "sessionTicketFromSteam";\nvar forceCreate = true;\n\n_bc.smartSwitchAuthenticateSteam(steamId, ticket, forceCreate, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,n.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"userId"),(0,n.kt)("td",{parentName:"tr",align:null},"String representation of 64 bit steam ID")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"sessionTicket"),(0,n.kt)("td",{parentName:"tr",align:null},"The session ticket of the user (hex encoded)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"forceCreate"),(0,n.kt)("td",{parentName:"tr",align:null},"Should a new profile be created for this user if the account does not exist?")))))}h.isMDXComponent=!0}}]);