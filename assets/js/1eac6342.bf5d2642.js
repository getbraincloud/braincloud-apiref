"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[62116],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),l=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=l(r),m=a,d=c["".concat(u,".").concat(m)]||c[m]||g[m]||o;return r?n.createElement(d,i(i({ref:t},s),{},{components:r})):n.createElement(d,i({ref:t},s))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p[c]="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},41765:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>b,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const o={},i="AutoJoinGroupMulti",p={unversionedId:"api/capi/group/autojoingroupmulti",id:"api/capi/group/autojoingroupmulti",title:"AutoJoinGroupMulti",description:"Overview",source:"@site/docs/api/2_capi/group/autojoingroupmulti.md",sourceDirName:"api/2_capi/group",slug:"/api/capi/group/autojoingroupmulti",permalink:"/braincloud-apiref/api/capi/group/autojoingroupmulti",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/group/autojoingroupmulti.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671831235,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"AutoJoinGroup",permalink:"/braincloud-apiref/api/capi/group/autojoingroup"},next:{title:"CancelGroupInvitation",permalink:"/braincloud-apiref/api/capi/group/cancelgroupinvitation"}},u={},l=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],s=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},c=s("PartialServop"),g=s("BrowserWindow"),m=s("Tabs"),d=s("TabItem"),y={toc:l};function b(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},y,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"autojoingroupmulti"},"AutoJoinGroupMulti"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Find and join an open group in the pool of groups in multiple group types provided as input arguments."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"isOpenGroup")," - the isOpenGroup flag is set on group creation, or via the ",(0,a.kt)("a",{parentName:"li",href:"/api/capi/group/setgroupopen"},"SetGroupOpen")," method.")),(0,a.kt)("p",null,"AutoJoinStrategy is defined by enum or constant in most of the client libraries.  For those that take a string, these are the valid values:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"JoinFirstGroup")," - Joins the first group found that matches the specified criteria."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"JoinRandomGroup")," - Finds all groups that matches the specified criteria and then randomly chooses one to join.")),(0,a.kt)(c,{service_name:"group",operation_name:"AUTO_JOIN_GROUP_MULTI",mdxType:"PartialServop"}),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)(g,{mdxType:"BrowserWindow"},(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(d,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'string[] groupTypes = {"type1","type2"};\nAutoJoinStrategy autoJoinStrategy = AutoJoinStrategy.JoinRandomGroup;\nstring where = "{}";\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.Group.AutoJoinGroupMulti(groupTypes, autoJoinStrategy, where, successCallback, failureCallback);\n'))),(0,a.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'const std::vector<std::string> &groupTypes = vector_of_group_types;\neAutoJoinStrategy autoJoinStrategy = eAutoJoinStrategy::JoinFirstGroup;\nconst char *where = "{}";\n\n_bc->getGroup()->autoJoinGroupMulti(groupTypes, autoJoinStrategy, where, this);\n'))),(0,a.kt)(d,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSArray *groupTypes = @[group_type_array];\nAutoJoinStrategy autoJoinStrategy = JoinFirstGroup;\nNSString *where = @"{}";\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc groupService]\n            autoJoinGroupMulti:groupTypes\n              autoJoinStrategy:autoJoinStrategy\n                         where:where \n               completionBlock:successBlock\n          errorCompletionBlock:failureBlock\n                      cbObject:nil];\n'))),(0,a.kt)(d,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'String[] groupTypes = new String[1];\ngroupTypes[0] = "type1";\ngroupTypes[1] = "type2";\nAutoJoinStrategy autoJoinStrategy = AutoJoinStrategy.JoinRandomGroup;\nString where = "{}";\nthis; // implements IServerCallback\n\n_bc.getGroup().autoJoinGroupMulti(groupTypes, autoJoinStrategy, where, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,a.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'var groupTypes = ["type1", "type2"];\nvar autoJoinStrategy = "JoinRandomGroup";\nvar where = {};\n\n_bc.group.autoJoinGroupMulti(groupTypes, autoJoinStrategy, where, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,a.kt)(d,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cfscript"},'var groupTypes = ["a-group-type-1","a-group-type-2"];\nvar autoJoinStrategy = "JoinRandomGroup";\nvar where = {};\nvar groupProxy = bridge.getGroupServiceProxy();\n\nvar postResult = groupProxy.autoJoinGroupMulti(groupTypes, autoJoinStrategy, where);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,a.kt)(d,{value:"r",label:"Raw",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "group",\n    "operation": "AUTO_JOIN_GROUP_MULTI",\n    "data": {\n        "groupTypes": ["group_types_array"],\n        "autoJoinStrategy": "JoinRandomGroup",\n        "where": {}\n    }\n}\n'))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"JSON Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": 200,\n    {\n     "data": {\n     "groupType": "test",\n     "groupId": "972e245c-38e8-4ccb-84db-8be5f530a27a",\n     "memberCount": 3,\n     "name": "Test2",\n     "invitedPendingMemberCount": 0,\n     "requestingPendingMemberCount": 0,\n     "ownerId": "1b8c0719-6f2e-44a0-95a2-bae46a4c5278",\n     "summaryData": null,\n     "isOpenGroup": true\n    },\n    }\n}\n'))),(0,a.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"groupTypes"),(0,a.kt)("td",{parentName:"tr",align:null},"The list of group types to draw candidates from")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"autoJoinStrategy"),(0,a.kt)("td",{parentName:"tr",align:null},"Selection strategy to employ when there are multiple matches")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"where"),(0,a.kt)("td",{parentName:"tr",align:null},"Query parameters (optional)")))))}b.isMDXComponent=!0}}]);