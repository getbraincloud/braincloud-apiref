"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[67367],{3905:(e,t,n)=>{n.d(t,{Zo:()=>b,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,b=i(e,["components","mdxType","originalType","parentName"]),p=c(n),u=r,m=p["".concat(s,".").concat(u)]||p[u]||y[u]||o;return n?a.createElement(m,l(l({ref:t},b),{},{components:n})):a.createElement(m,l({ref:t},b))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},45802:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={},l="GetLobbyInstances",i={unversionedId:"api/capi/lobby/getlobbyinstances",id:"api/capi/lobby/getlobbyinstances",title:"GetLobbyInstances",description:"Overview",source:"@site/docs/api/2_capi/lobby/getlobbyinstances.md",sourceDirName:"api/2_capi/lobby",slug:"/api/capi/lobby/getlobbyinstances",permalink:"/braincloud-apiref/api/capi/lobby/getlobbyinstances",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/lobby/getlobbyinstances.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671809255,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"GetLobbyData",permalink:"/braincloud-apiref/api/capi/lobby/getlobbydata"},next:{title:"GetLobbyInstancesWithPingData",permalink:"/braincloud-apiref/api/capi/lobby/getlobbyinstanceswithpingdata"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],b=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},p=b("PartialServop"),y=b("BrowserWindow"),u=b("Tabs"),m=b("TabItem"),d={toc:c};function g(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getlobbyinstances"},"GetLobbyInstances"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Gets a map keyed by rating of the visible lobby instances matching the given type and rating range."),(0,r.kt)(p,{service_name:"lobby",operation_name:"GET_LOBBY_INSTANCES",mdxType:"PartialServop"}),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)(y,{mdxType:"BrowserWindow"},(0,r.kt)(u,{mdxType:"Tabs"},(0,r.kt)(m,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'string lobbyType = "Relay_lobbyT_v2";\nDictionary<string, object> criteriaJson = new Dictionary<string, object>\n{\n  { "rating", new Dictionary<string, object>\n      {\n        { "min", 10 },\n        { "max", 100 }\n      }\n  }\n};\n\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.LobbyService.GetLobbyInstances(lobbyType, criteriaJson, successCallback, failureCallback);\n'))),(0,r.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *lobbyType = "Relay_lobbyT_v2";\nconst char *criteriaJson = "{\\"rating\\":{\\"min\\":10,\\"max\\":100}}";\n\n_bc->getLobbyService()->getLobbyInstances(lobbyType, criteriaJson, this);\n'))),(0,r.kt)(m,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *lobbyType = @"Relay_lobbyT_v2";\nNSString *criteriaJson = @"{\\"rating\\":{\\"min\\":10,\\"max\\":100}}";\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc lobbyService] getLobbyInstances:lobbyType\n               criteriaJson:criteriaJson\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,r.kt)(m,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String lobbyType = "Relay_lobbyT_v2";\nString criteriaJson = "{\\"rating\\":{\\"min\\":10,\\"max\\":100}}";\n\nthis; // implements IServerCallback\n\n_bc.getLobbyService().getLobbyInstances(lobbyType, criteriaJson, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,r.kt)(m,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'var lobbyType = "Relay_lobbyT_v2";\nvar "criteriaJson" = {\n      "rating": {\n        "min": 10,\n        "max": 100\n      }\n    };\n\n_bc.lobby.getLobbyInstances(lobbyType, criteriaJson, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,r.kt)(m,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfscript"},'var lobbyType = "Relay_lobbyT_v2";\nvar criteriaJson = {\n      "rating": {\n        "min": 10,\n        "max": 100\n      }\n    };\nvar lobbyProxy = bridge.getLobbyServiceProxy();\n\nvar postResult = lobbyProxy.getLobbyInstances(lobbyType, criteriaJson);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,r.kt)(m,{value:"r",label:"Raw",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "lobby",\n    "operation": "GET_LOBBY_INSTANCES",\n    "data": {\n        "lobbyType": "Relay_lobbyT_v2",\n    "criteriaJson": {\n      "rating": {\n        "min": 10,\n        "max": 100\n      }\n    }\n    }\n}\n'))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"JSON Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "lobbiesByRating": {\n      "20.0": [\n        {\n          "id": "23782:Relay_lobbyT_v2:2",\n          "lobbyType": "Relay_lobbyT_v2",\n          "state": "setup",\n          "rating": 20,\n          "desc": "starts as soon as 1 player is ready",\n          "owner": {\n            "profileId": "10b6d6fa-0aa6-43b0-a7b3-48aff2d13312",\n            "name": "",\n            "rating": 0,\n            "pic": null,\n            "cxId": "23782:10b6d6fa-0aa6-43b0-a7b3-48aff2d13312:52kc0h19k0pnnjhnrp8pug7udd"\n          },\n          "numMembers": 1,\n          "maxMembers": 8\n        }\n      ]\n    }\n  },\n  "status": 200\n}\n'))),(0,r.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lobbyType"),(0,r.kt)("td",{parentName:"tr",align:null},"The type of lobby to look for. Lobby types are defined in the portal.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"criteriaJson"),(0,r.kt)("td",{parentName:"tr",align:null},"JSON object describing the filter criteria. Supported sub-values include: 'rating'.")))))}g.isMDXComponent=!0}}]);