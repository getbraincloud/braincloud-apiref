"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[12950],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),i=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=i(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=i(n),m=r,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(g,s(s({ref:t},p),{},{components:n})):a.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:r,s[1]=l;for(var i=2;i<o;i++)s[i]=n[i];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},14290:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>b,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var a=n(87462),r=(n(67294),n(3905));const o={},s="PostChatMessage",l={unversionedId:"api/capi/chat/postchatmessage",id:"api/capi/chat/postchatmessage",title:"PostChatMessage",description:"Overview",source:"@site/docs/api/2_capi/chat/postchatmessage.md",sourceDirName:"api/2_capi/chat",slug:"/api/capi/chat/postchatmessage",permalink:"/braincloud-apiref/api/capi/chat/postchatmessage",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/chat/postchatmessage.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672193337,formattedLastUpdatedAt:"Dec 28, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"GetSubscribedChannels",permalink:"/braincloud-apiref/api/capi/chat/getsubscribedchannels"},next:{title:"PostChatMessageSimple",permalink:"/braincloud-apiref/api/capi/chat/postchatmessagesimple"}},c={},i=[{value:"Overview",id:"overview",level:2},{value:"Status Codes",id:"status-codes",level:3},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},d=p("PartialServop"),u=p("BrowserWindow"),m=p("Tabs"),g=p("TabItem"),h={toc:i};function b(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"postchatmessage"},"PostChatMessage"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Sends a potentially richer member chat message. By convention, ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," should contain a field named ",(0,r.kt)("inlineCode",{parentName:"p"},"text")," for plain-text content. Returns the id of the message created."),(0,r.kt)("h3",{id:"status-codes"},"Status Codes"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Code"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"40601"),(0,r.kt)("td",{parentName:"tr",align:null},"RTT_NOT_ENABLED"),(0,r.kt)("td",{parentName:"tr",align:null},"RTT must be enabled for this feature")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"40603"),(0,r.kt)("td",{parentName:"tr",align:null},"CHAT_UNRECOGNIZED_CHANNEL"),(0,r.kt)("td",{parentName:"tr",align:null},"The specified channel is invalid")))),(0,r.kt)(d,{service_name:"chat",operation_name:"POST_CHAT_MESSAGE",mdxType:"PartialServop"}),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)(u,{mdxType:"BrowserWindow"},(0,r.kt)(m,{mdxType:"Tabs"},(0,r.kt)(g,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'\n\nstring channelId = "22817:gl:CHAT_TRADE"; // APP_ID:CHANNEL_TYPE:CHANNEL_ID\nstring text = "Looking to sell a couch for 105 gold coins.";\nDictionary<string, object> sellItem = new Dictionary<string, object>\n{\n    {"ITEM_TYPE", "COUCH"},\n    {"ITEM_ID", "d05a5b9d-374e-41e2-a498-c7387bf15c76"},\n    {"PRICE", "105"},\n    {"CURRENCY", "GOLDCOINS"}\n};\nDictionary<string, object> rich = new Dictionary<string, object>\n{\n    {"SELL_ITEM", sellItem}\n};\nvar contentJson = JsonFx.Json.JsonWriter.Serialize(new Dictionary<string, object>\n{\n    {"rich", rich},\n    {"text", text}\n});\n\nbool recordInHistory = true;\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Dictionary<string, object> jsonMessage =\n        (Dictionary<string, object>) JsonFx.Json.JsonReader.Deserialize(response);\n    Dictionary<string, object> jsonData = (Dictionary<string, object>) jsonMessage["data"];\n\n    var msgId = jsonData["msgId"].ToString();\n    string logMessage = string.Join(" | ", new[] {msgId});\n    Debug.Log(logMessage); // 783733181125648\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("[PostChatMessage Failed] {0}  {1}  {2}", status, code, error));\n};\n\n_bc.ChatService.PostChatMessage(channelId, contentJson, recordInHistory,\n    successCallback, failureCallback);\n'))),(0,r.kt)(g,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *channelId = "55555:gl:bcDev";\nconst char *contentJson = "{\\"text\\":\\"Hello world\\",\\"custom\\":{\\"somethingCustom\\":\\"wow\\"}}";\nbool recordInHistory = true;\n_bc->getChatService()->postChatMessage(channelId, contentJson, recordInHistory, this);\n'))),(0,r.kt)(g,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *channelId = @"55555:gl:bcDev";\nNSString *contentJson = @"{\\"text\\":\\"Hello world\\",\\"custom\\":{\\"somethingCustom\\":\\"wow\\"}}";\nbool recordInHistory = true;\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc chatService] postChatMessage:channelId\n                contentJson:contentJson\n            recordInHistory:recordInHistory\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,r.kt)(g,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String channelId = "22817:gl:CHAT_TRADE"; // APP_ID:CHANNEL_TYPE:CHANNEL_ID\nString chatMessage = "Looking to sell a couch for 105 gold coins.";\nString jsonRich = "";\nthis; // implements IServerCallback\n\n_bc.getChatService().postChatMessage(channelId, chatMessage, jsonRich, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,r.kt)(g,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'var channelId = "22817:gl:CHAT_TRADE"; // APP_ID:CHANNEL_TYPE:CHANNEL_ID\nvar content = {text: "Looking to sell a couch for 105 gold coins.", SELL_ITEM: {ITEM_TYPE: "COUCH"}};\n\n_bc.chat.postChatMessage(channelId, content, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,r.kt)(g,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfscript"},'var chatProxy = bridge.getChatServiceProxy();\nvar content = {};\ncontent.text = "Hellooooo!";\n\nvar postResult = chatProxy.postChatMessage( channelId, content, true );\nif (postResult.status == 200 ) {\n    // Success!\n}\n'))),(0,r.kt)(g,{value:"r",label:"Raw",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "chat",\n    "operation": "POST_CHAT_MESSAGE",\n    "data": {\n        "channelId": "55555:gl:bcDev",\n        "content": {\n            "text": "Hello world",\n            "custom": {\n                "somethingCustom": "wow"\n            }\n        },\n        "recordInHistory": true\n    }\n}\n'))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"JSON Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": 200,\n    "data": {\n        "msgId": "783347769003570"\n    }\n}\n'))),(0,r.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"channelId"),(0,r.kt)("td",{parentName:"tr",align:null},"The chat channel to post to")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"contentJson"),(0,r.kt)("td",{parentName:"tr",align:null},"The json content of the message. Split into chatMessage and jsonRich for plain text and json content respectively.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"recordInHistory"),(0,r.kt)("td",{parentName:"tr",align:null},"Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," if the message shouldn't be recorded to history. Useful for sending non-conversational messages, like when users join a room, etc.")))))}b.isMDXComponent=!0}}]);