"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[14377],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),i=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=i(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,c=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=i(a),d=r,h=p["".concat(l,".").concat(d)]||p[d]||u[d]||c;return a?n.createElement(h,o(o({ref:t},m),{},{components:a})):n.createElement(h,o({ref:t},m))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=a.length,o=new Array(c);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var i=2;i<c;i++)o[i]=a[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},75963:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>b,frontMatter:()=>c,metadata:()=>s,toc:()=>i});var n=a(87462),r=(a(67294),a(3905));const c={},o="CompleteMatchWithSummaryData",s={unversionedId:"api/capi/asyncmatch/completematchwithsummarydata",id:"api/capi/asyncmatch/completematchwithsummarydata",title:"CompleteMatchWithSummaryData",description:"Overview",source:"@site/docs/api/2_capi/asyncmatch/completematchwithsummarydata.md",sourceDirName:"api/2_capi/asyncmatch",slug:"/api/capi/asyncmatch/completematchwithsummarydata",permalink:"/braincloud-apiref/api/capi/asyncmatch/completematchwithsummarydata",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/asyncmatch/completematchwithsummarydata.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671809255,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"CompleteMatch",permalink:"/braincloud-apiref/api/capi/asyncmatch/completematch"},next:{title:"CreateMatch",permalink:"/braincloud-apiref/api/capi/asyncmatch/creatematch"}},l={},i=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},p=m("PartialServop"),u=m("BrowserWindow"),d=m("Tabs"),h=m("TabItem"),y={toc:i};function b(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},y,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"completematchwithsummarydata"},"CompleteMatchWithSummaryData"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Marks the given match as complete."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Only a match whose current status is PENDING (at least one turn has occurred) or COMPLETE can be marked as COMPLETE")),(0,r.kt)(p,{service_name:"asyncMatch",operation_name:"COMPLETE_MATCH_WITH_SUMMARY_DATA",mdxType:"PartialServop"}),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)(u,{mdxType:"BrowserWindow"},(0,r.kt)(d,{mdxType:"Tabs"},(0,r.kt)(h,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'string ownerId = "the-owner-id";\nstring matchId = "the-match-id";\nstring pushContent = "An async-match has been completed!";\nstring summary = "{\\"completedBy\\":{\\"display\\":\\"John Doe wins!\\",\\"player\\":2,\\"reason\\":\\"victory\\"}}";\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.AsyncMatchService.CompleteMatchWithSummaryData(ownerId, matchId, pushContent, summary, successCallback, failureCallback);\n'))),(0,r.kt)(h,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *ownerId = "the-owner-id";\nconst char *matchId = "the-match-id";\nconst char *pushContent = "An async-match has been completed!";\nconst char *summary = "{\\"completedBy\\":{\\"display\\":\\"John Doe wins!\\",\\"player\\":2,\\"reason\\":\\"victory\\"}}";\n_bc->getAsyncMatchService()->completeMatchWithSummaryData(ownerId, matchId, pushContent, summary, this);\n'))),(0,r.kt)(h,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *ownerId = @"the-owner-id";\nNSString *matchId = @"the-match-id";\nNSString *pushContent = @"An async-match has been completed!";\nNSString *summary = "{\\"completedBy\\":{\\"display\\":\\"John Doe wins!\\",\\"player\\":2,\\"reason\\":\\"victory\\"}}";\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc asyncMatchService] completeMatchWithSummaryData:ownerId\n                    matchId:matchId\n                pushContent:pushContent\n                    summary:summary\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,r.kt)(h,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String ownerId = "the-owner-id";\nString matchId = "the-match-id";\nString pushContent = "An async-match has been completed!";\nString summary = "{\\"completedBy\\":{\\"display\\":\\"John Doe wins!\\",\\"player\\":2,\\"reason\\":\\"victory\\"}}";\nthis; // implements IServerCallback\n\n_bc.getAsyncMatchService().completeMatchWithSummaryData(ownerId, matchId, pushContent, summary, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,r.kt)(h,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'var ownerId = "the-owner-id";\nvar matchId = "the-match-id";\nvar pushContent = "An async-match has been completed!";\nvar summary = {\n  "completedBy": {\n    "display": "John Doe wins!",\n    "player": 2,\n    "reason": "victory"\n  }\n};\n\n_bc.asyncMatch.completeMatchWithSummaryData(ownerId, matchId, pushContent, summary, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,r.kt)(h,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfscript"},'var ownerId = "the-owner-id";\nvar matchId = "the-match-id";\nvar pushContent = "An async-match has been completed!";\nvar summary = {\n  "completedBy": {\n    "display": "John Doe wins!",\n    "player": 2,\n    "reason": "victory"\n  }\n};\nvar asyncMatchProxy = bridge.getAsyncMatchServiceProxy();\n\nvar postResult = asyncMatchProxy.completeMatchWithSummaryData(ownerId, matchId, pushContent, summary);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,r.kt)(h,{value:"r",label:"Raw",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "asyncMatch",\n    "operation": "COMPLETE_MATCH_WITH_SUMMARY_DATA",\n    "data": {\n        "ownerId": "the-owner-id",\n        "matchId": "the-match-id",\n        "pushContent": "An async-match has been completed!",\n        "summary": {\n            "completedBy": {\n                "display": "John Doe wins!",\n                "player": 2,\n                "reason": "victory"\n            }\n        }\n    }\n}\n'))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"JSON Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": 200,\n    "data": null\n}\n'))),(0,r.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ownerId"),(0,r.kt)("td",{parentName:"tr",align:null},"The match owner id.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"matchId"),(0,r.kt)("td",{parentName:"tr",align:null},"The match id.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pushContent"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional push notification message to send to the other party. Refer to the Push Notification functions for the syntax required.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"summary"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional JSON string defining what the other player will see as a summary of the game when listing their games.")))))}b.isMDXComponent=!0}}]);