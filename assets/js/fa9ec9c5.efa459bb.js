"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[6064],{3905:(e,n,r)=>{r.d(n,{Zo:()=>d,kt:()=>b});var a=r(67294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var s=a.createContext({}),c=function(e){var n=a.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},d=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(r),m=t,b=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return r?a.createElement(b,i(i({ref:n},d),{},{components:r})):a.createElement(b,i({ref:n},d))}));function b(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:t,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},26847:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=r(87462),t=(r(67294),r(3905));const o={},i="ClaimTournamentReward",l={unversionedId:"api/capi/tournament/claimtournamentreward",id:"api/capi/tournament/claimtournamentreward",title:"ClaimTournamentReward",description:"Overview",source:"@site/docs/api/2_capi/tournament/claimtournamentreward.md",sourceDirName:"api/2_capi/tournament",slug:"/api/capi/tournament/claimtournamentreward",permalink:"/braincloud-apiref/api/capi/tournament/claimtournamentreward",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/tournament/claimtournamentreward.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671809255,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Tournament",permalink:"/braincloud-apiref/api/capi/tournament/"},next:{title:"GetDivisionInfo",permalink:"/braincloud-apiref/api/capi/tournament/getdivisioninfo"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],d=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,t.kt)("div",n)},u=d("PartialServop"),p=d("BrowserWindow"),m=d("Tabs"),b=d("TabItem"),v={toc:c};function k(e){let{components:n,...r}=e;return(0,t.kt)("wrapper",(0,a.Z)({},v,r,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"claimtournamentreward"},"ClaimTournamentReward"),(0,t.kt)("h2",{id:"overview"},"Overview"),(0,t.kt)("p",null,"Processes any outstanding rewards for the player."),(0,t.kt)(u,{service_name:"tournament",operation_name:"CLAIM_TOURNAMENT_REWARD",mdxType:"PartialServop"}),(0,t.kt)("h2",{id:"usage"},"Usage"),(0,t.kt)(p,{mdxType:"BrowserWindow"},(0,t.kt)(m,{mdxType:"Tabs"},(0,t.kt)(b,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},'string leaderboardId = "leaderboardId1";\nint versionId = 10;\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.TournamentService.ClaimTournamentReward(leaderboardId, versionId, successCallback, failureCallback);\n'))),(0,t.kt)(b,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *leaderboardId = "leaderboardId1";\nint versionId = 10;\n_bc->getTournamentService()->claimTournamentReward(leaderboardId, versionId, this);\n'))),(0,t.kt)(b,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *leaderboardId = @"leaderboardId1";\nint versionId = 10;\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc tournamentService] claimTournamentReward:leaderboardId\n                  versionId:versionId\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,t.kt)(b,{value:"java",label:"Java",mdxType:"TabItem"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-java"},'String leaderboardId = "leaderboardId1";\nint versionId = 10;\nthis; // implements IServerCallback\n\n_bc.getTournamentService().claimTournamentReward(leaderboardId, versionId, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,t.kt)(b,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'var leaderboardId = "leaderboardId1";\nvar versionId = 10;\n\n_bc.tournament.claimTournamentReward(leaderboardId, versionId, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,t.kt)(b,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-cfscript"},'var leaderboardId = "leaderboardId1";\nvar versionId = 10;\nvar tournamentProxy = bridge.getTournamentServiceProxy();\n\nvar postResult = tournamentProxy.claimTournamentReward(leaderboardId, versionId);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,t.kt)(b,{value:"r",label:"Raw",mdxType:"TabItem"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "tournament",\n    "operation": "CLAIM_TOURNAMENT_REWARD",\n    "data": {\n        "leaderboardId": "the-leaderboard-id",\n        "versionId": 10\n    }\n}\n'))))),(0,t.kt)("details",null,(0,t.kt)("summary",null,"JSON Response"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": 200,\n    "data": {\n        "rewards": {\n            "experiencePoints": 1000,\n            "experienceLevels": [2],\n            "playerAchievements": ["achievement1"],\n            "globalStatistics": {\n                "allWorldMissions": 1\n            },\n            "statistics": {\n                "missions": 1\n            },\n            "currency": {\n                "coin": 10000\n            }\n        },\n        "rewardDetails": {\n            "tournaments": [{\n                "leaderboardId": "xxx",\n                "leaderboardVersion": 5,\n                "tCode": "basic",\n                "tCVersion": 3,\n                "updatedAt": 1480371160082,\n                "tRank": 5,\n                "tClaimed": 1480437028561,\n                "createdAt": 1480357557197,\n                "data": {},\n                "score": 818178,\n                "rewards": {\n                    "experiencePoints": 1000,\n                    "achievement": "achievement1",\n                    "currency": {\n                        "coins": 500\n                    },\n                    "globalStatistics": {\n                        "allWorldMissions": 1\n                    },\n                    "statistics": {\n                        "missions": 1\n                    }\n                }\n            }],\n            "milestones": [],\n            "xp": {}\n        },\n        "experiencePoints": 1001,\n        "experienceLevel": 2,\n        "xpCapped": false,\n        "currency": {\n            "coin": {\n                "purchased": 0,\n                "balance": 64805,\n                "consumed": 38655,\n                "awarded": 103460\n            }\n        },\n        "parentCurrency": {},\n        "peerCurrency": {},\n        "statistics": {\n            "missions": 1,\n            "kills": 1\n        }\n    }\n}\n'))),(0,t.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,t.kt)("table",null,(0,t.kt)("thead",{parentName:"table"},(0,t.kt)("tr",{parentName:"thead"},(0,t.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,t.kt)("th",{parentName:"tr",align:null},"Description"))),(0,t.kt)("tbody",{parentName:"table"},(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",{parentName:"tr",align:null},"leaderboardId"),(0,t.kt)("td",{parentName:"tr",align:null},"The leaderboard for the tournament")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",{parentName:"tr",align:null},"versionId"),(0,t.kt)("td",{parentName:"tr",align:null},"Version of the completed tournament")))))}k.isMDXComponent=!0}}]);