"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[14821],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>b});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,b=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return t?n.createElement(b,o(o({ref:r},p),{},{components:t})):n.createElement(b,o({ref:r},p))}));function b(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},88728:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=t(87462),a=(t(67294),t(3905));const i={},o="RegisterListenersForFriends",s={unversionedId:"api/capi/presence/registerlistenersforfriends",id:"api/capi/presence/registerlistenersforfriends",title:"RegisterListenersForFriends",description:"Overview",source:"@site/docs/api/2_capi/presence/registerlistenersforfriends.md",sourceDirName:"api/2_capi/presence",slug:"/api/capi/presence/registerlistenersforfriends",permalink:"/braincloud-apiref/api/capi/presence/registerlistenersforfriends",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/presence/registerlistenersforfriends.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671831235,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"GetPresenceOfUsers",permalink:"/braincloud-apiref/api/capi/presence/getpresenceofusers"},next:{title:"RegisterListenersForGroup",permalink:"/braincloud-apiref/api/capi/presence/registerlistenersforgroup"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],p=e=>function(r){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",r)},d=p("PartialServop"),u=p("BrowserWindow"),m=p("Tabs"),b=p("TabItem"),f={toc:c};function g(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},f,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"registerlistenersforfriends"},"RegisterListenersForFriends"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Registers the caller for RTT presence updates from friends on the given ",(0,a.kt)("inlineCode",{parentName:"p"},"platform"),'. Can be one of "all", "brainCloud", or "facebook". If ',(0,a.kt)("inlineCode",{parentName:"p"},"bidirectional")," is set to true, then also registers the targeted users for presence updates from the caller."),(0,a.kt)(d,{service_name:"presence",operation_name:"REGISTER_LISTENERS_FOR_FRIENDS",mdxType:"PartialServop"}),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)(u,{mdxType:"BrowserWindow"},(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(b,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'string platform = "brainCloud";\nbool bidirectional = true;\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n    \n_bc.PresenceService.RegisterListenersForFriends(platform, bidirectional, successCallback, failureCallback);\n'))),(0,a.kt)(b,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'const char* platform = "brainCloud";\nbool bidirectional = true;\n\n_bc->getPresenceService()->registerListenersForFriends(platform, bidirectional, this);\n'))),(0,a.kt)(b,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString* platform = @"brainCloud";\nbool bidirectional = true;\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc presenceService] registerListenersForFriends:platform\n             bidirectional:bidirectional\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,a.kt)(b,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'String platform = "brainCloud";\nboolean bidirectional = true;\nthis; // implements IServerCallback\n\n_bc.getPresenceService().registerListenersForFriends(platform, bidirectional, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,a.kt)(b,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'var platform = "brainCloud";\nvar bidirectional = true;\n\n_bc.presence.registerListenersForFriends(platform, bidirectional, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,a.kt)(b,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cfscript"},'var presenceProxy = bridge.getPresenceServiceProxy();\nvar platform = "brainCloud";\nvar bidirectional = true;\n\nvar postResult = presenceProxy.registerListenersForFriends(platform, bidirectional);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,a.kt)(b,{value:"r",label:"Raw",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "presence",\n    "operation": "REGISTER_LISTENERS_FOR_FRIENDS",\n    "data": {\n        "friendPlatform": "brainCloud",\n        "bidirectional": true\n    }\n}\n'))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"JSON Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n "data": {\n  "presence": [\n   {\n    "user": {\n     "id": <%= data.example.profileId %>,\n     "name": "",\n     "pic": null,\n     "cxs": [\n      "22284:fb416888-e76d-425d-a06d-a5529bdba8d9:"\n     ]\n    },\n    "online": true,\n    "summaryFriendData": {},\n    "activity": {\n     "LOCATION": "POKER_TABLE",\n     "STATUS": "PLAYING_GAME"\n    }\n   }\n  ]\n },\n "status": 200\n}\n'))),(0,a.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"platform"),(0,a.kt)("td",{parentName:"tr",align:null},'Presence for friends of the caller on the specified platform. Use "all" or omit for all platforms.')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"bidirectional"),(0,a.kt)("td",{parentName:"tr",align:null},"Should those profiles be mutually registered to listen to the current profile?")))))}g.isMDXComponent=!0}}]);