"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[3729],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),b=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=b(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=b(a),g=r,m=d["".concat(s,".").concat(g)]||d[g]||p[g]||o;return a?n.createElement(m,l(l({ref:t},c),{},{components:a})):n.createElement(m,l({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var b=2;b<o;b++)l[b]=a[b];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},48723:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>y,frontMatter:()=>o,metadata:()=>i,toc:()=>b});var n=a(87462),r=(a(67294),a(3905));const o={},l="FindOrCreateLobbyWithPingData",i={unversionedId:"api/capi/lobby/findorcreatelobbywithpingdata",id:"api/capi/lobby/findorcreatelobbywithpingdata",title:"FindOrCreateLobbyWithPingData",description:"Overview",source:"@site/docs/api/2_capi/lobby/findorcreatelobbywithpingdata.md",sourceDirName:"api/2_capi/lobby",slug:"/api/capi/lobby/findorcreatelobbywithpingdata",permalink:"/braincloud-apiref/api/capi/lobby/findorcreatelobbywithpingdata",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/lobby/findorcreatelobbywithpingdata.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672193365,formattedLastUpdatedAt:"Dec 28, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"FindOrCreateLobby",permalink:"/braincloud-apiref/api/capi/lobby/findorcreatelobby"},next:{title:"GetLobbyData",permalink:"/braincloud-apiref/api/capi/lobby/getlobbydata"}},s={},b=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},d=c("PartialServop"),p=c("BrowserWindow"),g=c("Tabs"),m=c("TabItem"),u={toc:b};function y(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"findorcreatelobbywithpingdata"},"FindOrCreateLobbyWithPingData"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Adds the caller to the lobby entry queue and will create a lobby if none are found."),(0,r.kt)("p",null,"Use ",(0,r.kt)("a",{parentName:"p",href:"/api/capi/lobby/pingregions"},"PingRegions")," to generate the ping data."),(0,r.kt)(d,{service_name:"lobby",operation_name:"FIND_OR_CREATE_LOBBY_WITH_PING_DATA",mdxType:"PartialServop"}),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)(p,{mdxType:"BrowserWindow"},(0,r.kt)(g,{mdxType:"Tabs"},(0,r.kt)(m,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'string lobbyType = "4v4";\nint rating = 76;\nint maxSteps = 3;\nstring algo = "{\\"strategy\\":\\"ranged-absolute\\",\\"alignment\\":\\"center\\",\\"ranges\\":[5,7.5,10]}";\nstring filterJson = "{\\"cheater\\":false}";\nstring[] otherUserCxIds = { "123456:aaa-bbb-ccc-ddd:asdfjkl" };\nstring settings = "{}";\nbool isReady = false;\nstring extraJson = "{}";\nstring teamCode = "blue";\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.LobbyService.FindOrCreateLobbyWithPingData(lobbyType, rating, maxSteps, algo, filterJson, otherUserCxIds, settings, isReady, extraJson, teamCode, successCallback, failureCallback);\n'))),(0,r.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *lobbyType = "4v4";\nint rating = 76;\nint maxSteps = 3;\nconst char *algo = "{\\"strategy\\":\\"ranged-absolute\\",\\"alignment\\":\\"center\\",\\"ranges\\":[5,7.5,10]}";\nconst char *filterJson = "{\\"cheater\\":false}";\nstd::vector<std::string> otherUserCxIds;\notherUserCxIds.push_back("123456:aaa-bbb-ccc-ddd:asdfjkl");\nconst char *settings = "{}";\nbool isReady = false;\nconst char *extraJson = "{}";\nconst char *teamCode = "blue";\n_bc->getLobbyService()->findOrCreateLobbyWithPingData(lobbyType, rating, maxSteps, algo, filterJson, otherUserCxIds, settings, isReady, extraJson, teamCode, this);\n'))),(0,r.kt)(m,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *lobbyType = @"4v4";\nint rating = 76;\nint maxSteps = 3;\nNSString *algo = @"{\\"strategy\\":\\"ranged-absolute\\",\\"alignment\\":\\"center\\",\\"ranges\\":[5,7.5,10]}";\nNSString *filterJson = @"{\\"cheater\\":false}";\nNSArray *otherUserCxIds = @[ @"123456:aaa-bbb-ccc-ddd:asdfjkl" ];\nNSString *settings = @"{}";\nbool isReady = false;\nNSString *extraJson = @"{}";\nNSString *teamCode = @"blue";\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc lobbyService] findOrCreateLobbyWithPingData:lobbyType\n                     rating:rating\n                   maxSteps:maxSteps\n                       algo:algo\n                 filterJson:filterJson\n             otherUserCxIds:otherUserCxIds\n                   settings:settings\n                    isReady:isReady\n                  extraJson:extraJson\n                   teamCode:teamCode\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,r.kt)(m,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String lobbyType = "4v4";\nint rating = 76;\nint maxSteps = 3;\nString algo = "{\\"strategy\\":\\"ranged-absolute\\",\\"alignment\\":\\"center\\",\\"ranges\\":[5,7.5,10]}";\nString filterJson = "{\\"cheater\\":false}";\nString[] otherUserCxIds = { "123456:aaa-bbb-ccc-ddd:asdfjkl" };\nString settings = "{}";\nboolean isReady = false;\nString extraJson = "{}";\nString teamCode = "blue";\nthis; // implements IServerCallback\n\n_bc.getLobbyService().findOrCreateLobbyWithPingData(lobbyType, rating, maxSteps, algo, filterJson, otherUserCxIds, settings, isReady, extraJson, teamCode, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,r.kt)(m,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'var lobbyType = "4v4";\nvar rating = 76;\nvar maxSteps = 3;\nvar algo = {\n    "strategy": "ranged-absolute",\n    "alignment": "center",\n    "ranges": [\n        5,\n        7.5,\n        10\n    ]\n};\nvar filterJson = {\n    "cheater": false\n};\nvar otherUserCxIds = [ "123456:aaa-bbb-ccc-ddd:asdfjkl" ];\nvar settings = {};\nvar isReady = false;\nvar extraJson = {};\nvar teamCode = "blue";\n\n_bc.lobby.findOrCreateLobbyWithPingData(lobbyType, rating, maxSteps, algo, filterJson, otherUserCxIds, settings, isReady, extraJson, teamCode, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,r.kt)(m,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfscript"},'var lobbyType = "4v4";\nvar rating = 76;\nvar maxSteps = 3;\nvar algo = {\n    "strategy": "ranged-absolute",\n    "alignment": "center",\n    "ranges": [\n        5,\n        7.5,\n        10\n    ]\n};\nvar filterJson = {\n    "cheater": false\n};\nvar otherUserCxIds = [ "123456:aaa-bbb-ccc-ddd:asdfjkl" ];\nvar settings = {};\nvar isReady = false;\nvar extraJson = {};\nvar teamCode = "blue";\nvar pingData = {\n    "ca-central-1": 98,\n    "us-west-1": 123\n};\nvar lobbyProxy = bridge.getLobbyServiceProxy();\n\nvar postResult = lobbyProxy.findOrCreateLobbyWithPingData(lobbyType, rating, maxSteps, algo, filterJson, otherUserCxIds, settings, isReady, extraJson, teamCode, pingData);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,r.kt)(m,{value:"r",label:"Raw",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "lobby",\n    "operation": "FIND_OR_CREATE_LOBBY_WITH_PING_DATA",\n    "data": {\n        "lobbyType": "4v4",\n        "rating": 76,\n        "maxSteps": 3,\n        "algo": {\n            "strategy": "ranged-absolute",\n            "alignment": "center",\n            "ranges": [\n                5,\n                7.5,\n                10\n            ]\n        },\n        "filterJson": {\n            "cheater": false\n        },\n        "otherUserCxIds": [\n            "55555:aaa-bbb-ccc-ddd:asdfjkl"\n        ],\n        "settings": {},\n        "isReady": false,\n        "extraJson": {},\n        "teamCode": "blue",\n        "pingData": {\n            "ca-central-1": 98,\n            "us-west-1": 123\n        }\n    }\n}\n'))))),(0,r.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lobbyType"),(0,r.kt)("td",{parentName:"tr",align:null},"The type of lobby to look for. Lobby types are defined in the portal.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rating"),(0,r.kt)("td",{parentName:"tr",align:null},"The skill rating to use for finding the lobby. Provided as a separate parameter because it may not exactly match the user's rating (especially in cases where parties are involved).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"maxSteps"),(0,r.kt)("td",{parentName:"tr",align:null},"The maximum number of steps to wait when looking for an applicable lobby. Each step is ~5 seconds.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"algo"),(0,r.kt)("td",{parentName:"tr",align:null},"The algorithm to use for increasing the search scope.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filterJson"),(0,r.kt)("td",{parentName:"tr",align:null},"Used to help filter the list of rooms to consider. Passed to the matchmaking filter, if configured.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"otherUserCxIds"),(0,r.kt)("td",{parentName:"tr",align:null},"Array of other users (i.e. party members) to add to the lobby as well. Will constrain things so that only lobbies with room for all players will be considered.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"settings"),(0,r.kt)("td",{parentName:"tr",align:null},"Owner settings for the lobby.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isReady"),(0,r.kt)("td",{parentName:"tr",align:null},"Initial ready-status of this user.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"extraJson"),(0,r.kt)("td",{parentName:"tr",align:null},"Initial extra-data about this user.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"teamCode"),(0,r.kt)("td",{parentName:"tr",align:null},"Preferred team for this user, if applicable. Send ",(0,r.kt)("inlineCode",{parentName:"td"},'""')," or ",(0,r.kt)("inlineCode",{parentName:"td"},"null")," for automatic assignment.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pingData"),(0,r.kt)("td",{parentName:"tr",align:null},"Ping times for each region available for this lobby type. Can use GET_REGIONS_FOR_LOBBIES to retreive the list of regions for a given lobby type. Ping data is automatically passed in on the clients.")))))}y.isMDXComponent=!0}}]);