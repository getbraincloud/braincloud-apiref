"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[77579],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>g});var a=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function d(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=a.createContext({}),u=function(e){var r=a.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},p=function(e){var r=u(e.components);return a.createElement(i.Provider,{value:r},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},b=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),c=u(t),b=n,g=c["".concat(i,".").concat(b)]||c[b]||s[b]||o;return t?a.createElement(g,l(l({ref:r},p),{},{components:t})):a.createElement(g,l({ref:r},p))}));function g(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,l=new Array(o);l[0]=b;var d={};for(var i in r)hasOwnProperty.call(r,i)&&(d[i]=r[i]);d.originalType=e,d[c]="string"==typeof e?e:n,l[1]=d;for(var u=2;u<o;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},34342:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>f,frontMatter:()=>o,metadata:()=>d,toc:()=>u});var a=t(87462),n=(t(67294),t(3905));const o={},l="GetGroupLeaderboardView",d={unversionedId:"api/capi/leaderboard/getgroupleaderboardview",id:"api/capi/leaderboard/getgroupleaderboardview",title:"GetGroupLeaderboardView",description:"Overview",source:"@site/docs/api/2_capi/leaderboard/getgroupleaderboardview.md",sourceDirName:"api/2_capi/leaderboard",slug:"/api/capi/leaderboard/getgroupleaderboardview",permalink:"/braincloud-apiref/api/capi/leaderboard/getgroupleaderboardview",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/leaderboard/getgroupleaderboardview.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672193365,formattedLastUpdatedAt:"Dec 28, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"GetGlobalLeaderboardViewByVersion",permalink:"/braincloud-apiref/api/capi/leaderboard/getgloballeaderboardviewbyversion"},next:{title:"GetGroupLeaderboardViewByVersion",permalink:"/braincloud-apiref/api/capi/leaderboard/getgroupleaderboardviewbyversion"}},i={},u=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],p=e=>function(r){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",r)},c=p("PartialServop"),s=p("BrowserWindow"),b=p("Tabs"),g=p("TabItem"),m={toc:u};function f(e){let{components:r,...t}=e;return(0,n.kt)("wrapper",(0,a.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"getgroupleaderboardview"},"GetGroupLeaderboardView"),(0,n.kt)("h2",{id:"overview"},"Overview"),(0,n.kt)("p",null,"Retrieve a view of the group leaderboard surrounding the current group score."),(0,n.kt)(c,{service_name:"leaderboard",operation_name:"GET_GROUP_LEADERBOARD_VIEW",mdxType:"PartialServop"}),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)(s,{mdxType:"BrowserWindow"},(0,n.kt)(b,{mdxType:"Tabs"},(0,n.kt)(g,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'string leaderboardId = "default";\nstring groupId = "actual_group_id";\nSortOrder sort = BrainCloudSocialLeaderboard.SortOrder.HIGH_TO_LOW;\nint beforeCount = 3;\nint afterCount = 4;\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.LeaderboardService.GetGroupLeaderboardView(leaderboardId, groupId, sort, beforeCount, afterCount, successCallback, failureCallback);\n'))),(0,n.kt)(g,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *leaderboardId = "default";\nconst char *groupId = "actual_group_id";\nSortOrder sort = HIGH_TO_LOW;\nint beforeCount = 3;\nint afterCount = 4;\n_bc->getLeaderboardService()->getGroupLeaderboardView(leaderboardId, groupId, sort, beforeCount, afterCount, this);\n'))),(0,n.kt)(g,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *leaderboardId = @"default";\nNSString *groupId = @"actual_group_id";\nSortOrder sort = HIGH_TO_LOW;\nint beforeCount = 3;\nint afterCount = 4;\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc leaderboardService] getGroupLeaderboardView:leaderboardId\n                    groupId:groupId\n                       sort:sort\n                beforeCount:beforeCount\n                 afterCount:afterCount\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,n.kt)(g,{value:"java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String leaderboardId = "default";\nString groupId = "actual_group_id";\nSortOrder sort = SocialLeaderboardService.SortOrder.HIGH_TO_LOW;\nint beforeCount = 3;\nint afterCount = 4;\nthis; // implements IServerCallback\n\n_bc.getLeaderboardService().getGroupLeaderboardView(leaderboardId, groupId, sort, beforeCount, afterCount, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,n.kt)(g,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'var leaderboardId = "default";\nvar groupId = "actual_group_id";\nvar sort = "HIGH_TO_LOW";\nvar beforeCount = 3;\nvar afterCount = 4;\n\n_bc.leaderboard.getGroupLeaderboardView(leaderboardId, groupId, sort, beforeCount, afterCount, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,n.kt)(g,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cfscript"},'var leaderboardId = "default";\nvar groupId = "actual_group_id";\nvar sort = "HIGH_TO_LOW";\nvar beforeCount = 3;\nvar afterCount = 4;\nvar leaderboardProxy = bridge.getLeaderboardServiceProxy();\n\nvar postResult = leaderboardProxy.getGroupLeaderboardView(leaderboardId, groupId, sort, beforeCount, afterCount);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,n.kt)(g,{value:"r",label:"Raw",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "leaderboard",\n    "operation": "GET_GROUP_LEADERBOARD_VIEW",\n    "data": {\n        "leaderboardId": "default",\n        "groupId": "actual_group_id",\n        "sort": "HIGH_TO_LOW",\n        "beforeCount": 3,\n        "afterCount": 4,\n        "versionId": -1\n    }\n}\n'))))),(0,n.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"leaderboardId"),(0,n.kt)("td",{parentName:"tr",align:null},"The id of the leaderboard.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"groupId"),(0,n.kt)("td",{parentName:"tr",align:null},"The id of the group.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"sort"),(0,n.kt)("td",{parentName:"tr",align:null},'Sort order of page. ("HIGH_TO_LOW" or "LOW_TO_HIGH")')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"beforeCount"),(0,n.kt)("td",{parentName:"tr",align:null},"The count of number of players before the current player to include.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"afterCount"),(0,n.kt)("td",{parentName:"tr",align:null},"The count of number of players after the current player to include.")))))}f.isMDXComponent=!0}}]);