"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[26651],{3905:(e,t,r)=>{r.d(t,{Zo:()=>o,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},o=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),u=c(r),f=a,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||i;return r?n.createElement(m,s(s({ref:t},o),{},{components:r})):n.createElement(m,s({ref:t},o))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=f;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:a,s[1]=p;for(var c=2;c<i;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},66769:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const i={},s="Presence",p={unversionedId:"api/capi/presence/index",id:"api/capi/presence/index",title:"Presence",description:"Overview",source:"@site/docs/api/2_capi/presence/index.md",sourceDirName:"api/2_capi/presence",slug:"/api/capi/presence/",permalink:"/braincloud-apiref/api/capi/presence/",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/presence/index.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1671809255,formattedLastUpdatedAt:"Dec 23, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"TriggerStatsEvents",permalink:"/braincloud-apiref/api/capi/playerstatsevent/triggerstatsevents"},next:{title:"ForcePush",permalink:"/braincloud-apiref/api/capi/presence/forcepush"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"API Summary",id:"api-summary",level:3},{value:"Basic Presence",id:"basic-presence",level:3},{value:"Getting Presence Status",id:"getting-presence-status",level:3},{value:"Real-time Presence",id:"real-time-presence",level:3},{value:"System calls",id:"system-calls",level:3}],o=(u="DocCardList",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var u;const d={toc:c};function f(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"presence"},"Presence"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Online Presence allows an app's users to know which of their friends are currently online, what they are doing, and whether they are available to interact."),(0,a.kt)("p",null,"The Presence Service enables the tracking of this live user activity. In order for any of these calls to be functional, the Presence feature must be enabled for your app. ",(0,a.kt)("em",{parentName:"p"},"brainCloud RTT is also required.")),(0,a.kt)("p",null,"See ",(0,a.kt)("strong",{parentName:"p"},"Design | Messaging | Presence")," in the portal."),(0,a.kt)("h3",{id:"api-summary"},"API Summary"),(0,a.kt)("h3",{id:"basic-presence"},"Basic Presence"),(0,a.kt)("p",null,"The user's online status is automatically registered when they connect to brainCloud RTT. From there, the following API calls can be used to update the user's presence state and activity."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/capi/presence/updateactivity"},"UpdateActivity")," - update the user's rich activity data"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/capi/presence/setvisibility"},"SetVisibility")," - hide the user's online state")),(0,a.kt)("h3",{id:"getting-presence-status"},"Getting Presence Status"),(0,a.kt)("p",null,"The following API calls are used to directly request the presence status of other users:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/capi/presence/getpresenceoffriends"},"GetPresenceOfFriends")," - get presence of friends"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/capi/presence/getpresenceofgroup"},"GetPresenceOfGroup")," - get presence of specified group"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/capi/presence/getpresenceofusers"},"GetPresenceOfUsers")," - get presence of specified set of users")),(0,a.kt)("h3",{id:"real-time-presence"},"Real-time Presence"),(0,a.kt)("p",null,"Use these API calls to configure real-time presence updates:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/capi/presence/registerlistenersforfriends"},"RegisterListenersForFriends")," - register listeners with all friends"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/capi/presence/registerlistenersforgroup"},"RegisterListenersForGroup")," - register listeners with the specified group"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/capi/presence/registerlistenersforprofiles"},"RegisterListenersForProfiles")," - register listeners with the specified list of users (profiles)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/capi/presence/stoplistening"},"StopListening")," - deregisters are listeners"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/capi/presence/forcepush"},"ForcePush")," - force an update to all listeners")),(0,a.kt)("h3",{id:"system-calls"},"System calls"),(0,a.kt)("p",null,"The system API calls can be used to register presence for users who are not currently connected via RTT. Useful for Internet-of-Things use cases. Callable by cloud-code only."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/capi/presence/sysinitializepresence"},"SysInitializePresence")," - initialize presence for the specified user "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/capi/presence/sysextendpxexpiry"},"SysExtendPxExpiry")," - extend the presence state"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/capi/presence/systerminatepresence"},"SysTerminatePresence")," - terminate presence for the specified user")),(0,a.kt)(o,{mdxType:"DocCardList"}))}f.isMDXComponent=!0}}]);