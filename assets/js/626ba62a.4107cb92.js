"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[3401],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>b});var r=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=r.createContext({}),s=function(e){var a=r.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):d(d({},a),e)),t},c=function(e){var a=s(e.components);return r.createElement(i.Provider,{value:a},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=n,b=p["".concat(i,".").concat(m)]||p[m]||u[m]||o;return t?r.createElement(b,d(d({ref:a},c),{},{components:t})):r.createElement(b,d({ref:a},c))}));function b(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=t.length,d=new Array(o);d[0]=m;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l[p]="string"==typeof e?e:n,d[1]=l;for(var s=2;s<o;s++)d[s]=t[s];return r.createElement.apply(null,d)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},33579:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>d,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(87462),n=(t(67294),t(3905));const o={},d="PostScoreToDynamicGroupLeaderboardDaysUTC",l={unversionedId:"api/capi/leaderboard/postscoretodynamicgroupleaderboarddaysutc",id:"api/capi/leaderboard/postscoretodynamicgroupleaderboarddaysutc",title:"PostScoreToDynamicGroupLeaderboardDaysUTC",description:"Overview",source:"@site/docs/api/2_capi/leaderboard/postscoretodynamicgroupleaderboarddaysutc.md",sourceDirName:"api/2_capi/leaderboard",slug:"/api/capi/leaderboard/postscoretodynamicgroupleaderboarddaysutc",permalink:"/braincloud-apiref/api/capi/leaderboard/postscoretodynamicgroupleaderboarddaysutc",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/api/2_capi/leaderboard/postscoretodynamicgroupleaderboarddaysutc.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672193365,formattedLastUpdatedAt:"Dec 28, 2022",frontMatter:{},sidebar:"apiSidebar",previous:{title:"ListAllLeaderboards",permalink:"/braincloud-apiref/api/capi/leaderboard/listallleaderboards"},next:{title:"PostScoreToDynamicGroupLeaderboardUTC",permalink:"/braincloud-apiref/api/capi/leaderboard/postscoretodynamicgroupleaderboardutc"}},i={},s=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Method Parameters",id:"method-parameters",level:2}],c=e=>function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",a)},p=c("PartialServop"),u=c("BrowserWindow"),m=c("Tabs"),b=c("TabItem"),y={toc:s};function g(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},y,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"postscoretodynamicgroupleaderboarddaysutc"},"PostScoreToDynamicGroupLeaderboardDaysUTC"),(0,n.kt)("h2",{id:"overview"},"Overview"),(0,n.kt)("p",null,"Post the group score to the given group leaderboard with a rotation type of DAYS and dynamically create if necessary."),(0,n.kt)(p,{service_name:"leaderboard",operation_name:"POST_GROUP_SCORE",mdxType:"PartialServop"}),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)(u,{mdxType:"BrowserWindow"},(0,n.kt)(m,{mdxType:"Tabs"},(0,n.kt)(b,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'string leaderboardId = "default";\nstring groupId = "actual_group_id";\nint score = 10;\nstring data = "{\\"nickname\\":\\"batman\\"}";\nSocialLeaderboardType leaderboardType = "HIGH_VALUE";\nRotationType rotationType = "DAYS";\nInt64 rotationResetTime = 15346346346;\nint retainedCount = 2;\nint numDaysToRotate = 4;\nSuccessCallback successCallback = (response, cbObject) =>\n{\n    Debug.Log(string.Format("Success | {0}", response));\n};\nFailureCallback failureCallback = (status, code, error, cbObject) =>\n{\n    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));\n};\n\n_bc.LeaderboardService.PostScoreToDynamicGroupLeaderboardDaysUTC(leaderboardId, groupId, score, data, leaderboardType, rotationType, rotationResetTime, retainedCount, numDaysToRotate, successCallback, failureCallback);\n'))),(0,n.kt)(b,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},'const char *leaderboardId = "default";\nconst char *groupId = "actual_group_id";\nint score = 10;\nconst char *data = "{\\"nickname\\":\\"batman\\"}";\nconst char *leaderboardType = "HIGH_VALUE";\nconst char *rotationType = "DAYS";\nint64_t rotationResetTime = 15243457543;\nint32_t retainedCount = 2;\nint32_t numDaysToRotate = 4;\n\n_bc->getLeaderboardService()->postScoreToDynamicGroupLeaderboardDaysUTC(leaderboardId, groupId, score, data, leaderboardType, rotationType, rotationResetTime, retainedCount, numDaysToRotate, this);\n'))),(0,n.kt)(b,{value:"objectivec",label:"Objective-C",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-objectivec"},'NSString *leaderboardId = @"default";\nNSString *groupId = @"actual_group_id";\nint score = 10;\nNSString *data = @"{\\"nickname\\":\\"batman\\"}";\nNSString *rotationType = @"DAYS";\nNSDate *rotationReset = [NSDate date];\nint retainedCount = 2;\nint numDaysToRotate = 4;\nBCCompletionBlock successBlock;      // define callback\nBCErrorCompletionBlock failureBlock; // define callback\n\n[[_bc leaderboardService] postScoreToDynamicGroupLeaderboardDaysUTC:leaderboardId\n                    groupId:groupId\n                      score:score\n                       data:data\n            leaderboardType:leaderboardType\n               rotationType:rotationType\n          rotationResetTime:rotationResetTime\n              retainedCount:retainedCount\n            numDaysToRotate:numDaysToRotate\n            completionBlock:successBlock\n       errorCompletionBlock:failureBlock\n                   cbObject:nil];\n'))),(0,n.kt)(b,{value:"java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'String leaderboardId = "default";\nString groupId = "actual_group_id";\nint score = 10;\nString data = "{\\"nickname\\":\\"batman\\"}";\nString leaderboardType = "HIGH_VALUE";\nString rotationType = "DAYS";\nlong rotationResetTime = 15623462346;\nint retainedCount = 2;\nint numDaysToRotate = 4;\nthis; // implements IServerCallback\n\n_bc.getLeaderboardService().postScoreToDynamicGroupLeaderboardDaysUTC(leaderboardId, groupId, score, data, leaderboardType, rotationType, rotationResetTime, retainedCount, numDaysToRotate, this);\n\npublic void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)\n{\n    System.out.print(String.format("Success | %s", jsonData.toString()));\n}\npublic void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)\n{\n    System.out.print(String.format("Failed | %d %d %s", statusCode,  reasonCode, jsonError.toString()));\n}\n'))),(0,n.kt)(b,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'var leaderboardId = "default";\nvar groupId = "actual_group_id";\nvar score = 10;\nvar data = {\n    "nickname": "batman"\n};\nvar leaderboardType = "HIGH_VALUE";\nvar rotationType = "DAYS";\nvar rotationResetTime = 158778236487;\nvar retainedCount = 2;\nvar numDaysToRotate = 4;\n\n_bc.leaderboard.postScoreToGroupLeaderboardUTC(leaderboardId, groupId, score, data, leaderboardType, rotationType, rotationResetTime, retainedCount, numDaysToRotate, result =>\n{\n    var status = result.status;\n    console.log(status + " : " + JSON.stringify(result, null, 2));\n});\n'))),(0,n.kt)(b,{value:"cfs",label:"Cloud Code",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cfscript"},'var leaderboardId = "default";\nvar groupId = "actual_group_id";\nvar score = 10;\nvar data = {\n    "nickname": "batman"\n};\nvar leaderboardType = "HIGH_VALUE";\nvar rotationType = "DAYS";\nvar rotationResetTime = 1572450892830;\nvar retainedCount = 2;\nvar numDaysToRotate = 4;\nvar leaderboardProxy = bridge.getLeaderboardServiceProxy();\n\nvar postResult = leaderboardProxy.postScoreToDynamicGroupLeaderboardDaysUTC(leaderboardId, groupId, score, data, leaderboardType, rotationType, rotationResetTime, retainedCount, numDaysToRotate);\nif (postResult.status == 200) {\n    // Success!\n}\n'))),(0,n.kt)(b,{value:"r",label:"Raw",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-r"},'{\n    "service": "leaderboard",\n    "operation": "POST_GROUP_SCORE_DYNAMIC",\n    "data": {\n        "leaderboardId": "groupLeaderboardConfig",\n        "groupId": "d25e3e1c-089f-4816-8534-f958ba3c9dac",\n        "score": 10,\n        "data": {\n          "nickname": "batman"\n        },\n        "leaderboardType": "HIGH_VALUE",\n        "rotationType": "DAYS",\n        "rotationResetTime": 1572454461001,\n        "retainedCount": 2\n        "numDaysToRotate": 4\n      }\n}\n'))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"JSON Response"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": 200,\n    "data": null\n}\n'))),(0,n.kt)("h2",{id:"method-parameters"},"Method Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"leaderboardId"),(0,n.kt)("td",{parentName:"tr",align:null},"The id of the leaderboard.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"groupId"),(0,n.kt)("td",{parentName:"tr",align:null},"The id of the group.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"score"),(0,n.kt)("td",{parentName:"tr",align:null},"The score to post.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"data"),(0,n.kt)("td",{parentName:"tr",align:null},"Optional user-defined data to post with the score.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"leaderboardType"),(0,n.kt)("td",{parentName:"tr",align:null},"the type of leaderboard")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"rotationType"),(0,n.kt)("td",{parentName:"tr",align:null},"daily, weekly, monthly")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"rotationResetTime"),(0,n.kt)("td",{parentName:"tr",align:null},"the date to reset the rotation in milliseconds UTC")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"retainedCount"),(0,n.kt)("td",{parentName:"tr",align:null},"times to retain the leaderboard")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"numDaysToRotate"),(0,n.kt)("td",{parentName:"tr",align:null},"How many days between each rotation")))))}g.isMDXComponent=!0}}]);