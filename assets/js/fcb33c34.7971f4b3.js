"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[51996],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),u=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(r),g=a,m=d["".concat(i,".").concat(g)]||d[g]||c[g]||o;return r?n.createElement(m,s(s({ref:t},p),{},{components:r})):n.createElement(m,s({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=g;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[d]="string"==typeof e?e:a,s[1]=l;for(var u=2;u<o;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},18314:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var n=r(87462),a=(r(67294),r(3905));const o={title:"CC Tutorial3 - Working with Entities",date:"2016-02-25"},s=void 0,l={unversionedId:"learn/cloud-code-central/cloud-code-tutorials/cloud-code-tutorial3-working-with-entities/index",id:"learn/cloud-code-central/cloud-code-tutorials/cloud-code-tutorial3-working-with-entities/index",title:"CC Tutorial3 - Working with Entities",description:"This tutorial uses\xa0brainCloud's Global and User Entity\xa0features.",source:"@site/docs/learn/4_cloud-code-central/cloud-code-tutorials/cloud-code-tutorial3-working-with-entities/index.md",sourceDirName:"learn/4_cloud-code-central/cloud-code-tutorials/cloud-code-tutorial3-working-with-entities",slug:"/learn/cloud-code-central/cloud-code-tutorials/cloud-code-tutorial3-working-with-entities/",permalink:"/braincloud-apiref/learn/cloud-code-central/cloud-code-tutorials/cloud-code-tutorial3-working-with-entities/",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/learn/4_cloud-code-central/cloud-code-tutorials/cloud-code-tutorial3-working-with-entities/index.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672679892,formattedLastUpdatedAt:"Jan 2, 2023",frontMatter:{title:"CC Tutorial3 - Working with Entities",date:"2016-02-25"},sidebar:"learnSidebar",previous:{title:"CC Tutorial2 - Making API calls",permalink:"/braincloud-apiref/learn/cloud-code-central/cloud-code-tutorials/cloud-code-tutorial2-making-api-calls/"},next:{title:"CC Tutorial4 - Pre and Post Hooks",permalink:"/braincloud-apiref/learn/cloud-code-central/cloud-code-tutorials/cloud-code-tutorial4-pre-and-post-hooks/"}},i={},u=[{value:"Background",id:"background",level:2},{value:"Step 1 - Create, Delete and List Groups",id:"step-1---create-delete-and-list-groups",level:2},{value:"CreateGroup()\xa0Script",id:"creategroupscript",level:3},{value:"DeleteGroup()\xa0Script",id:"deletegroupscript",level:3},{value:"ListGroups() code",id:"listgroups-code",level:3},{value:"Step 2 - Test the Group Management\xa0scripts",id:"step-2---test-the-group-managementscripts",level:2},{value:"Step 3 - Manage Members",id:"step-3---manage-members",level:2},{value:"JoinGroup()",id:"joingroup",level:3},{value:"LeaveGroup()",id:"leavegroup",level:3},{value:"Step 4 - Test some more",id:"step-4---test-some-more",level:2},{value:"Step 5 - Explore",id:"step-5---explore",level:2}],p={toc:u};function d(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This tutorial uses\xa0brainCloud's ",(0,a.kt)("strong",{parentName:"p"},"Global")," and ",(0,a.kt)("strong",{parentName:"p"},"User Entity"),"\xa0features."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Global Entities")," are json objects that are available globally to ",(0,a.kt)("em",{parentName:"p"},"all users")," of a system (subject to the specified ACL of the object). ",(0,a.kt)("em",{parentName:"p"},"User Entities"),"\xa0are\xa0local to a single user, and thus largely private (though there are mechanisms in place to share them). ",(0,a.kt)("em",{parentName:"p"},"For more information on brainCloud data features, see the ",(0,a.kt)("a",{parentName:"em",href:"/learn/key-concepts/data/"},"Cloud Data")," section of the brainCloud documentation.")),(0,a.kt)("p",null,"The combination of Cloud Code working together with Global and User Entities is very powerful in brainCloud."),(0,a.kt)("h2",{id:"background"},"Background"),(0,a.kt)("p",null,"This example uses a combination of ",(0,a.kt)("em",{parentName:"p"},"Cloud Code"),", ",(0,a.kt)("em",{parentName:"p"},"Global Entities")," and ",(0,a.kt)("em",{parentName:"p"},"User Entities")," to build a ",(0,a.kt)("strong",{parentName:"p"},"Group (or Clan)"),"\xa0feature that represents a collection of end-users.\xa0The operations that we will support include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"CreateGroup()"),(0,a.kt)("li",{parentName:"ul"},"DeleteGroup()"),(0,a.kt)("li",{parentName:"ul"},"ListGroups()"),(0,a.kt)("li",{parentName:"ul"},"JoinGroup()"),(0,a.kt)("li",{parentName:"ul"},"LeaveGroup()")),(0,a.kt)("h2",{id:"step-1---create-delete-and-list-groups"},"Step 1 - Create, Delete and List Groups"),(0,a.kt)("p",null,"We'll start with the overall group management methods - Tut3_CreateGroup(), Tut3_DeleteGroup() and Tut3_ListGroups(). Create methods using the listings below."),(0,a.kt)("h3",{id:"creategroupscript"},"CreateGroup()\xa0Script"),(0,a.kt)("p",null,"Parameters for Tut3_CreateGroup()"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'{\n\xa0 \xa0 \xa0"groupName": "The Tater Tots"\n}\n')),(0,a.kt)("p",null,"Tut3_CreateGroup script"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// Tut3_CreateGroup() - creates a new group\n\n// Retrieve the parameter\nvar groupName = data.groupName;\nvar results = {};\n// Grab the Global Entity service proxy from the bridge\nvar globalEntityService = bridge.getGlobalEntityServiceProxy();\n// First check to see if a group of this name already exists\nvar searchResults = globalEntityService.getListByIndexedId(groupName, 1);\n// If we find one, abort, cause the name is already taken\nif (searchResults.data.entityList.length > 0)\n{\n    results.message = "Failure - group already exists.";\n    results.group = null;\n}\nelse\n{\n// Create the groupData to store in the entities\n    var groupData = {};\n    groupData.groupName = groupName;\n    groupData.members = {};\n    var aclPermissions = {};\n    aclPermissions.other = 2; // public read-write permission\n    var createResults = globalEntityService.createEntityWithIndexedId("group", groupName, 0, aclPermissions, groupData);\n    if (createResults.data.entityId !== null)\n    {\n      results.message = "Success - created new group.";\n      results.group = createResults.data;\n    }\n    else\n    {\n      results.message = "Unknown error occurred creating group";\n      results.group = createResults.data;\n    }\n}\nresults;\n')),(0,a.kt)("h3",{id:"deletegroupscript"},"DeleteGroup()\xa0Script"),(0,a.kt)("p",null,"Parameters for Tut3_DeleteGroup()"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "groupId": "aGroupGUID"\n}\n')),(0,a.kt)("p",null,"Tut3_DeleteGroup script"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// Tut3_DeleteGroup() - deletes the specified group\n// Retrieve the parameter\nvar groupId = data.groupId;\nvar results = {};\n// Grab the Global Entity service proxy from the bridge\nvar globalEntityService = bridge.getGlobalEntityServiceProxy();\n// Find the specified group\nvar searchResults = globalEntityService.readEntity(groupId);\nif (searchResults.status == "200") {\n    // Did we find it?\n    if (searchResults.data.entityType == "group") {\n      // Grab the identifying info\n      var version = searchResults.data.version;\n      // Delete the group\n      var deleteResults = globalEntityService.deleteEntity(groupId, version);\n      if (deleteResults.status == "200") {\n        results.message = "Successfully deleted group.";\n        results.numDeleted = 1;\n      } else {\n        results.message = "unknown error";\n      }\n    } else {\n      results.message = "Entity is not a group.";\n    }\n} else {\n    results.message = "Entity does not exist.";\n}\nresults;\n')),(0,a.kt)("h3",{id:"listgroups-code"},"ListGroups() code"),(0,a.kt)("p",null,"Tut3_ListGroups() script"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// Tut3_ListGroups() - lists all the groups\n// No parameters to retrieve\nvar results = {};\n// Grab the Global Entity service proxy from the bridge\nvar globalEntityService = bridge.getGlobalEntityServiceProxy();\n// Get all groups of type group\nvar searchResults = globalEntityService.getList({entityType: "group"}, {"data.groupName": 1}, 100);\n// Declare the groups array\nresults.groups = [];\n// Did we find it?\nif (searchResults.data.entityList.length > 0)\n{\n    results.message = "Listing all groups";\n    for (var i = 0; i < searchResults.data.entityList.length; i++) {\n      var groupData = {};\n      groupData.name = searchResults.data.entityList[i].data.groupName;\n      groupData.groupId = searchResults.data.entityList[i].entityId;\n      results.groups.push(groupData);\n    }\n} else {\n    results.message = "No groups found";\n}\nresults;\n')),(0,a.kt)("h2",{id:"step-2---test-the-group-managementscripts"},"Step 2 - Test the Group Management\xa0scripts"),(0,a.kt)("p",null,"Once you've got the routines written, test them using the API Explorer. Remember, if you don't see any of the scripts, you probably don't have ",(0,a.kt)("em",{parentName:"p"},"Client Callable")," set to ",(0,a.kt)("strong",{parentName:"p"},"TRU"),"E."),(0,a.kt)("p",null,"Once you've created a few entities with the scripts, take a moment to check out the data via our ",(0,a.kt)("em",{parentName:"p"},"Global Entities Viewer"),"."),(0,a.kt)("p",null,"To\xa0use the viewer:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Click on the ",(0,a.kt)("strong",{parentName:"li"},"Monitoring")," tab"),(0,a.kt)("li",{parentName:"ul"},"Choose ",(0,a.kt)("strong",{parentName:"li"},"Global Monitoring | Global Entities")),(0,a.kt)("li",{parentName:"ul"},"You can filter the list using the ",(0,a.kt)("em",{parentName:"li"},"Filter by Type")," drop-down box"),(0,a.kt)("li",{parentName:"ul"},"You can ",(0,a.kt)("em",{parentName:"li"},"View/Edit"),' an entity by clicking on the "eyeball"')),(0,a.kt)("p",null,(0,a.kt)("a",{target:"_blank",href:r(39514).Z},(0,a.kt)("img",{src:r(91464).Z,width:"1024",height:"496"}))),(0,a.kt)("h2",{id:"step-3---manage-members"},"Step 3 - Manage Members"),(0,a.kt)("p",null,"Now that we've got the groups being created, lets\xa0put the code in place to manage the members."),(0,a.kt)("p",null,"We'll start by adding a JoinGroup() method."),(0,a.kt)("h3",{id:"joingroup"},"JoinGroup()"),(0,a.kt)("p",null,"Parameters for Tut3_JoinGroup()"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "groupId": "aGlobalEntityId",\n  "memberId": "aProfileId"\n}\n')),(0,a.kt)("p",null,'Tut3_JoinGroup() script"'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// Tut3_JoinGroup() - add myself to the specified group\n\n// Retrieve the parameter\nvar groupId = data.groupId;\nvar memberId = data.memberId;\n\nvar results = {};\n\nvar apiStatus;\n\n// Grab the Global Entity and User Entity service proxies\nvar globalEntityService = bridge.getGlobalEntityServiceProxy();\nvar userEntityService = bridge.getEntityServiceProxy();\n\n// Retrieve the Group\nvar group = globalEntityService.readEntity(groupId).data;\n\n// Confirm that we found it and that it\'s a group\nif ( (group !== null) && (group.entityType == "group") ) {\n    \n    // Add a new member to the group\n    var memberRecord = {};\n    memberRecord["profileId"] = memberId;\n    \n    // Storing the members in a map is a bit more flexible than an array\n    group.data.members[memberId] = memberRecord;\n    \n    // Write the updated group\n    apiStatus = globalEntityService.updateEntity(groupId, group.version, group.data);\n    if (apiStatus.status == 200) {\n        \n         // Store a reference from the user to the group in a user entity\n        var userRefToGroup = {};\n        userRefToGroup["groupId"] = groupId;\n        \n        // Update via the singleton API - the entity will be created if it \n        // doesn\'t already exist\n        apiStatus = userEntityService.updateSingleton(\n            "myGroup",          // Entity type name (all you need for singletons)\n            userRefToGroup,     // Entity data to store\n            { "other": 0 });    // Keep the object private\n        if (apiStatus.status == 200) {\n            results.success = true;\n            results.message = "Group updated!";\n            results.members = group.data.members;\n        } else {\n            results.success = false;\n            results.message = \'Error writing User Entity!\';\n            results.apiStatus = apiStatus;\n        }\n    } else {\n        results.success = false;\n        results.message = \'Error writing Global Entity!\';\n        results.apiStatus = apiStatus;\n    }\n} else {\n    results.success = false;\n    results.message = "Group not found!";\n    results.apiStatus = null;\n}\n\nresults;\n')),(0,a.kt)("p",null,"And we'll round things off with the ability to leave a group."),(0,a.kt)("h3",{id:"leavegroup"},"LeaveGroup()"),(0,a.kt)("p",null,"Parameters for Tut3_LeaveGroup()"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "groupId": "aGlobalEntityId",\n  "memberId": "aProfileId"\n}\n')),(0,a.kt)("p",null,"Tut3_LeaveGroup() code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// Tut3_LeaveGroup() - remove myself to the specified group\n\n// Retrieve the parameter\nvar groupId = data.groupId;\nvar memberId = data.memberId;\n\nvar results = {};\n\nvar apiStatus;\n\n// Grab the Global Entity and User Entity service proxies\nvar globalEntityService = bridge.getGlobalEntityServiceProxy();\nvar userEntityService = bridge.getEntityServiceProxy();\n\n// Retrieve the Group\nvar group = globalEntityService.readEntity(groupId).data;\n\n// Confirm that we found it and that it\'s a group\nif ( (group !== null) && (group.entityType == "group") ) {\n    \n    // Delete the entry from the members map\n    delete group.data.members[memberId];\n    \n    // Write the updated group\n    apiStatus = globalEntityService.updateEntity(groupId, group.version, group.data);\n    if (apiStatus.status == 200) {\n        \n         // Remove the group reference from the user entity\n        var userRefToGroup = {};\n        userRefToGroup["groupId"] = null;\n        \n        // Update via the singleton API - the entity will be created if it \n        // doesn\'t already exist\n        apiStatus = userEntityService.updateSingleton(\n            "myGroup",          // Entity type name (all you need for singletons)\n            userRefToGroup,     // Entity data to store\n            { "other": 0 });    // Keep the object private\n        if (apiStatus.status == 200) {\n            results.success = true;\n            results.message = "Group updated!";\n            results.members = group.data.members;\n        } else {\n            results.success = false;\n            results.message = \'Error writing User Entity!\';\n            results.apiStatus = apiStatus;\n        }\n    } else {\n        results.success = false;\n        results.message = \'Error writing Global Entity!\';\n        results.apiStatus = apiStatus;\n    }\n} else {\n    results.success = false;\n    results.message = "Group not found!";\n    results.apiStatus = null;\n}\n')),(0,a.kt)("p",null,"results;"),(0,a.kt)("h2",{id:"step-4---test-some-more"},"Step 4 - Test some more"),(0,a.kt)("p",null,"Once again, utilize the ",(0,a.kt)("strong",{parentName:"p"},"API Explorer")," to test out these new methods."),(0,a.kt)("p",null,"And confirm that the Global Entities are being written properly using the ",(0,a.kt)("strong",{parentName:"p"},"Global Monitoring | Global Entities")," viewer."),(0,a.kt)("p",null,"Finally, we're utilizing User Entities now too - so go to ",(0,a.kt)("strong",{parentName:"p"},"User Monitoring")," and go to the ",(0,a.kt)("strong",{parentName:"p"},"User Entities")," page to confirm the user's reference to the group that they belong to."),(0,a.kt)("h2",{id:"step-5---explore"},"Step 5 - Explore"),(0,a.kt)("p",null,"There is a lot more functionality that can be built upon the base that we've provided here. Happy Coding!"))}d.isMDXComponent=!0},39514:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/files/Tut3_GlobalEntities-1024x496-bc39a6da4bcc3ad50bf5689d39a2a9bd.png"},91464:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/Tut3_GlobalEntities-1024x496-bc39a6da4bcc3ad50bf5689d39a2a9bd.png"}}]);