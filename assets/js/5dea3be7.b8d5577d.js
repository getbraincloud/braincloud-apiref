"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[35060],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(a),m=n,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return a?r.createElement(h,o(o({ref:t},c),{},{components:a})):r.createElement(h,o({ref:t},c))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:n,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},17055:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=a(87462),n=(a(67294),a(3905));const i={title:"Cloud Data",date:"2014-09-08"},o=void 0,l={unversionedId:"learn/key-concepts/data/index",id:"learn/key-concepts/data/index",title:"Cloud Data",description:"brainCloud provides a very flexible set of APIs for storing and retrieving the data for your app and its users.",source:"@site/docs/learn/1_key-concepts/data/index.md",sourceDirName:"learn/1_key-concepts/data",slug:"/learn/key-concepts/data/",permalink:"/braincloud-apiref/learn/key-concepts/data/",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/learn/1_key-concepts/data/index.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672679892,formattedLastUpdatedAt:"Jan 2, 2023",frontMatter:{title:"Cloud Data",date:"2014-09-08"},sidebar:"learnSidebar",previous:{title:"Cloud Code",permalink:"/braincloud-apiref/learn/key-concepts/cloud-code/"},next:{title:"Gamification",permalink:"/braincloud-apiref/learn/key-concepts/gamification/"}},s={},p=[],c={toc:p};function d(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"brainCloud provides a very flexible set of APIs for storing and retrieving the data for your app and its users."),(0,n.kt)("p",null,(0,n.kt)("img",{src:a(8898).Z,width:"1024",height:"741"})),(0,n.kt)("p",null,"These APIs are organized by scope:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"User (Player) Scope")," -\xa0the data stored and retrieved using these APIs are local to a single user* of your application."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Global (App) Scope")," - the data stored and retrieved using these APIs are accessible to all users of the application")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Note, as a special case, the ",(0,n.kt)("strong",{parentName:"li"},"Shared Data APIs")," allow users to access the data of other users. Example uses are multiplayer in games, shared document or list access, etc.")),(0,n.kt)("p",null,"Within each scope, the data APIs are organized according to the type of data to be managed."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Entities")," - Entities (sometimes called ",(0,n.kt)("em",{parentName:"li"},"Deep Entities"),") in brainCloud are full JSON objects - and can be as simple or complex as you'd like. \xa0Entity objects have a unique id (generated by brainCloud), together with a developer-defined\xa0",(0,n.kt)("em",{parentName:"li"},"entity\xa0type")," - which is\xa0useful for organizing the objects (and doing specific retrievals). \xa0Entity objects are generally retrieved in bulk when an app starts and then updated in real-time while the user interacts with it. Entities updates can be protected using a version number mechanic - where updates are only allowed if the version # in the update matches the one in the cloud (which is then automatically incremented after the update). ",(0,n.kt)("em",{parentName:"li"},"Entities are created and edited at run-time only"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Statistics")," - Statistics are atomic numeric values that are manipulated via a special concurrency safe API. \xa0Statistics rules must be ",(0,n.kt)("em",{parentName:"li"},"pre-defined at design-time")," in brainCloud - and are managed in real-time by brainCloud. \xa0Statistics are not set directly - they are initialized to a starting value (defined in the rule), and then operated upon by special increment, decrement, etc. methods. \xa0In this way, statistics are concurrency-safe both at the user and global level. Another key feature of Statistics is that they are tightly integrated into the metagame (Gamification) systems of brainCloud. \xa0Statistics can be used to trigger the completion of milestones and quests. \xa0They can also be rewarded for leveling up and completing milestones and quests.\xa0 They can be used as criteria for defining Segments for promotions. \xa0Finally, they are very visible in the User (Player) Monitoring screens."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Attributes"),' - Attributes are somewhat similar to statistics, but the "value" portion of the key + value pair does not have to be numeric. \xa0In addition, attributes do not have rules - your app is free to create and assign attributes to users in any variety at any time. \xa0Note that brainCloud\xa0currently only supports attributes at the user level.')),(0,n.kt)("p",null,"Finally, there are two additional data APIs\xa0available to the developer:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Friend Data (User Scope)"),"\xa0- Friend data is used primarily to publish information about the current user (to be viewable by other users). \xa0This is most commonly used for social leaderboards, where key information about the player (name, xp level, etc.) provides a better context for competition. \xa0The structure of this data is completely under the control of the app."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Global Properties (App Scope)")," - Global properties are set at design-time (using the portal), and available to all users of the app. \xa0These are a convenient (and dynamic) replacement for global constants or a properties file. \xa0They are generally read when the app first starts - making it easy to tweak the behavior of your app in the field (without deploying an updated build).")),(0,n.kt)("p",null,"Related Information:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Custom Entities")," - API accessed via ",(0,n.kt)("a",{parentName:"li",href:"/api/capi/customentity"},"CustomEntity"),". Custom Entity collections can be defined in the Portal under ",(0,n.kt)("strong",{parentName:"li"},"Design | Cloud Data | Custom Entities")," and viewed and edited in ",(0,n.kt)("strong",{parentName:"li"},"Global Monitoring")," and ",(0,n.kt)("strong",{parentName:"li"},"User Monitoring")," sections."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"User Entities")," - API accessed via ",(0,n.kt)("a",{parentName:"li",href:"/api/capi/entity"},"BrainCloudEntity"),". User Entities can be viewed and edited in the Portal under ",(0,n.kt)("strong",{parentName:"li"},"User (Player) Monitoring")," section."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Global Entities")," - API accessed via ",(0,n.kt)("a",{parentName:"li",href:"/api/capi/globalentity"},"BrainCloudGlobalEntity"),". Global Entities can be viewed and edited in the Portal in the\xa0",(0,n.kt)("strong",{parentName:"li"},"Global Monitoring")," section."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Shared Data API")," - API accessed via ",(0,n.kt)("a",{parentName:"li",href:"/api/capi/entity"},"BrainCloudEntity")," -- set GetSharedEntitiesForPlayerId()."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"User (Player) Statistics")," - API accessed via ",(0,n.kt)("a",{parentName:"li",href:"/api/capi/playerstats"},"BrainCloudPlayerStatistics"),". \xa0Statistics rules are defined in the Portal in the ",(0,n.kt)("strong",{parentName:"li"},"Design | Statistics Rules")," section."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Global Statistics")," - API accessed via ",(0,n.kt)("a",{parentName:"li",href:"/api/capi/globalstats"},"BrainCloudGlobalStatistics"),". \xa0Statistics rules are defined in the Portal in the ",(0,n.kt)("strong",{parentName:"li"},"Design | Statistics Rules")," section."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"User Attributes")," - API accessed via ",(0,n.kt)("a",{parentName:"li",href:"/api/capi/playerstate"},"BrainCloudPlayerState"),". \xa0User attributes can be viewed and edited in the ",(0,n.kt)("strong",{parentName:"li"},"User (Player) Monitoring | Attributes")," section of the Portal."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Friend Data")," - API accessed via ",(0,n.kt)("a",{parentName:"li",href:"/api/capi/friend"},"BrainCloudFriend"),". \xa0Not currently viewable via the player monitor."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Global Properties")," - API accessed via ",(0,n.kt)("a",{parentName:"li",href:"/api/capi/globalapp"},"BrainCloudGlobalApp"),". \xa0Global properties can be viewed and edited in the ",(0,n.kt)("strong",{parentName:"li"},"Design | Custom Config | Global Properties")," section of the Portal."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Groups")," - API accessed via ",(0,n.kt)("a",{parentName:"li",href:"/api/capi/group"},"BrainCloudGroup")," and ",(0,n.kt)("a",{parentName:"li",href:"/api/capi/group"},"BrainCloudGroupEntities"),". Data can be viewed and edited in the ",(0,n.kt)("strong",{parentName:"li"},"Monitoring | Group Monitoring")," sections of the Portal.")))}d.isMDXComponent=!0},8898:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Cloud-Data-1024x741-3fbf27a4aa32402a97fc38950fcff14a.png"}}]);