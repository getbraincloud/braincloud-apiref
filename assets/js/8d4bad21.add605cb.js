"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[51069],{3905:(e,r,a)=>{a.d(r,{Zo:()=>d,kt:()=>m});var t=a(67294);function n(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function o(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?o(Object(a),!0).forEach((function(r){n(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function l(e,r){if(null==e)return{};var a,t,n=function(e,r){if(null==e)return{};var a,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||(n[a]=e[a]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=t.createContext({}),c=function(e){var r=t.useContext(s),a=r;return e&&(a="function"==typeof e?e(r):i(i({},r),e)),a},d=function(e){var r=c(e.components);return t.createElement(s.Provider,{value:r},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},h=t.forwardRef((function(e,r){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(a),h=n,m=u["".concat(s,".").concat(h)]||u[h]||p[h]||o;return a?t.createElement(m,i(i({ref:r},d),{},{components:a})):t.createElement(m,i({ref:r},d))}));function m(e,r){var a=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=h;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[u]="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}h.displayName="MDXCreateElement"},43720:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=a(87462),n=(a(67294),a(3905));const o={title:"Error Handling",date:"2015-06-09"},i=void 0,l={unversionedId:"learn/sdk-tutorials/general-api-tutorials/error-handling/index",id:"learn/sdk-tutorials/general-api-tutorials/error-handling/index",title:"Error Handling",description:"When using brainCloud, your app will need to handle certain error conditions. There are two main types of errors that can occur while using the brainCloud client library:",source:"@site/docs/learn/6_sdk-tutorials/general-api-tutorials/error-handling/index.md",sourceDirName:"learn/6_sdk-tutorials/general-api-tutorials/error-handling",slug:"/learn/sdk-tutorials/general-api-tutorials/error-handling/",permalink:"/braincloud-apiref/learn/sdk-tutorials/general-api-tutorials/error-handling/",draft:!1,editUrl:"https://github.com/getbraincloud/braincloud-apiref/tree/main/docs/learn/6_sdk-tutorials/general-api-tutorials/error-handling/index.md",tags:[],version:"current",lastUpdatedBy:"jasonl",lastUpdatedAt:1672679892,formattedLastUpdatedAt:"Jan 2, 2023",frontMatter:{title:"Error Handling",date:"2015-06-09"},sidebar:"learnSidebar",previous:{title:"General API Tutorials",permalink:"/braincloud-apiref/learn/sdk-tutorials/general-api-tutorials/"},next:{title:"File Upload API",permalink:"/braincloud-apiref/learn/sdk-tutorials/general-api-tutorials/file-upload-api/"}},s={},c=[{value:"Unity/C# library",id:"unityc-library",level:3},{value:"C++\xa0library",id:"clibrary",level:3},{value:"Java\xa0library",id:"javalibrary",level:3},{value:"Javascript\xa0library",id:"javascriptlibrary",level:3},{value:"Cloud Code",id:"cloud-code",level:3}],d={toc:c};function u(e){let{components:r,...a}=e;return(0,n.kt)("wrapper",(0,t.Z)({},d,a,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"When using brainCloud, your app will need to handle certain error conditions. There are two main types of errors that can occur while using the brainCloud client library:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Network errors - A network error indicates that a packet was sent to brainCloud but no response was received."),(0,n.kt)("li",{parentName:"ol"},"API call errors\xa0- A packet was sent to (and received by) brainCloud but resulted in a non-200 HTTP response")),(0,n.kt)("p",null,"In order to effectively respond to these error conditions, developers need to implement error handlers. A list of error reason codes returned by brainCloud can be found here:"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/api/appendix/reasoncodes"},"Reason Codes Appendix")),(0,n.kt)("p",null,"Below\xa0are the specifics for implementing error handlers for the various supported brainCloud client platforms."),(0,n.kt)("h3",{id:"unityc-library"},"Unity/C# library"),(0,n.kt)("p",null,"All API calls have two\xa0callback delegates as parameters, one for success and one for failure:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'/// <summary>\n/// Success callback for an API method.\n/// </summary>\n/// <param name="jsonResponse">The json response from the server</param>\n/// <param name="cbObject">The user supplied callback object</param>\npublic delegate void SuccessCallback(string jsonResponse, object cbObject);\n\n/// <summary>\n/// Failure callback for an API method.\n/// </summary>\n/// <param name="status">The http status code</param>\n/// <param name="reasonCode">The error reason code</param>\n/// <param name="jsonError">The error json string</param>\n/// <param name="cbObject">The user supplied callback object</param>\npublic delegate void FailureCallback(int status, int reasonCode, string jsonError, object cbObject)\n')),(0,n.kt)("p",null,"For example, the AuthenticateUniversal method is defined as follows:"),(0,n.kt)("p",null,"public void AuthenticateUniversal(string userid, string password, bool forceCreate, SuccessCallback success, FailureCallback failure);"),(0,n.kt)("p",null,"If authentication succeeds, the success callback function will be called with the json response from brainCloud. The user-supplied callback object will also be returned (in case you need to keep track of some contextual information)."),(0,n.kt)("p",null,"If authentication fails, the HTTP status code, a reason code, and a json response describing the error will be returned. In order to handle the error effectively, you can refer to the ",(0,n.kt)("a",{parentName:"p",href:"/api/appendix/reasoncodes"},"Reason Code Appendix"),"."),(0,n.kt)("h3",{id:"clibrary"},"C++\xa0library"),(0,n.kt)("p",null,'The C++ library has a slightly different mechanism for dealing with callbacks. Specifically, all API methods take in an "IServerCallback" pointer. This interface declares the following methods:'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"/**\n* The serverCallback() method returns server data back to the layer\n* interfacing with the BrainCloud library.\n*\n* @param serviceName - name of the requested service\n* @param serviceOperation - requested operation\n* @param jsonData - returned data from the server\n*/\nvirtual void serverCallback( ServiceName serviceName, ServiceOperation serviceOperation, std::string const & jsonData) = 0;\n\n/**\n* Errors are returned back to the layer which is interfacing with the\n* BrainCloud library through the serverError() callback.\n*\n* A server error might indicate a failure of the client to communicate\n* with the server after N retries.\n*\n* @param serviceName The service name being called\n* @param serviceOperation The service operation being called\n* @param statusCode The error status return code (400, 403, 500, etc)\n* @param reasonCode The brainCloud reason code (see reason codes on apidocs site)\n* @param jsonError The error json string\n*/\nvirtual void serverError( ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, const std::string & jsonError) = 0;\n")),(0,n.kt)("p",null,"For example, the AuthenticateUniversal method is defined as follows:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"void authenticateUniversal(const char * in_userid, const char * in_password, bool in_forceCreate, IServerCallback * in_callback);\n")),(0,n.kt)("h3",{id:"javalibrary"},"Java\xa0library"),(0,n.kt)("p",null,"The Java library is similar to C++ in that there is an IServerCallback interface that can be supplied to any API call. This interface declares the following methods:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"public interface IServerCallback {\n    /**\n     * The serverCallback() method returns server data back to the layer\n     * interfacing with the BrainCloud library.\n     *\n     * @param serviceName - name of the requested service\n     * @param serviceOperation - requested operation\n     * @param jsonData - returned data from the server\n     */\n   void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData);\n\n    /**\n     * Errors are returned back to the layer which is interfacing with the\n     * BrainCloud library through the serverError() callback.\n     *\n     * A server error might indicate a failure of the client to communicate\n     * with the server after N retries.\n     *\n     * @param statusCode The error status return code (400, 403, 500, etc)\n     * @param reasonCode The brainCloud reason code (see reason codes on apidocs site)\n     * @param jsonError The error json string\n     */\n   void serverError(int statusCode, int reasonCode, String jsonError);\n}\n")),(0,n.kt)("p",null,"For example, the AuthenticateUniversal method is defined as follows:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"public void authenticateUniversal(String userId, String userPassword, boolean forceCreate, IServerCallback callback);\n")),(0,n.kt)("h3",{id:"javascriptlibrary"},"Javascript\xa0library"),(0,n.kt)("p",null,"Coming soon!"),(0,n.kt)("h3",{id:"cloud-code"},"Cloud Code"),(0,n.kt)("p",null,"See ",(0,n.kt)("a",{parentName:"p",href:"/api/cc"},"Cloud Code section")," in API modules"))}u.isMDXComponent=!0}}]);