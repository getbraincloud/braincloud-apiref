"use strict";(self.webpackChunkdocusauruns_ts=self.webpackChunkdocusauruns_ts||[]).push([[39710],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},99135:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={title:"Custom Entity GetEntityPage Improvement",date:"2022-04-26",tags:["release-history"]},o=void 0,l={permalink:"/braincloud-apiref/release/2022/04/26/custom-entity-getentitypage-improvement",source:"@site/release/2022-04-26-custom-entity-getentitypage-improvement/index.md",title:"Custom Entity GetEntityPage Improvement",description:"The Challenge",date:"2022-04-26T00:00:00.000Z",formattedDate:"April 26, 2022",tags:[{label:"release-history",permalink:"/braincloud-apiref/release/tags/release-history"}],readingTime:3.24,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Custom Entity GetEntityPage Improvement",date:"2022-04-26",tags:["release-history"]},prevItem:{title:"Updated Public BaaS NAT gateways",permalink:"/braincloud-apiref/release/2022/06/13/updated-public-baas-nat-gateways"},nextItem:{title:"Reminder: Plus Plan restrictions",permalink:"/braincloud-apiref/release/2022/04/04/reminder-plus-plan-restrictions"}},s={authorsImageUrls:[]},p=[{value:"The Challenge",id:"the-challenge",level:2},{value:"The Solution",id:"the-solution",level:2},{value:"Compatibility Flag",id:"compatibility-flag",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"the-challenge"},"The Challenge"),(0,r.kt)("p",null,"Last week we became aware of a potential issue when using ",(0,r.kt)("inlineCode",{parentName:"p"},"GetEntityPage()")," with ",(0,r.kt)("em",{parentName:"p"},"owned")," entities."),(0,r.kt)("p",null,"The issue is related to how brainCloud handles ACL permissions. As you may or may not know, all entities in brainCloud support ACL permissions - and you can set the global accessibility of an object by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"acl.other")," permission to one of the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 = no access"),(0,r.kt)("li",{parentName:"ul"},"1 = read-only access"),(0,r.kt)("li",{parentName:"ul"},"2 = read + write access")),(0,r.kt)("p",null,"In loose terms, any object with ",(0,r.kt)("inlineCode",{parentName:"p"},"acl.other")," != 0 is ",(0,r.kt)("em",{parentName:"p"},"shared with")," (or ",(0,r.kt)("em",{parentName:"p"},"accessible by"),") all users of the app."),(0,r.kt)("p",null,"This has large implications when dealing with ",(0,r.kt)("em",{parentName:"p"},"Owned Custom Entities")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"GetEntityPage()")," call - because by the previous default - the call would look for all entities that meet the search criteria that:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Are ",(0,r.kt)("em",{parentName:"li"},"owned")," by the current user"),(0,r.kt)("li",{parentName:"ul"},"Are ",(0,r.kt)("em",{parentName:"li"},"accessible")," by the current user")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Owned"),' is simple - we simply add "ownerId": <profileId',">"," to the query provided by the developer."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Accessible")," is not so simple - the database must look at all of the objects that the player doesn't own, and specifically examine each objects ACL to see if ",(0,r.kt)("inlineCode",{parentName:"p"},"acl.other")," != ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," !!! ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"This is incredibly slow, and exponentially so!"))," ",(0,r.kt)("em",{parentName:"p"},"Especially since 99.9% of the time, a developer is only looking for the entities owned by the current user!")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Note - this issue does not affect ",(0,r.kt)("em",{parentName:"p"},"Unowned")," Custom Entities, ",(0,r.kt)("inlineCode",{parentName:"p"},"Sys")," calls (which ignore permissions), or the ",(0,r.kt)("em",{parentName:"p"},"Singleton")," API (which assumes objects must be owned by the current user). It only affects ",(0,r.kt)("inlineCode",{parentName:"p"},"GetEntityPage()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"GetEntityPageOffset()"),".")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"the-solution"},"The Solution"),(0,r.kt)("p",null,"To address this issue, we are changing to the default behaviour of ","`",(0,r.kt)("inlineCode",{parentName:"p"},"GetEntityPage()")," so that it no longer considers shared entities (by default) for Owned Custom Entities."),(0,r.kt)("p",null,"Thus, a query with the following criteria will now only return objects that are owned by the current user:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "pagination": {\n    "rowsPerPage": 50,\n    "pageNumber": 1\n  },\n  "searchCriteria": {\n    "data.position": "defense"\n  },\n  "sortCriteria": {\n  }\n}\n')),(0,r.kt)("p",null,"Going forward, if an app wants to modify this default behaviour to include accessible (i.e. shared) objects that are owned by other users - they can add the new ",(0,r.kt)("inlineCode",{parentName:"p"},"ownedOnly: false")," option. For example:"),(0,r.kt)("p",null,'{\n"pagination": {\n"rowsPerPage": 50,\n"pageNumber": 1\n},\n"searchCriteria": {\n"data.position": "defense"\n},\n"sortCriteria": {\n},\n{\n"options": {\n"ownedOnly": false\n}\n}'),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Note also that your CustomEntity should include ",(0,r.kt)("em",{parentName:"p"},"Custom Indexes")," that include the ",(0,r.kt)("inlineCode",{parentName:"p"},"acl.other")," field for efficient queries where ",(0,r.kt)("inlineCode",{parentName:"p"},"ownedOnly: false"),".")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"compatibility-flag"},"Compatibility Flag"),(0,r.kt)("p",null,"Because this is a change to the previous brainCloud behaviour, we have introduced a new compatibility flag. When enabled, the following flag preserves the old functionality - where both objects owned and accessible by the user will be returned."),(0,r.kt)("p",null,"The new compatibility flag can be found in the ",(0,r.kt)("strong",{parentName:"p"},"Design | Core App Info | Advanced Settings")," page:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"[ x ]"," Include shared objects in Owned Custom Entity GetEntityPage queries (warning: can be slow). Can be overwritten by specifying 'ownedOnly' in query context 'options'.")),(0,r.kt)("p",null,"When ",(0,r.kt)("em",{parentName:"p"},"enabled"),", the default for ",(0,r.kt)("inlineCode",{parentName:"p"},"ownedOnly")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," - and when ",(0,r.kt)("em",{parentName:"p"},"disabled"),", the default for ",(0,r.kt)("inlineCode",{parentName:"p"},"ownedOnly")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Note that this compatibility flag, like all compatibility flags, is ",(0,r.kt)("strong",{parentName:"p"},"automatically enabled")," for ",(0,r.kt)("em",{parentName:"p"},"existing")," apps (for backwards compatibility), and ",(0,r.kt)("strong",{parentName:"p"},"disabled")," for ",(0,r.kt)("em",{parentName:"p"},"new")," apps.")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"We believe strongly that this new-and-improved GetEntityPage behaviour is the better + safer default - and thus ",(0,r.kt)("em",{parentName:"p"},"highly recommend")," that all developers whose ",(0,r.kt)("em",{parentName:"p"},"owned queries are only expecting objects owned by the current user"),' go to this compatibility flag and immediately "uncheck" it to enable the new behaviour!'),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Remember - this option does not affect queries for Un-owned Custom Entities. It also does not affect Sys calls. So both of those scenarios will continue to return objects not owned by the current user - regardless of the compatibility setting.")),(0,r.kt)("p",null,"If you have any questions - please reach out to the support team."),(0,r.kt)("p",null,"Cheers!"))}c.isMDXComponent=!0}}]);